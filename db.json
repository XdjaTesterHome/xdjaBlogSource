{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/upload/avatar.jpg","path":"upload/avatar.jpg","modified":0,"renderable":0},{"_id":"source/upload/image/AndroidStudio_Analyzermemory.PNG","path":"upload/image/AndroidStudio_Analyzermemory.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/Androidstudio_hprof.PNG","path":"upload/image/Androidstudio_hprof.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/Dominator_tree.PNG","path":"upload/image/Dominator_tree.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/MAT_hprof.PNG","path":"upload/image/MAT_hprof.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/androidstudio_MAT.PNG","path":"upload/image/androidstudio_MAT.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/batterystats.png","path":"upload/image/batterystats.png","modified":0,"renderable":0},{"_id":"source/upload/image/data-model.jpg","path":"upload/image/data-model.jpg","modified":0,"renderable":0},{"_id":"source/upload/image/ddmsgc.PNG","path":"upload/image/ddmsgc.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/email_mat1.PNG","path":"upload/image/email_mat1.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/histogram.PNG","path":"upload/image/histogram.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/mat.PNG","path":"upload/image/mat.PNG","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/upload/image/email_start.PNG","path":"upload/image/email_start.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/traceview_choose.png","path":"upload/image/traceview_choose.png","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/giveme.jpg","path":"upload/image/lzz/giveme.jpg","modified":0,"renderable":0},{"_id":"source/upload/image/zlw/method_tracing.PNG","path":"upload/image/zlw/method_tracing.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/zlw/cpu_method_trace.PNG","path":"upload/image/zlw/cpu_method_trace.PNG","modified":0,"renderable":0},{"_id":"source/upload/image/zlw/uidstat.PNG","path":"upload/image/zlw/uidstat.PNG","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"source/upload/image/gc_root_look.png","path":"upload/image/gc_root_look.png","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/actoma.JPG","path":"upload/image/lzz/actoma.JPG","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/wakeup1.JPG","path":"upload/image/lzz/wakeup1.JPG","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/wakeup2.JPG","path":"upload/image/lzz/wakeup2.JPG","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/xpush-wakeups.JPG","path":"upload/image/lzz/xpush-wakeups.JPG","modified":0,"renderable":0},{"_id":"source/upload/image/zlw/battery_stat.png","path":"upload/image/zlw/battery_stat.png","modified":0,"renderable":0},{"_id":"source/upload/image/zlw/tracing_method.PNG","path":"upload/image/zlw/tracing_method.PNG","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/upload/image/Traceview_ddms.jpg","path":"upload/image/Traceview_ddms.jpg","modified":0,"renderable":0},{"_id":"source/upload/image/gc_tree.png","path":"upload/image/gc_tree.png","modified":0,"renderable":0},{"_id":"source/upload/image/trace_view_panel.png","path":"upload/image/trace_view_panel.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/upload/image/lzz/down-error.JPG","path":"upload/image/lzz/down-error.JPG","modified":0,"renderable":0},{"_id":"source/upload/image/lzz/down.JPG","path":"upload/image/lzz/down.JPG","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/upload/image/lzz/down-20min.JPG","path":"upload/image/lzz/down-20min.JPG","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"7f9d8d37c07abff3cfd4e17320336f6e63f45cba","modified":1478177412000},{"_id":"source/favicon.ico","hash":"74bb1347cb619d1b46534733d7b22d363f9c8f68","modified":1478171870000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1478174918000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1478174918000},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1478174918000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1478174918000},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1478174918000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1478174918000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1478174918000},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1478174918000},{"_id":"themes/next/_config.yml","hash":"c420e36bc73cd2f5d4dac45b1f0c9c3b44a7121c","modified":1478179255000},{"_id":"themes/next/bower.json","hash":"fee150da6ba9a26b6f80a029d54422d8cb82c5a7","modified":1478174918000},{"_id":"themes/next/gulpfile.coffee","hash":"d21430c020ad4b2ae195d8750c3865897e605d33","modified":1478174918000},{"_id":"themes/next/package.json","hash":"d8e463e5e83998d32f8aefee474e4f30148076cf","modified":1478174918000},{"_id":"source/_posts/Android耗电量测试.md","hash":"979bf418ffb91ce97e691bb6636f24fcdf82d3b8","modified":1478171870000},{"_id":"source/_posts/Android对cpu测试.md","hash":"fd990ed54b285d4617efbb63cd3778e6430b016a","modified":1478171870000},{"_id":"source/_posts/MAT工具的使用.md","hash":"d6706aaa864bc4786d9d690f52efd64a5c956b45","modified":1478171870000},{"_id":"source/_posts/TraceView工具的使用.md","hash":"139ed4c6a5f4edf38321a4aedebffd90c89203ac","modified":1478171870000},{"_id":"source/_posts/如何写文章.md","hash":"e037e8d32868280e4b7ff8af6cfd77dd1b09797c","modified":1478171870000},{"_id":"source/_posts/分析安全邮件首次启动内存问题.md","hash":"647542ac57030c2d7d21d08b7bc3047ccef1ae91","modified":1478171870000},{"_id":"source/_posts/移动APP耗电量&功耗测试，应该如何开展？.md","hash":"228afeed7e5f1239f5fe29b33c16d44be5cd7d07","modified":1478171870000},{"_id":"source/_posts/网络请求测试.md","hash":"e6dce2f42bb11e4a6d58fc99fbd330ff4888799d","modified":1478171870000},{"_id":"source/about/index.md","hash":"42b459ee2036032c93a67a35694a40d300513b2e","modified":1478171870000},{"_id":"source/categories/index.md","hash":"38a68d164a225dff168e30ac95b2a53b5acc3868","modified":1478171870000},{"_id":"source/tags/index.md","hash":"0fc88b12096addd3d2654409e03667e78453422f","modified":1478171870000},{"_id":"source/upload/avatar.jpg","hash":"ab976a6323c7ee43eb30ddaea26404f1883f12c3","modified":1478177758000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1478174918000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1478174918000},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1478174918000},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1478174918000},{"_id":"themes/next/languages/en.yml","hash":"e46e5250c98ffb2b3e961f9639a706f42245cb7d","modified":1478174918000},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1478174918000},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1478174918000},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1478174918000},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1478174918000},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1478174918000},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1478174918000},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1478174918000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c74cf512f300127bda30dcec1177e71cbaf8c9fb","modified":1478174918000},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1478174918000},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1478174918000},{"_id":"themes/next/layout/_layout.swig","hash":"1f6adfced1db15b9cb5017a1a62ef85e7dde2463","modified":1478174918000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1478174918000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1478174918000},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1478174918000},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1478174918000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1478174918000},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1478174918000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1478174918000},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1478174918000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1478174918000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1478174918000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1478174918000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"source/upload/image/AndroidStudio_Analyzermemory.PNG","hash":"0550833a15ee2940bd619bca6d7e9802b4699a62","modified":1478171870000},{"_id":"source/upload/image/Androidstudio_hprof.PNG","hash":"cf163d4e42991ccac5bc29bfefd19f0cd722ce3f","modified":1478171870000},{"_id":"source/upload/image/Dominator_tree.PNG","hash":"d052d3a38498a9be361a5fa71d0eaddd897d36b2","modified":1478171870000},{"_id":"source/upload/image/MAT_hprof.PNG","hash":"4a0f0c597ba96594a362be9126df20582f0b5bab","modified":1478171870000},{"_id":"source/upload/image/androidstudio_MAT.PNG","hash":"98c77ea0358dc7d6ebe45bc4460fcd65ce3fa5fe","modified":1478171870000},{"_id":"source/upload/image/batterystats.png","hash":"1eaf82acc4b98e41fee3cad3e136fb0746b6997c","modified":1478171870000},{"_id":"source/upload/image/data-model.jpg","hash":"021fc20f5ba398a5f1b7242223c1a7148e9205bf","modified":1478171870000},{"_id":"source/upload/image/ddmsgc.PNG","hash":"d4f64374f7e46213d9b0025fb4358f04a36562a5","modified":1478171870000},{"_id":"source/upload/image/email_mat1.PNG","hash":"70b96c875ffddb6c4c1f114dc3b85ddec2c8481e","modified":1478171870000},{"_id":"source/upload/image/histogram.PNG","hash":"6f484e34f1f46d47bf789c7b6918427f19f591e1","modified":1478171870000},{"_id":"source/upload/image/mat.PNG","hash":"b5d74dbc25d8b4a39c469fc043df93556c7109ec","modified":1478171870000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1478174918000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1c0e1418aace8d309fde8d4b26dd4b08493f666f","modified":1478174918000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a2052d3f379c3c70fbde47c29175ef2c637716d6","modified":1478174918000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f7138e4986b485119db84564cdeacda80ede8ad5","modified":1478174918000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1478174918000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1478174918000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1478174918000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1478174918000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1478174918000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1478174918000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1478174918000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1478174918000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6448e1335922f255c846badff630b6d84a3aba21","modified":1478174918000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1478174918000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1478174918000},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1478174918000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1478174918000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1478174918000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1478174918000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1478174918000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1478174918000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1478174918000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1478174918000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1478174918000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1478174918000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1478174918000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1478174918000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1478174918000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478174918000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478174918000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1478174918000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1478174918000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478174918000},{"_id":"source/upload/image/email_start.PNG","hash":"ab1b223c3c6cd6423924dd08a5800c7cd753572b","modified":1478171870000},{"_id":"source/upload/image/traceview_choose.png","hash":"61f10abeccfe0e22b6a5a6fb6a48087e887c1230","modified":1478171870000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478174918000},{"_id":"source/upload/image/lzz/giveme.jpg","hash":"33aa78529ca549d8fb733ac54616cd8bfd38c1d7","modified":1478171870000},{"_id":"source/upload/image/zlw/method_tracing.PNG","hash":"933401d303558b4d486c70bd84aa77f6fde99950","modified":1478171870000},{"_id":"source/upload/image/zlw/cpu_method_trace.PNG","hash":"706d03a1a1dbf442e1e93d92a8d7f4fc8ff20627","modified":1478171870000},{"_id":"source/upload/image/zlw/uidstat.PNG","hash":"62991ad0f570995b42a33deb8c871544a1950bfe","modified":1478171870000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1478174918000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"31e960d466fbef88b64d9ffd1e6da3b5f266e4f8","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1478174918000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1478174918000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1478174918000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1478174918000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1478174918000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1478174918000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1478174918000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1478174918000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1478174918000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1478174918000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1478174918000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1478174918000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1478174918000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1478174918000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1478174918000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1478174918000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1478174918000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1478174918000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1478174918000},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1478174918000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1478174918000},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1478174918000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1478174918000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1478174918000},{"_id":"source/upload/image/gc_root_look.png","hash":"311273176eb97e9c9dfc3b8b454dd83d3ebd6d31","modified":1478171870000},{"_id":"source/upload/image/lzz/actoma.JPG","hash":"d25636ccbed55f2b20d7f2fe9b3aa6dd2463c936","modified":1478171870000},{"_id":"source/upload/image/lzz/wakeup1.JPG","hash":"52b3e532d92f00edf4cbd636eb6110fc7d018990","modified":1478171870000},{"_id":"source/upload/image/lzz/wakeup2.JPG","hash":"32bb39a55516c2c7adda2a20dde3a74d507f52d4","modified":1478171870000},{"_id":"source/upload/image/lzz/xpush-wakeups.JPG","hash":"ba6bdfd9ce901559e10f618b7f20ee58dd0cb864","modified":1478171870000},{"_id":"source/upload/image/zlw/battery_stat.png","hash":"d2592f52709c7323d257496dcd57c166aa750b34","modified":1478171870000},{"_id":"source/upload/image/zlw/tracing_method.PNG","hash":"e69550609cd6233f83538566926b864166cbad1e","modified":1478171870000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1478174918000},{"_id":"source/upload/image/Traceview_ddms.jpg","hash":"d73b44a6f0b74797d6aba9c3da365053895d51f4","modified":1478171870000},{"_id":"source/upload/image/gc_tree.png","hash":"054e2a1294593a1dcba2390979b61c8364fdcea4","modified":1478171870000},{"_id":"source/upload/image/trace_view_panel.png","hash":"6f5003d391065d80cf6e1d8a80e600b65e14bc32","modified":1478171870000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e21f3fb1f6cc03c4a58b8f08e1c304f04f4c4724","modified":1478174918000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1478174918000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1478174918000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1478174918000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1478174918000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1478174918000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1478174918000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1478174918000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1478174918000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478174918000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1478174918000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1478174918000},{"_id":"source/upload/image/lzz/down-error.JPG","hash":"4d9099cd5f88f62e1cf36130a45e5bfcd8a5cd2e","modified":1478171870000},{"_id":"source/upload/image/lzz/down.JPG","hash":"b938851fe5802b5550a40715e5fd6c3a228119aa","modified":1478171870000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478174918000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1478174918000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"7894c355d323b25337f7ccc441be6cfe434fe523","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1478174918000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1478174918000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1478174918000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478174918000},{"_id":"source/upload/image/lzz/down-20min.JPG","hash":"23171f697aeb42c8a53a72f308561f960b5f4701","modified":1478171870000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1478174918000},{"_id":"public/404.html","hash":"6194b976fcc60d0a810c86a6924660679513d559","modified":1478179310816},{"_id":"public/about/index.html","hash":"952cc72d34e1862c2cb07ae7c618cc0b070a7fb9","modified":1478179310847},{"_id":"public/categories/index.html","hash":"fb5b47cecbe24fe03157af380a70006637d2081b","modified":1478179310863},{"_id":"public/2016/10/31/Android对cpu测试/index.html","hash":"13f93e11c9c47cdfb5452175d05c77121655804b","modified":1478179310925},{"_id":"public/tags/index.html","hash":"ccb4553aee4f82a4146f786c56ba29f40968c9f9","modified":1478179310941},{"_id":"public/2016/11/03/移动APP耗电量&功耗测试，应该如何开展？/index.html","hash":"b8a170895096c34ed84f0df11ef49658ede5a621","modified":1478179310972},{"_id":"public/2016/10/31/网络请求测试/index.html","hash":"70139a6e71d4a3fd873ac56a71120c815790dc1d","modified":1478179311019},{"_id":"public/2016/10/24/Android耗电量测试/index.html","hash":"faad2c4c0c6deea968b396d745e562d23057556c","modified":1478179311066},{"_id":"public/2016/10/21/分析安全邮件首次启动内存问题/index.html","hash":"e5a2acf74adedcf16a6f661dfd419af94da65737","modified":1478179311113},{"_id":"public/2016/10/19/TraceView工具的使用/index.html","hash":"73a1b4f04a7aabca7f474abff34332ad9280d16e","modified":1478179311144},{"_id":"public/2016/10/19/如何写文章/index.html","hash":"3100ca54b69ad3d182e9171dd95aec5164cb3fd4","modified":1478179311191},{"_id":"public/2016/10/19/MAT工具的使用/index.html","hash":"f0880014da75b943c862188743e7e588395887bd","modified":1478179311238},{"_id":"public/archives/index.html","hash":"b8239777db6b6a9a422d73d280df9ff5626592ff","modified":1478179311316},{"_id":"public/archives/2016/10/index.html","hash":"16fa2cf3348207f396a2c2494258c76695470967","modified":1478179311378},{"_id":"public/archives/2016/11/index.html","hash":"0b84586bc038ac974d90602df54debf312aa1905","modified":1478179311410},{"_id":"public/index.html","hash":"7cd3232b72868645ab6b09fd0826900640a7c6eb","modified":1478179311472},{"_id":"public/archives/2016/index.html","hash":"9e29a482903f02641bb98001b82ea5f764ef263a","modified":1478179311535},{"_id":"public/tags/Android耗电量/index.html","hash":"b0b07030f604348a977d6dc7ca277ec4bcad73f6","modified":1478179311566},{"_id":"public/tags/MAT-工具/index.html","hash":"c130112924ec8bb2d87733e027fc923b397b4468","modified":1478179311582},{"_id":"public/tags/Android-cpu/index.html","hash":"891bd294ffd36dc1881bd07b85bda699595495c1","modified":1478179311613},{"_id":"public/tags/TraceView-工具/index.html","hash":"53c19c031c9eb4ed8f278dbc19e00f8c4032cf1d","modified":1478179311644},{"_id":"public/tags/写博客/index.html","hash":"2c1103798bcbcd2b85720ab7eaef25bd0a8c2d15","modified":1478179311675},{"_id":"public/tags/APP性能测试-耗电量-功耗-功耗仪器-内存-CPU-流量-应用启动-专项测试-功耗仪耗电分析-客户端性能测试/index.html","hash":"7aff71d7d830641a4c3e61a9f1bee4594f57d0a8","modified":1478179311707},{"_id":"public/tags/内存/index.html","hash":"cf8e7d9eba0f15b5cb152ef0783f20a98894a880","modified":1478179311738},{"_id":"public/tags/流量请求-耗流量-网络请求-客户端性能/index.html","hash":"65e6dfa3078702079ae5ccbed343d496897cbd87","modified":1478179311769},{"_id":"public/categories/Android性能测试/index.html","hash":"f893b5285e83e699a79e678b1e0115eb49e0c7b0","modified":1478179311816},{"_id":"public/categories/工具使用/index.html","hash":"15ddac04752d8f8cf7c5ec0a19bfc62b3d684dc7","modified":1478179311863},{"_id":"public/categories/实例分析/index.html","hash":"31c9cfc0cbee5167ca372b517a9754d84ed83d30","modified":1478179311894},{"_id":"public/favicon.ico","hash":"74bb1347cb619d1b46534733d7b22d363f9c8f68","modified":1478179311910},{"_id":"public/upload/avatar.jpg","hash":"ab976a6323c7ee43eb30ddaea26404f1883f12c3","modified":1478179311910},{"_id":"public/upload/image/AndroidStudio_Analyzermemory.PNG","hash":"0550833a15ee2940bd619bca6d7e9802b4699a62","modified":1478179311910},{"_id":"public/upload/image/Androidstudio_hprof.PNG","hash":"cf163d4e42991ccac5bc29bfefd19f0cd722ce3f","modified":1478179311910},{"_id":"public/upload/image/Dominator_tree.PNG","hash":"d052d3a38498a9be361a5fa71d0eaddd897d36b2","modified":1478179311925},{"_id":"public/upload/image/MAT_hprof.PNG","hash":"4a0f0c597ba96594a362be9126df20582f0b5bab","modified":1478179311925},{"_id":"public/upload/image/androidstudio_MAT.PNG","hash":"98c77ea0358dc7d6ebe45bc4460fcd65ce3fa5fe","modified":1478179311925},{"_id":"public/upload/image/batterystats.png","hash":"1eaf82acc4b98e41fee3cad3e136fb0746b6997c","modified":1478179311925},{"_id":"public/upload/image/data-model.jpg","hash":"021fc20f5ba398a5f1b7242223c1a7148e9205bf","modified":1478179311925},{"_id":"public/upload/image/ddmsgc.PNG","hash":"d4f64374f7e46213d9b0025fb4358f04a36562a5","modified":1478179311925},{"_id":"public/upload/image/email_mat1.PNG","hash":"70b96c875ffddb6c4c1f114dc3b85ddec2c8481e","modified":1478179311925},{"_id":"public/upload/image/histogram.PNG","hash":"6f484e34f1f46d47bf789c7b6918427f19f591e1","modified":1478179311925},{"_id":"public/upload/image/mat.PNG","hash":"b5d74dbc25d8b4a39c469fc043df93556c7109ec","modified":1478179311925},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1478179311925},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1478179311925},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1478179311925},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1478179311925},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1478179311925},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1478179311925},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1478179311925},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1478179311925},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478179311925},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1478179311925},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1478179311925},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478179311925},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478179311925},{"_id":"public/upload/image/lzz/giveme.jpg","hash":"33aa78529ca549d8fb733ac54616cd8bfd38c1d7","modified":1478179311925},{"_id":"public/upload/image/zlw/method_tracing.PNG","hash":"933401d303558b4d486c70bd84aa77f6fde99950","modified":1478179311925},{"_id":"public/upload/image/zlw/cpu_method_trace.PNG","hash":"706d03a1a1dbf442e1e93d92a8d7f4fc8ff20627","modified":1478179311925},{"_id":"public/upload/image/zlw/uidstat.PNG","hash":"62991ad0f570995b42a33deb8c871544a1950bfe","modified":1478179311925},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1478179311925},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1478179311925},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478179311925},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478179311925},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478179311925},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478179311925},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478179311925},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478179311925},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1478179311925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478179311925},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478179311925},{"_id":"public/css/main.css","hash":"6b3efd6b3fbf5e9e227ada9c05fa69f75daf0c9f","modified":1478179312533},{"_id":"public/upload/image/email_start.PNG","hash":"ab1b223c3c6cd6423924dd08a5800c7cd753572b","modified":1478179312533},{"_id":"public/upload/image/traceview_choose.png","hash":"61f10abeccfe0e22b6a5a6fb6a48087e887c1230","modified":1478179312533},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1478179312533},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1478179312533},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1478179312533},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1478179312533},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1478179312533},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1478179312533},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1478179312533},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1478179312533},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1478179312548},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1478179312548},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1478179312548},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1478179312548},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1478179312548},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1478179312548},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1478179312548},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1478179312548},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1478179312548},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1478179312548},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1478179312548},{"_id":"public/upload/image/lzz/wakeup1.JPG","hash":"52b3e532d92f00edf4cbd636eb6110fc7d018990","modified":1478179312548},{"_id":"public/upload/image/lzz/actoma.JPG","hash":"d25636ccbed55f2b20d7f2fe9b3aa6dd2463c936","modified":1478179312548},{"_id":"public/upload/image/lzz/wakeup2.JPG","hash":"32bb39a55516c2c7adda2a20dde3a74d507f52d4","modified":1478179312548},{"_id":"public/upload/image/lzz/xpush-wakeups.JPG","hash":"ba6bdfd9ce901559e10f618b7f20ee58dd0cb864","modified":1478179312548},{"_id":"public/upload/image/zlw/battery_stat.png","hash":"d2592f52709c7323d257496dcd57c166aa750b34","modified":1478179312548},{"_id":"public/upload/image/zlw/tracing_method.PNG","hash":"e69550609cd6233f83538566926b864166cbad1e","modified":1478179312548},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1478179312548},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1478179312548},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478179312548},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478179312548},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1478179312548},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1478179312548},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1478179312548},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1478179312548},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1478179312548},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1478179312548},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1478179312548},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478179312548},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1478179312548},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478179312548},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1478179312564},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1478179312564},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478179312564},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1478179312564},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478179312564},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478179312564},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478179312564},{"_id":"public/upload/image/gc_root_look.png","hash":"311273176eb97e9c9dfc3b8b454dd83d3ebd6d31","modified":1478179312580},{"_id":"public/upload/image/lzz/down-error.JPG","hash":"4d9099cd5f88f62e1cf36130a45e5bfcd8a5cd2e","modified":1478179312580},{"_id":"public/upload/image/lzz/down.JPG","hash":"b938851fe5802b5550a40715e5fd6c3a228119aa","modified":1478179312580},{"_id":"public/upload/image/Traceview_ddms.jpg","hash":"d73b44a6f0b74797d6aba9c3da365053895d51f4","modified":1478179312595},{"_id":"public/upload/image/gc_tree.png","hash":"054e2a1294593a1dcba2390979b61c8364fdcea4","modified":1478179312595},{"_id":"public/upload/image/trace_view_panel.png","hash":"6f5003d391065d80cf6e1d8a80e600b65e14bc32","modified":1478179312595},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1478179312611},{"_id":"public/upload/image/lzz/down-20min.JPG","hash":"23171f697aeb42c8a53a72f308561f960b5f4701","modified":1478179312611}],"Category":[{"name":"Android性能测试","_id":"civ2dsnfx00020cwlr9wq8ixh"},{"name":"工具使用","_id":"civ2dsngd000b0cwlb578aaq4"},{"name":"实例分析","_id":"civ2dsngd000n0cwl56my40uo"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - 信大捷安博客</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - 信大捷安博客</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2016-11-03T11:51:36.000Z","updated":"2016-11-03T12:50:12.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"civ2dsndr00000cwl3vuyfq6h","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - 信大捷安博客</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - 信大捷安博客</title>\n    <meta name=\"description\" content=\"404错误，页面不存在！\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于","date":"2016-10-19T06:50:42.000Z","tags":"about","comments":0,"_content":"\n## 关于我们\n\n- 信大捷安测试团队是一个快速发展的团队，我们在不断探索更好的测试技术。\n- 更多关于信大捷安的情况可以访问[信大捷安](http://www.xdja.com/pluto/portal).","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-10-19 14:50:42\ntags: about\ncomments : false\n---\n\n## 关于我们\n\n- 信大捷安测试团队是一个快速发展的团队，我们在不断探索更好的测试技术。\n- 更多关于信大捷安的情况可以访问[信大捷安](http://www.xdja.com/pluto/portal).","updated":"2016-11-03T11:17:50.000Z","path":"about/index.html","layout":"page","_id":"civ2dsngd000v0cwlm6q7im9h","content":"<h2 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h2><ul>\n<li>信大捷安测试团队是一个快速发展的团队，我们在不断探索更好的测试技术。</li>\n<li>更多关于信大捷安的情况可以访问<a href=\"http://www.xdja.com/pluto/portal\" target=\"_blank\" rel=\"external\">信大捷安</a>.</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h2><ul>\n<li>信大捷安测试团队是一个快速发展的团队，我们在不断探索更好的测试技术。</li>\n<li>更多关于信大捷安的情况可以访问<a href=\"http://www.xdja.com/pluto/portal\">信大捷安</a>.</li>\n</ul>\n"},{"title":"分类","date":"2016-10-19T06:44:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-10-19 14:44:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-03T11:17:50.000Z","path":"categories/index.html","layout":"page","_id":"civ2dsngt00100cwl9vxykoky","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-10-19T06:42:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-10-19 14:42:39\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-03T11:17:50.000Z","path":"tags/index.html","layout":"page","_id":"civ2dsngt00110cwld48dyvzt","content":"","excerpt":"","more":""}],"Post":[{"title":"Android耗电量测试","date":"2016-10-24T01:48:58.000Z","_content":"## 背景\n- 这一周都在花时间在做电量方面的分析工作，主要是为了验证通过软件的方式测电量是否可以替代功耗仪测电量。\n\n#### 功耗仪 or 软件方式\n  至于为啥想用软件方式替代功耗仪，我个人的观点是：\n###### 功耗仪\n  - 功耗仪虽然比较精确，但是测的是整机的电量情况，对测App的电量会造成一定的影响，且不知道具体进行了什么操作。\n  - 功耗仪操作比较麻烦，需要拆机，且不好进行兼容性操作。\n  - 但功耗仪的优点是精确，任何操作或者变化都会引起电量的变化。\n\n###### 软件方式\n  - android从最开始都有统计电量的api，只是一直没有开放（可能是考虑到这个模块还不稳定），从android2.3到android7.0，api获取电流的粒度更细致，接口也发生了一些变化，不过整体思想是没有变化的。\n  - api测电量的思想：Android中各个部件的耗电量 = W * t (W表示单位时间耗电量，这个值每个设备不一样，通过power_profile.xml文件记录，这个文件放在 /system/framework/framework-res.apk中。 t 表示这个部件运行了多长时间)。  APP的耗电量就是App在运行过程中，涉及到的各个部件消耗电量的总和。\n  - 在Android4.4之前可以通过反射或者通过[某些手段](https://github.com/liwei721/android-hidden-api)访问隐藏API及internal的方式来获取电量数据.\n  - 不过从android4.4开始，Android强制加了权限限制，如下图所示：\n  ![batterystats](/upload/image/batterystats.png)\n  - 所以从Android4.4开始，想通过api来获取电量也不是那么容易，好在从Android5.0开始，google 又开放了一个利器【batteryStats】（其实它就是执行的api代码），通过这个命令可以收集 从上次充电开始一段时间内的电量数据（换句话说就是不充电状态下的电量数据）。\n\n## 实现过程\n#### API方式\n- 主要涉及到三个类和一个方法，分别是：BatteryStatsHelper、BatteryStatsImpl、PowerProfile，分别介绍下它们：\n\n###### BatteryStatsImpl\n- BatteryStatsImpl 其实是记录了Android各个部件的耗时及操作。Android对它的注释就是：All information we are collecting about things that can happen that impact battery life\n- 它是通过BatteryStatsService获取的：\n\n  ```java\n  private static BatteryStatsImpl getStats(IBatteryStats service) {\n          try {\n              ParcelFileDescriptor pfd = service.getStatisticsStream();\n              if (pfd != null) {\n                  FileInputStream fis = new ParcelFileDescriptor.AutoCloseInputStream(pfd);\n                  try {\n                      byte[] data = readFully(fis, MemoryFile.getSize(pfd.getFileDescriptor()));\n                      Parcel parcel = Parcel.obtain();\n                      parcel.unmarshall(data, 0, data.length);\n                      parcel.setDataPosition(0);\n                      BatteryStatsImpl stats = com.android.internal.os.BatteryStatsImpl.CREATOR\n                              .createFromParcel(parcel);\n                      stats.distributeWorkLocked(BatteryStats.STATS_SINCE_CHARGED);\n                      return stats;\n                  } catch (IOException e) {\n                      Log.w(TAG, \"Unable to read statistics stream\", e);\n                  }\n              }\n          } catch (RemoteException e) {\n              Log.w(TAG, \"RemoteException:\", e);\n          }\n          return new BatteryStatsImpl();\n      }\n  ```\n- 如上所示，通过service.getStatisticsStream来获取 batterstats的数据（可以进一步查看BatteryStatsService源码）。\n\n###### PowerProfile\n- 它其实就干了一件事情，将上面提到的power_profile.xml加载解析到内存中，然后封装了一些比较常用的方法，比如获取cpu的频率级别个数等。\n- 这里说下这个power_profile.xml中记录的数据，我们可以通过apktool工具反编译framework-res.apk，然后在/res/xml/目录下就能找到power_profile.xml。我们看下它里面内容大致是什么：\n\n  ```xml\n   <item name=\"none\">0</item>\n   <item name=\"screen.on\">170</item>\n   <item name=\"screen.full\">440</item>\n   <item name=\"bluetooth.active\">30</item>\n   <item name=\"bluetooth.on\">3</item>\n   <item name=\"wifi.on\">10</item>\n   <item name=\"wifi.active\">50</item>\n   <item name=\"wifi.scan\">100</item>\n   <item name=\"dsp.audio\">25</item>\n   <item name=\"dsp.video\">180</item>\n   <item name=\"gps.on\">70</item>\n   <item name=\"radio.active\">350</item>\n   <item name=\"radio.scanning\">10</item>\n  ```\n- 其实这里面记录的正是各个Android部件的单位时间耗电量（类似于买东西时的价格表）。\n\n###### BatteryStatsHelper 中processAppusage方法\n- BatteryStatsHelper 主要作用是用来计算耗电量的，通过refreshStats方法来开始计算。\n- 其中processAPPUsage是用来计算App耗电的（比如：wakelock、cpu），processMiscUsage是用来计算硬件耗电的（比如：wifi、屏幕）。\n- 我们测App的耗电量，其实关注processAPPUsage就够了，这里就不贴代码了，可以自行去查看源码，逻辑还是挺简单的，只不过需要熟悉计算的方法，网上有很多介绍这段源码的，也可以Google了解。\n\n###### 尝试的过程\n- 第一次尝试 想通过反射去实现processAPPUsage的逻辑，从而能分别拿到每个部件的耗电是多少。但是尝试了一段时间，发现对于实现方法内部的逻辑，反射过于麻烦了，要反射的方法及对象太多。\n- 第二次尝试用android-hidden-api去实现，这个方法其实就是替代反射，对于hiden的类、方法以及internal包下的类，Android在编译成sdk时，是过滤掉的，所以我们没办法直接使用他们，而android-hidden-api的思路是用设备中的android.jar替换本地sdk中的android.jar，然后就可以访问隐藏及internal包下的类。\n- 尝试了很长时间后，发现我没办法拿到BatteryStatsImpl的对象，前面提到过，它是在BatteryStatsService中被初始化的，我们是没办法直接操作BatterStatsService的。因此这里得出个结论 **以后做任何尝试之前，需要搞清楚代码的原理，否则会多走很多弯路，必然会花费很多时间**\n- 第三次尝试是从Android setting源码入手，参考它初始化BatteryStatsHelper及获取BatteryStatsImpl的方式。然后感觉快要出结果时，又碰到了一个crash，提示我没有BatteryStats的权限。上面也有提到过从android 4.4开始，强制增加了权限校验，非得是System才能有权限（App放到/system/app/中）。\n- 第四次尝试是准备用hook的方式绕开权限控制，因为我发现他们都调用了一个统一的方法，且可以hook BatteryStatsService这个系统服务：\n\n  ```java\n  public void enforceCallingPermission() {\n          if (Binder.getCallingPid() == Process.myPid()) {\n              return;\n          }\n          mContext.enforcePermission(android.Manifest.permission.UPDATE_DEVICE_STATS,\n                  Binder.getCallingPid(), Binder.getCallingUid(), null);\n      }\n  ```\n- 想Hook掉这方法，让他啥也不干。这样就能绕过权限限制，完成之后运行发现还是报权限问题，于是查看源码，发现真是悲剧，发现有的方法调用的是：\n\n  ```java\n  mContext.enforceCallingPermission(\n                  android.Manifest.permission.BATTERY_STATS, null);\n  ```\n这样hook这个方法就达不到目的了，只能另想办法。\n\n- 第五个方案没有尝试，因为感觉前面投入时间太多了，其实我想绕过Android api，用它的思路自己计算或许可行，具体操作是：先读取power_profie.xml的信息，然后通过dumpsys 各个服务，得出各个部件运行的时间，然后计算部件的耗电量。\n\n#### adb shell dumpsys batterystats\n- 从Android5.0开始batterystats工具也能采集很详细的数据，所以最后我采用这种方式来获取App的耗电量，它能够采集：一段时间内，App使用了多久Cpu、WakeLock耗用多长时间及哪些进程操作了wakelock多长时间等。\n\n###### 实现方式\n- 连上手机，执行如下命令：\n\n  ```bash\n  $ adb shell dumpsys batterystats --enable full-wake-history\n  $ adb shell dumpsys batterystats --reset 清空电量数据\n  ```\n- 拔掉手机，测试自己的场景。\n- 连上手机，执行命令：\n\n  ```bash\n  $ adb shell batterystats package_name > bugreport.txt\n    用于采集数据\n  ```\n- 我这里写了个Python脚本，主要是用来分析收集采集的数据，写入excel,可以在[公司内网](http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/apptestcase/battery_auto_inspect.py)访问代码。\n- 也可以用github上面的[battery-historian](https://github.com/liwei721/battery-historian)将结果图形化。不过生成的html，js文件需要翻墙才能访问。\n\n###### 采集到的数据名词\n- Estimated power use (mAh) ：它下面列出的是各个uid的耗电量，也就是app中各个应用和硬件的耗电。\n- Computed drain ：是根据power_proile.xml计算出来的值。\n- actual drain ：根据电池实际的电量消耗计算最小值到最大值的范围。\n\n  ```java\n  pw.print(prefix); pw.print(\"    Capacity: \");\n                      printmAh(pw, helper.getPowerProfile().getBatteryCapacity());\n                      pw.print(\", Computed drain: \"); printmAh(pw, helper.getComputedPower());\n                      pw.print(\", actual drain: \"); printmAh(pw, helper.getMinDrainedPower());\n                      if (helper.getMinDrainedPower() != helper.getMaxDrainedPower()) {\n                          pw.print(\"-\"); printmAh(pw, helper.getMaxDrainedPower());\n                      }\n  ```\n- Statistics since last charge: 从上次充电之后的数据情况。\n\n## 总结\n- 拿了之前安全芯片的功耗仪测试数据，用软件的方式测，拿到的结果和功耗仪的数据还是有差别的，Android自己也承认了，用power_profile.xml计算出来的电量是模拟值。不过在结果中的actual drain值是个范围，感觉和功耗仪的结果比较接近。\n- 能不能替代功耗仪测试电量，还得继续多个版本来看，从目前的测试情况来看，我感觉是可以替代看看的。因为软件方式可以看到这段时间内的耗电进程及拿到粗略的电量值。\n","source":"_posts/Android耗电量测试.md","raw":"---\ntitle: Android耗电量测试\ndate: 2016-10-24 09:48:58\ntags: Android耗电量\ncategories: Android性能测试\n---\n## 背景\n- 这一周都在花时间在做电量方面的分析工作，主要是为了验证通过软件的方式测电量是否可以替代功耗仪测电量。\n\n#### 功耗仪 or 软件方式\n  至于为啥想用软件方式替代功耗仪，我个人的观点是：\n###### 功耗仪\n  - 功耗仪虽然比较精确，但是测的是整机的电量情况，对测App的电量会造成一定的影响，且不知道具体进行了什么操作。\n  - 功耗仪操作比较麻烦，需要拆机，且不好进行兼容性操作。\n  - 但功耗仪的优点是精确，任何操作或者变化都会引起电量的变化。\n\n###### 软件方式\n  - android从最开始都有统计电量的api，只是一直没有开放（可能是考虑到这个模块还不稳定），从android2.3到android7.0，api获取电流的粒度更细致，接口也发生了一些变化，不过整体思想是没有变化的。\n  - api测电量的思想：Android中各个部件的耗电量 = W * t (W表示单位时间耗电量，这个值每个设备不一样，通过power_profile.xml文件记录，这个文件放在 /system/framework/framework-res.apk中。 t 表示这个部件运行了多长时间)。  APP的耗电量就是App在运行过程中，涉及到的各个部件消耗电量的总和。\n  - 在Android4.4之前可以通过反射或者通过[某些手段](https://github.com/liwei721/android-hidden-api)访问隐藏API及internal的方式来获取电量数据.\n  - 不过从android4.4开始，Android强制加了权限限制，如下图所示：\n  ![batterystats](/upload/image/batterystats.png)\n  - 所以从Android4.4开始，想通过api来获取电量也不是那么容易，好在从Android5.0开始，google 又开放了一个利器【batteryStats】（其实它就是执行的api代码），通过这个命令可以收集 从上次充电开始一段时间内的电量数据（换句话说就是不充电状态下的电量数据）。\n\n## 实现过程\n#### API方式\n- 主要涉及到三个类和一个方法，分别是：BatteryStatsHelper、BatteryStatsImpl、PowerProfile，分别介绍下它们：\n\n###### BatteryStatsImpl\n- BatteryStatsImpl 其实是记录了Android各个部件的耗时及操作。Android对它的注释就是：All information we are collecting about things that can happen that impact battery life\n- 它是通过BatteryStatsService获取的：\n\n  ```java\n  private static BatteryStatsImpl getStats(IBatteryStats service) {\n          try {\n              ParcelFileDescriptor pfd = service.getStatisticsStream();\n              if (pfd != null) {\n                  FileInputStream fis = new ParcelFileDescriptor.AutoCloseInputStream(pfd);\n                  try {\n                      byte[] data = readFully(fis, MemoryFile.getSize(pfd.getFileDescriptor()));\n                      Parcel parcel = Parcel.obtain();\n                      parcel.unmarshall(data, 0, data.length);\n                      parcel.setDataPosition(0);\n                      BatteryStatsImpl stats = com.android.internal.os.BatteryStatsImpl.CREATOR\n                              .createFromParcel(parcel);\n                      stats.distributeWorkLocked(BatteryStats.STATS_SINCE_CHARGED);\n                      return stats;\n                  } catch (IOException e) {\n                      Log.w(TAG, \"Unable to read statistics stream\", e);\n                  }\n              }\n          } catch (RemoteException e) {\n              Log.w(TAG, \"RemoteException:\", e);\n          }\n          return new BatteryStatsImpl();\n      }\n  ```\n- 如上所示，通过service.getStatisticsStream来获取 batterstats的数据（可以进一步查看BatteryStatsService源码）。\n\n###### PowerProfile\n- 它其实就干了一件事情，将上面提到的power_profile.xml加载解析到内存中，然后封装了一些比较常用的方法，比如获取cpu的频率级别个数等。\n- 这里说下这个power_profile.xml中记录的数据，我们可以通过apktool工具反编译framework-res.apk，然后在/res/xml/目录下就能找到power_profile.xml。我们看下它里面内容大致是什么：\n\n  ```xml\n   <item name=\"none\">0</item>\n   <item name=\"screen.on\">170</item>\n   <item name=\"screen.full\">440</item>\n   <item name=\"bluetooth.active\">30</item>\n   <item name=\"bluetooth.on\">3</item>\n   <item name=\"wifi.on\">10</item>\n   <item name=\"wifi.active\">50</item>\n   <item name=\"wifi.scan\">100</item>\n   <item name=\"dsp.audio\">25</item>\n   <item name=\"dsp.video\">180</item>\n   <item name=\"gps.on\">70</item>\n   <item name=\"radio.active\">350</item>\n   <item name=\"radio.scanning\">10</item>\n  ```\n- 其实这里面记录的正是各个Android部件的单位时间耗电量（类似于买东西时的价格表）。\n\n###### BatteryStatsHelper 中processAppusage方法\n- BatteryStatsHelper 主要作用是用来计算耗电量的，通过refreshStats方法来开始计算。\n- 其中processAPPUsage是用来计算App耗电的（比如：wakelock、cpu），processMiscUsage是用来计算硬件耗电的（比如：wifi、屏幕）。\n- 我们测App的耗电量，其实关注processAPPUsage就够了，这里就不贴代码了，可以自行去查看源码，逻辑还是挺简单的，只不过需要熟悉计算的方法，网上有很多介绍这段源码的，也可以Google了解。\n\n###### 尝试的过程\n- 第一次尝试 想通过反射去实现processAPPUsage的逻辑，从而能分别拿到每个部件的耗电是多少。但是尝试了一段时间，发现对于实现方法内部的逻辑，反射过于麻烦了，要反射的方法及对象太多。\n- 第二次尝试用android-hidden-api去实现，这个方法其实就是替代反射，对于hiden的类、方法以及internal包下的类，Android在编译成sdk时，是过滤掉的，所以我们没办法直接使用他们，而android-hidden-api的思路是用设备中的android.jar替换本地sdk中的android.jar，然后就可以访问隐藏及internal包下的类。\n- 尝试了很长时间后，发现我没办法拿到BatteryStatsImpl的对象，前面提到过，它是在BatteryStatsService中被初始化的，我们是没办法直接操作BatterStatsService的。因此这里得出个结论 **以后做任何尝试之前，需要搞清楚代码的原理，否则会多走很多弯路，必然会花费很多时间**\n- 第三次尝试是从Android setting源码入手，参考它初始化BatteryStatsHelper及获取BatteryStatsImpl的方式。然后感觉快要出结果时，又碰到了一个crash，提示我没有BatteryStats的权限。上面也有提到过从android 4.4开始，强制增加了权限校验，非得是System才能有权限（App放到/system/app/中）。\n- 第四次尝试是准备用hook的方式绕开权限控制，因为我发现他们都调用了一个统一的方法，且可以hook BatteryStatsService这个系统服务：\n\n  ```java\n  public void enforceCallingPermission() {\n          if (Binder.getCallingPid() == Process.myPid()) {\n              return;\n          }\n          mContext.enforcePermission(android.Manifest.permission.UPDATE_DEVICE_STATS,\n                  Binder.getCallingPid(), Binder.getCallingUid(), null);\n      }\n  ```\n- 想Hook掉这方法，让他啥也不干。这样就能绕过权限限制，完成之后运行发现还是报权限问题，于是查看源码，发现真是悲剧，发现有的方法调用的是：\n\n  ```java\n  mContext.enforceCallingPermission(\n                  android.Manifest.permission.BATTERY_STATS, null);\n  ```\n这样hook这个方法就达不到目的了，只能另想办法。\n\n- 第五个方案没有尝试，因为感觉前面投入时间太多了，其实我想绕过Android api，用它的思路自己计算或许可行，具体操作是：先读取power_profie.xml的信息，然后通过dumpsys 各个服务，得出各个部件运行的时间，然后计算部件的耗电量。\n\n#### adb shell dumpsys batterystats\n- 从Android5.0开始batterystats工具也能采集很详细的数据，所以最后我采用这种方式来获取App的耗电量，它能够采集：一段时间内，App使用了多久Cpu、WakeLock耗用多长时间及哪些进程操作了wakelock多长时间等。\n\n###### 实现方式\n- 连上手机，执行如下命令：\n\n  ```bash\n  $ adb shell dumpsys batterystats --enable full-wake-history\n  $ adb shell dumpsys batterystats --reset 清空电量数据\n  ```\n- 拔掉手机，测试自己的场景。\n- 连上手机，执行命令：\n\n  ```bash\n  $ adb shell batterystats package_name > bugreport.txt\n    用于采集数据\n  ```\n- 我这里写了个Python脚本，主要是用来分析收集采集的数据，写入excel,可以在[公司内网](http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/apptestcase/battery_auto_inspect.py)访问代码。\n- 也可以用github上面的[battery-historian](https://github.com/liwei721/battery-historian)将结果图形化。不过生成的html，js文件需要翻墙才能访问。\n\n###### 采集到的数据名词\n- Estimated power use (mAh) ：它下面列出的是各个uid的耗电量，也就是app中各个应用和硬件的耗电。\n- Computed drain ：是根据power_proile.xml计算出来的值。\n- actual drain ：根据电池实际的电量消耗计算最小值到最大值的范围。\n\n  ```java\n  pw.print(prefix); pw.print(\"    Capacity: \");\n                      printmAh(pw, helper.getPowerProfile().getBatteryCapacity());\n                      pw.print(\", Computed drain: \"); printmAh(pw, helper.getComputedPower());\n                      pw.print(\", actual drain: \"); printmAh(pw, helper.getMinDrainedPower());\n                      if (helper.getMinDrainedPower() != helper.getMaxDrainedPower()) {\n                          pw.print(\"-\"); printmAh(pw, helper.getMaxDrainedPower());\n                      }\n  ```\n- Statistics since last charge: 从上次充电之后的数据情况。\n\n## 总结\n- 拿了之前安全芯片的功耗仪测试数据，用软件的方式测，拿到的结果和功耗仪的数据还是有差别的，Android自己也承认了，用power_profile.xml计算出来的电量是模拟值。不过在结果中的actual drain值是个范围，感觉和功耗仪的结果比较接近。\n- 能不能替代功耗仪测试电量，还得继续多个版本来看，从目前的测试情况来看，我感觉是可以替代看看的。因为软件方式可以看到这段时间内的耗电进程及拿到粗略的电量值。\n","slug":"Android耗电量测试","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsnfx00010cwl370hme1q","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>这一周都在花时间在做电量方面的分析工作，主要是为了验证通过软件的方式测电量是否可以替代功耗仪测电量。</li>\n</ul>\n<h4 id=\"功耗仪-or-软件方式\"><a href=\"#功耗仪-or-软件方式\" class=\"headerlink\" title=\"功耗仪 or 软件方式\"></a>功耗仪 or 软件方式</h4><p>  至于为啥想用软件方式替代功耗仪，我个人的观点是：</p>\n<h6 id=\"功耗仪\"><a href=\"#功耗仪\" class=\"headerlink\" title=\"功耗仪\"></a>功耗仪</h6><ul>\n<li>功耗仪虽然比较精确，但是测的是整机的电量情况，对测App的电量会造成一定的影响，且不知道具体进行了什么操作。</li>\n<li>功耗仪操作比较麻烦，需要拆机，且不好进行兼容性操作。</li>\n<li>但功耗仪的优点是精确，任何操作或者变化都会引起电量的变化。</li>\n</ul>\n<h6 id=\"软件方式\"><a href=\"#软件方式\" class=\"headerlink\" title=\"软件方式\"></a>软件方式</h6><ul>\n<li>android从最开始都有统计电量的api，只是一直没有开放（可能是考虑到这个模块还不稳定），从android2.3到android7.0，api获取电流的粒度更细致，接口也发生了一些变化，不过整体思想是没有变化的。</li>\n<li>api测电量的思想：Android中各个部件的耗电量 = W * t (W表示单位时间耗电量，这个值每个设备不一样，通过power_profile.xml文件记录，这个文件放在 /system/framework/framework-res.apk中。 t 表示这个部件运行了多长时间)。  APP的耗电量就是App在运行过程中，涉及到的各个部件消耗电量的总和。</li>\n<li>在Android4.4之前可以通过反射或者通过<a href=\"https://github.com/liwei721/android-hidden-api\" target=\"_blank\" rel=\"external\">某些手段</a>访问隐藏API及internal的方式来获取电量数据.</li>\n<li>不过从android4.4开始，Android强制加了权限限制，如下图所示：<br><img src=\"/upload/image/batterystats.png\" alt=\"batterystats\"></li>\n<li>所以从Android4.4开始，想通过api来获取电量也不是那么容易，好在从Android5.0开始，google 又开放了一个利器【batteryStats】（其实它就是执行的api代码），通过这个命令可以收集 从上次充电开始一段时间内的电量数据（换句话说就是不充电状态下的电量数据）。</li>\n</ul>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><h4 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h4><ul>\n<li>主要涉及到三个类和一个方法，分别是：BatteryStatsHelper、BatteryStatsImpl、PowerProfile，分别介绍下它们：</li>\n</ul>\n<h6 id=\"BatteryStatsImpl\"><a href=\"#BatteryStatsImpl\" class=\"headerlink\" title=\"BatteryStatsImpl\"></a>BatteryStatsImpl</h6><ul>\n<li>BatteryStatsImpl 其实是记录了Android各个部件的耗时及操作。Android对它的注释就是：All information we are collecting about things that can happen that impact battery life</li>\n<li><p>它是通过BatteryStatsService获取的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BatteryStatsImpl <span class=\"title\">getStats</span><span class=\"params\">(IBatteryStats service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ParcelFileDescriptor pfd = service.getStatisticsStream();</div><div class=\"line\">            <span class=\"keyword\">if</span> (pfd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                FileInputStream fis = <span class=\"keyword\">new</span> ParcelFileDescriptor.AutoCloseInputStream(pfd);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">byte</span>[] data = readFully(fis, MemoryFile.getSize(pfd.getFileDescriptor()));</div><div class=\"line\">                    Parcel parcel = Parcel.obtain();</div><div class=\"line\">                    parcel.unmarshall(data, <span class=\"number\">0</span>, data.length);</div><div class=\"line\">                    parcel.setDataPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                    BatteryStatsImpl stats = com.android.internal.os.BatteryStatsImpl.CREATOR</div><div class=\"line\">                            .createFromParcel(parcel);</div><div class=\"line\">                    stats.distributeWorkLocked(BatteryStats.STATS_SINCE_CHARGED);</div><div class=\"line\">                    <span class=\"keyword\">return</span> stats;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    Log.w(TAG, <span class=\"string\">\"Unable to read statistics stream\"</span>, e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"RemoteException:\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BatteryStatsImpl();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如上所示，通过service.getStatisticsStream来获取 batterstats的数据（可以进一步查看BatteryStatsService源码）。</p>\n</li>\n</ul>\n<h6 id=\"PowerProfile\"><a href=\"#PowerProfile\" class=\"headerlink\" title=\"PowerProfile\"></a>PowerProfile</h6><ul>\n<li>它其实就干了一件事情，将上面提到的power_profile.xml加载解析到内存中，然后封装了一些比较常用的方法，比如获取cpu的频率级别个数等。</li>\n<li><p>这里说下这个power_profile.xml中记录的数据，我们可以通过apktool工具反编译framework-res.apk，然后在/res/xml/目录下就能找到power_profile.xml。我们看下它里面内容大致是什么：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"none\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen.on\"</span>&gt;</span>170<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen.full\"</span>&gt;</span>440<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bluetooth.active\"</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bluetooth.on\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.on\"</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.active\"</span>&gt;</span>50<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.scan\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dsp.audio\"</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dsp.video\"</span>&gt;</span>180<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gps.on\"</span>&gt;</span>70<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radio.active\"</span>&gt;</span>350<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radio.scanning\"</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>其实这里面记录的正是各个Android部件的单位时间耗电量（类似于买东西时的价格表）。</p>\n</li>\n</ul>\n<h6 id=\"BatteryStatsHelper-中processAppusage方法\"><a href=\"#BatteryStatsHelper-中processAppusage方法\" class=\"headerlink\" title=\"BatteryStatsHelper 中processAppusage方法\"></a>BatteryStatsHelper 中processAppusage方法</h6><ul>\n<li>BatteryStatsHelper 主要作用是用来计算耗电量的，通过refreshStats方法来开始计算。</li>\n<li>其中processAPPUsage是用来计算App耗电的（比如：wakelock、cpu），processMiscUsage是用来计算硬件耗电的（比如：wifi、屏幕）。</li>\n<li>我们测App的耗电量，其实关注processAPPUsage就够了，这里就不贴代码了，可以自行去查看源码，逻辑还是挺简单的，只不过需要熟悉计算的方法，网上有很多介绍这段源码的，也可以Google了解。</li>\n</ul>\n<h6 id=\"尝试的过程\"><a href=\"#尝试的过程\" class=\"headerlink\" title=\"尝试的过程\"></a>尝试的过程</h6><ul>\n<li>第一次尝试 想通过反射去实现processAPPUsage的逻辑，从而能分别拿到每个部件的耗电是多少。但是尝试了一段时间，发现对于实现方法内部的逻辑，反射过于麻烦了，要反射的方法及对象太多。</li>\n<li>第二次尝试用android-hidden-api去实现，这个方法其实就是替代反射，对于hiden的类、方法以及internal包下的类，Android在编译成sdk时，是过滤掉的，所以我们没办法直接使用他们，而android-hidden-api的思路是用设备中的android.jar替换本地sdk中的android.jar，然后就可以访问隐藏及internal包下的类。</li>\n<li>尝试了很长时间后，发现我没办法拿到BatteryStatsImpl的对象，前面提到过，它是在BatteryStatsService中被初始化的，我们是没办法直接操作BatterStatsService的。因此这里得出个结论 <strong>以后做任何尝试之前，需要搞清楚代码的原理，否则会多走很多弯路，必然会花费很多时间</strong></li>\n<li>第三次尝试是从Android setting源码入手，参考它初始化BatteryStatsHelper及获取BatteryStatsImpl的方式。然后感觉快要出结果时，又碰到了一个crash，提示我没有BatteryStats的权限。上面也有提到过从android 4.4开始，强制增加了权限校验，非得是System才能有权限（App放到/system/app/中）。</li>\n<li><p>第四次尝试是准备用hook的方式绕开权限控制，因为我发现他们都调用了一个统一的方法，且可以hook BatteryStatsService这个系统服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enforceCallingPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Binder.getCallingPid() == Process.myPid()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mContext.enforcePermission(android.Manifest.permission.UPDATE_DEVICE_STATS,</div><div class=\"line\">                Binder.getCallingPid(), Binder.getCallingUid(), <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>想Hook掉这方法，让他啥也不干。这样就能绕过权限限制，完成之后运行发现还是报权限问题，于是查看源码，发现真是悲剧，发现有的方法调用的是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mContext.enforceCallingPermission(</div><div class=\"line\">                android.Manifest.permission.BATTERY_STATS, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样hook这个方法就达不到目的了，只能另想办法。</p>\n<ul>\n<li>第五个方案没有尝试，因为感觉前面投入时间太多了，其实我想绕过Android api，用它的思路自己计算或许可行，具体操作是：先读取power_profie.xml的信息，然后通过dumpsys 各个服务，得出各个部件运行的时间，然后计算部件的耗电量。</li>\n</ul>\n<h4 id=\"adb-shell-dumpsys-batterystats\"><a href=\"#adb-shell-dumpsys-batterystats\" class=\"headerlink\" title=\"adb shell dumpsys batterystats\"></a>adb shell dumpsys batterystats</h4><ul>\n<li>从Android5.0开始batterystats工具也能采集很详细的数据，所以最后我采用这种方式来获取App的耗电量，它能够采集：一段时间内，App使用了多久Cpu、WakeLock耗用多长时间及哪些进程操作了wakelock多长时间等。</li>\n</ul>\n<h6 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h6><ul>\n<li><p>连上手机，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb shell dumpsys batterystats --enable full-wake-history</div><div class=\"line\">$ adb shell dumpsys batterystats --reset 清空电量数据</div></pre></td></tr></table></figure>\n</li>\n<li><p>拔掉手机，测试自己的场景。</p>\n</li>\n<li><p>连上手机，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb shell batterystats package_name &gt; bugreport.txt</div><div class=\"line\">  用于采集数据</div></pre></td></tr></table></figure>\n</li>\n<li><p>我这里写了个Python脚本，主要是用来分析收集采集的数据，写入excel,可以在<a href=\"http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/apptestcase/battery_auto_inspect.py\" target=\"_blank\" rel=\"external\">公司内网</a>访问代码。</p>\n</li>\n<li>也可以用github上面的<a href=\"https://github.com/liwei721/battery-historian\" target=\"_blank\" rel=\"external\">battery-historian</a>将结果图形化。不过生成的html，js文件需要翻墙才能访问。</li>\n</ul>\n<h6 id=\"采集到的数据名词\"><a href=\"#采集到的数据名词\" class=\"headerlink\" title=\"采集到的数据名词\"></a>采集到的数据名词</h6><ul>\n<li>Estimated power use (mAh) ：它下面列出的是各个uid的耗电量，也就是app中各个应用和硬件的耗电。</li>\n<li>Computed drain ：是根据power_proile.xml计算出来的值。</li>\n<li><p>actual drain ：根据电池实际的电量消耗计算最小值到最大值的范围。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pw.print(prefix); pw.print(<span class=\"string\">\"    Capacity: \"</span>);</div><div class=\"line\">                    printmAh(pw, helper.getPowerProfile().getBatteryCapacity());</div><div class=\"line\">                    pw.print(<span class=\"string\">\", Computed drain: \"</span>); printmAh(pw, helper.getComputedPower());</div><div class=\"line\">                    pw.print(<span class=\"string\">\", actual drain: \"</span>); printmAh(pw, helper.getMinDrainedPower());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (helper.getMinDrainedPower() != helper.getMaxDrainedPower()) &#123;</div><div class=\"line\">                        pw.print(<span class=\"string\">\"-\"</span>); printmAh(pw, helper.getMaxDrainedPower());</div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Statistics since last charge: 从上次充电之后的数据情况。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>拿了之前安全芯片的功耗仪测试数据，用软件的方式测，拿到的结果和功耗仪的数据还是有差别的，Android自己也承认了，用power_profile.xml计算出来的电量是模拟值。不过在结果中的actual drain值是个范围，感觉和功耗仪的结果比较接近。</li>\n<li>能不能替代功耗仪测试电量，还得继续多个版本来看，从目前的测试情况来看，我感觉是可以替代看看的。因为软件方式可以看到这段时间内的耗电进程及拿到粗略的电量值。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>这一周都在花时间在做电量方面的分析工作，主要是为了验证通过软件的方式测电量是否可以替代功耗仪测电量。</li>\n</ul>\n<h4 id=\"功耗仪-or-软件方式\"><a href=\"#功耗仪-or-软件方式\" class=\"headerlink\" title=\"功耗仪 or 软件方式\"></a>功耗仪 or 软件方式</h4><p>  至于为啥想用软件方式替代功耗仪，我个人的观点是：</p>\n<h6 id=\"功耗仪\"><a href=\"#功耗仪\" class=\"headerlink\" title=\"功耗仪\"></a>功耗仪</h6><ul>\n<li>功耗仪虽然比较精确，但是测的是整机的电量情况，对测App的电量会造成一定的影响，且不知道具体进行了什么操作。</li>\n<li>功耗仪操作比较麻烦，需要拆机，且不好进行兼容性操作。</li>\n<li>但功耗仪的优点是精确，任何操作或者变化都会引起电量的变化。</li>\n</ul>\n<h6 id=\"软件方式\"><a href=\"#软件方式\" class=\"headerlink\" title=\"软件方式\"></a>软件方式</h6><ul>\n<li>android从最开始都有统计电量的api，只是一直没有开放（可能是考虑到这个模块还不稳定），从android2.3到android7.0，api获取电流的粒度更细致，接口也发生了一些变化，不过整体思想是没有变化的。</li>\n<li>api测电量的思想：Android中各个部件的耗电量 = W * t (W表示单位时间耗电量，这个值每个设备不一样，通过power_profile.xml文件记录，这个文件放在 /system/framework/framework-res.apk中。 t 表示这个部件运行了多长时间)。  APP的耗电量就是App在运行过程中，涉及到的各个部件消耗电量的总和。</li>\n<li>在Android4.4之前可以通过反射或者通过<a href=\"https://github.com/liwei721/android-hidden-api\">某些手段</a>访问隐藏API及internal的方式来获取电量数据.</li>\n<li>不过从android4.4开始，Android强制加了权限限制，如下图所示：<br><img src=\"/upload/image/batterystats.png\" alt=\"batterystats\"></li>\n<li>所以从Android4.4开始，想通过api来获取电量也不是那么容易，好在从Android5.0开始，google 又开放了一个利器【batteryStats】（其实它就是执行的api代码），通过这个命令可以收集 从上次充电开始一段时间内的电量数据（换句话说就是不充电状态下的电量数据）。</li>\n</ul>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><h4 id=\"API方式\"><a href=\"#API方式\" class=\"headerlink\" title=\"API方式\"></a>API方式</h4><ul>\n<li>主要涉及到三个类和一个方法，分别是：BatteryStatsHelper、BatteryStatsImpl、PowerProfile，分别介绍下它们：</li>\n</ul>\n<h6 id=\"BatteryStatsImpl\"><a href=\"#BatteryStatsImpl\" class=\"headerlink\" title=\"BatteryStatsImpl\"></a>BatteryStatsImpl</h6><ul>\n<li>BatteryStatsImpl 其实是记录了Android各个部件的耗时及操作。Android对它的注释就是：All information we are collecting about things that can happen that impact battery life</li>\n<li><p>它是通过BatteryStatsService获取的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BatteryStatsImpl <span class=\"title\">getStats</span><span class=\"params\">(IBatteryStats service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ParcelFileDescriptor pfd = service.getStatisticsStream();</div><div class=\"line\">            <span class=\"keyword\">if</span> (pfd != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                FileInputStream fis = <span class=\"keyword\">new</span> ParcelFileDescriptor.AutoCloseInputStream(pfd);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">byte</span>[] data = readFully(fis, MemoryFile.getSize(pfd.getFileDescriptor()));</div><div class=\"line\">                    Parcel parcel = Parcel.obtain();</div><div class=\"line\">                    parcel.unmarshall(data, <span class=\"number\">0</span>, data.length);</div><div class=\"line\">                    parcel.setDataPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                    BatteryStatsImpl stats = com.android.internal.os.BatteryStatsImpl.CREATOR</div><div class=\"line\">                            .createFromParcel(parcel);</div><div class=\"line\">                    stats.distributeWorkLocked(BatteryStats.STATS_SINCE_CHARGED);</div><div class=\"line\">                    <span class=\"keyword\">return</span> stats;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    Log.w(TAG, <span class=\"string\">\"Unable to read statistics stream\"</span>, e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"RemoteException:\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BatteryStatsImpl();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如上所示，通过service.getStatisticsStream来获取 batterstats的数据（可以进一步查看BatteryStatsService源码）。</p>\n</li>\n</ul>\n<h6 id=\"PowerProfile\"><a href=\"#PowerProfile\" class=\"headerlink\" title=\"PowerProfile\"></a>PowerProfile</h6><ul>\n<li>它其实就干了一件事情，将上面提到的power_profile.xml加载解析到内存中，然后封装了一些比较常用的方法，比如获取cpu的频率级别个数等。</li>\n<li><p>这里说下这个power_profile.xml中记录的数据，我们可以通过apktool工具反编译framework-res.apk，然后在/res/xml/目录下就能找到power_profile.xml。我们看下它里面内容大致是什么：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"none\"</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen.on\"</span>&gt;</span>170<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen.full\"</span>&gt;</span>440<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bluetooth.active\"</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bluetooth.on\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.on\"</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.active\"</span>&gt;</span>50<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"wifi.scan\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dsp.audio\"</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dsp.video\"</span>&gt;</span>180<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gps.on\"</span>&gt;</span>70<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radio.active\"</span>&gt;</span>350<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"radio.scanning\"</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>其实这里面记录的正是各个Android部件的单位时间耗电量（类似于买东西时的价格表）。</p>\n</li>\n</ul>\n<h6 id=\"BatteryStatsHelper-中processAppusage方法\"><a href=\"#BatteryStatsHelper-中processAppusage方法\" class=\"headerlink\" title=\"BatteryStatsHelper 中processAppusage方法\"></a>BatteryStatsHelper 中processAppusage方法</h6><ul>\n<li>BatteryStatsHelper 主要作用是用来计算耗电量的，通过refreshStats方法来开始计算。</li>\n<li>其中processAPPUsage是用来计算App耗电的（比如：wakelock、cpu），processMiscUsage是用来计算硬件耗电的（比如：wifi、屏幕）。</li>\n<li>我们测App的耗电量，其实关注processAPPUsage就够了，这里就不贴代码了，可以自行去查看源码，逻辑还是挺简单的，只不过需要熟悉计算的方法，网上有很多介绍这段源码的，也可以Google了解。</li>\n</ul>\n<h6 id=\"尝试的过程\"><a href=\"#尝试的过程\" class=\"headerlink\" title=\"尝试的过程\"></a>尝试的过程</h6><ul>\n<li>第一次尝试 想通过反射去实现processAPPUsage的逻辑，从而能分别拿到每个部件的耗电是多少。但是尝试了一段时间，发现对于实现方法内部的逻辑，反射过于麻烦了，要反射的方法及对象太多。</li>\n<li>第二次尝试用android-hidden-api去实现，这个方法其实就是替代反射，对于hiden的类、方法以及internal包下的类，Android在编译成sdk时，是过滤掉的，所以我们没办法直接使用他们，而android-hidden-api的思路是用设备中的android.jar替换本地sdk中的android.jar，然后就可以访问隐藏及internal包下的类。</li>\n<li>尝试了很长时间后，发现我没办法拿到BatteryStatsImpl的对象，前面提到过，它是在BatteryStatsService中被初始化的，我们是没办法直接操作BatterStatsService的。因此这里得出个结论 <strong>以后做任何尝试之前，需要搞清楚代码的原理，否则会多走很多弯路，必然会花费很多时间</strong></li>\n<li>第三次尝试是从Android setting源码入手，参考它初始化BatteryStatsHelper及获取BatteryStatsImpl的方式。然后感觉快要出结果时，又碰到了一个crash，提示我没有BatteryStats的权限。上面也有提到过从android 4.4开始，强制增加了权限校验，非得是System才能有权限（App放到/system/app/中）。</li>\n<li><p>第四次尝试是准备用hook的方式绕开权限控制，因为我发现他们都调用了一个统一的方法，且可以hook BatteryStatsService这个系统服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enforceCallingPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Binder.getCallingPid() == Process.myPid()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mContext.enforcePermission(android.Manifest.permission.UPDATE_DEVICE_STATS,</div><div class=\"line\">                Binder.getCallingPid(), Binder.getCallingUid(), <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>想Hook掉这方法，让他啥也不干。这样就能绕过权限限制，完成之后运行发现还是报权限问题，于是查看源码，发现真是悲剧，发现有的方法调用的是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mContext.enforceCallingPermission(</div><div class=\"line\">                android.Manifest.permission.BATTERY_STATS, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样hook这个方法就达不到目的了，只能另想办法。</p>\n<ul>\n<li>第五个方案没有尝试，因为感觉前面投入时间太多了，其实我想绕过Android api，用它的思路自己计算或许可行，具体操作是：先读取power_profie.xml的信息，然后通过dumpsys 各个服务，得出各个部件运行的时间，然后计算部件的耗电量。</li>\n</ul>\n<h4 id=\"adb-shell-dumpsys-batterystats\"><a href=\"#adb-shell-dumpsys-batterystats\" class=\"headerlink\" title=\"adb shell dumpsys batterystats\"></a>adb shell dumpsys batterystats</h4><ul>\n<li>从Android5.0开始batterystats工具也能采集很详细的数据，所以最后我采用这种方式来获取App的耗电量，它能够采集：一段时间内，App使用了多久Cpu、WakeLock耗用多长时间及哪些进程操作了wakelock多长时间等。</li>\n</ul>\n<h6 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h6><ul>\n<li><p>连上手机，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb shell dumpsys batterystats --enable full-wake-history</div><div class=\"line\">$ adb shell dumpsys batterystats --reset 清空电量数据</div></pre></td></tr></table></figure>\n</li>\n<li><p>拔掉手机，测试自己的场景。</p>\n</li>\n<li><p>连上手机，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb shell batterystats package_name &gt; bugreport.txt</div><div class=\"line\">  用于采集数据</div></pre></td></tr></table></figure>\n</li>\n<li><p>我这里写了个Python脚本，主要是用来分析收集采集的数据，写入excel,可以在<a href=\"http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/apptestcase/battery_auto_inspect.py\">公司内网</a>访问代码。</p>\n</li>\n<li>也可以用github上面的<a href=\"https://github.com/liwei721/battery-historian\">battery-historian</a>将结果图形化。不过生成的html，js文件需要翻墙才能访问。</li>\n</ul>\n<h6 id=\"采集到的数据名词\"><a href=\"#采集到的数据名词\" class=\"headerlink\" title=\"采集到的数据名词\"></a>采集到的数据名词</h6><ul>\n<li>Estimated power use (mAh) ：它下面列出的是各个uid的耗电量，也就是app中各个应用和硬件的耗电。</li>\n<li>Computed drain ：是根据power_proile.xml计算出来的值。</li>\n<li><p>actual drain ：根据电池实际的电量消耗计算最小值到最大值的范围。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pw.print(prefix); pw.print(<span class=\"string\">\"    Capacity: \"</span>);</div><div class=\"line\">                    printmAh(pw, helper.getPowerProfile().getBatteryCapacity());</div><div class=\"line\">                    pw.print(<span class=\"string\">\", Computed drain: \"</span>); printmAh(pw, helper.getComputedPower());</div><div class=\"line\">                    pw.print(<span class=\"string\">\", actual drain: \"</span>); printmAh(pw, helper.getMinDrainedPower());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (helper.getMinDrainedPower() != helper.getMaxDrainedPower()) &#123;</div><div class=\"line\">                        pw.print(<span class=\"string\">\"-\"</span>); printmAh(pw, helper.getMaxDrainedPower());</div><div class=\"line\">                    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Statistics since last charge: 从上次充电之后的数据情况。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>拿了之前安全芯片的功耗仪测试数据，用软件的方式测，拿到的结果和功耗仪的数据还是有差别的，Android自己也承认了，用power_profile.xml计算出来的电量是模拟值。不过在结果中的actual drain值是个范围，感觉和功耗仪的结果比较接近。</li>\n<li>能不能替代功耗仪测试电量，还得继续多个版本来看，从目前的测试情况来看，我感觉是可以替代看看的。因为软件方式可以看到这段时间内的耗电进程及拿到粗略的电量值。</li>\n</ul>\n"},{"title":"Android对cpu的测试","date":"2016-10-31T06:49:52.000Z","_content":"## 背景知识\n###### 先了解几个和Linux时间有关的名词：HZ、tick\n- HZ:Linux内核每隔固定周期会发出时间中断（timer interrupt），HZ是用来定义每一秒有几次timer interrupts，比如：HZ为1000，就代表每秒有1000次timer interrupts。\n- Tick：Tick是HZ的倒数，Tick = 1/HZ。即timer interrupt每发生一次中断的时间，比如：HZ为250，tick=4ms\n- Android基于Linux，而Linux是一个典型的分时系统，CPU时间被分成多个时间片，这是多任务实现的基础，Linux内核依赖tick，即时钟中断来进行分时。\n\n\n###### jiffies\n- 有了以上预热知识，我们就能解释jiffies是什么了。jiffies是用来记录从开机开始，已经经过了多少个tick，每一次发生timer interrupt，jiffies就会增加1。\n- 我们可以计算出来，其实内核每秒钟将jiffies变量增加HZ次。\n\n###### /proc/stat\n- 文件中存放的就是所有cpu的jiffies信息，如下图所示：\n![battery_stat.png](/upload/image/zlw/battery_stat.png)\n- 从上图可以看出我的手机是8核的，第一行代表总的cpu jiffies情况，后面cpu0到cpu1代表的是各个cpu的jiffies情况。\n- user：从系统启动开始累计到当前时刻，用户态的jiffies，不包含nice值为负的进程。\n- nice：从系统启动开始累计到当前时刻，nice值为负的进程所占用的jiffies。（nice值是Linux中用来设置线程进程优先级的，取值范围是-20到19，nice值越小，进程优先级越高，获得cpu调用的机会越多，在Android中一般用不到nice值，不过我们可以控制线程的优先级）\n- system：从系统启动开始累计到当前时刻，系统态的jiffies。\n- idle：从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待的jiffies。\n- iowait ： 从系统启动开始累计到当前时刻，硬盘IO等待的jiffies。\n- irq ： 从系统启动开始累计到当前时刻，硬中断的jiffies\n- softirq ：从系统启动开始累计到当前时刻，软中断的jiffies。\n- 上面这几项相加=一段时间内总的cpu时间片。\n###### /proc/uid/stat\n- 这个文件中存放的是uid进程的cpu 运行情况。如下图所示：\n![uidstat.PNG](/upload/image/zlw/uidstat.PNG)\n- 这里值比较多，我就不一一介绍了，都是关于进程的信息，有兴趣的同学可以参考：[/proc/[pid]/stat文件分析](http://blog.sina.com.cn/s/blog_aed19c1f0102wcuo.html)。\n我们重点关注第14、15、16、17列的信息：\n- 第14行是utime= 26，表示该任务在用户态运行的时间，单位为jiffies\n- 第15行是stime = 15，表示该任务在核心态运行的时间，单位为jiffies\n- 第16行是cutime = 0 ，累计的该任务的所有的waited-for进程（已死进程）曾经在用户态运行的时间，单位为jiffies\n- 第17行是cstime = 0，累计的该任务的所有的waited-for进程（已死进程）曾经在核心态运行的时间，单位为jiffies\n- 所以该进程占用cpu的总时间就是上面四个值相加：utime+stime+cutime+cstime。\n\n## 计算CPU占有率\n###### 计算Android整机的CPU占有率\n- 读取/proc/stat文件的数据可以拿到总的cpu时间片。\n- 数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。\n- 假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1\n- 假设前后取了两次空闲时间idle时间片（上面有提到，/proc/stat 第四列），分别为i1, i2。则这个时间段内idle的时间片 idle= i2 - i1。\n- 总的cpu占用率 = 100*(total - idle） / total\n\n###### 计算单个进程的cpu占用率\n- 读取/proc/uid/stat 可以得到某一进程占用的cpu时间片。\n- 数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。\n- 假设前后取了两次进程占用cpu时间片的值，分别为：proc1， proc2 。 则这个时间段内进程占用的时间片为proc = proc2 - proc1\n- 假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1\n- 单个进程的cpu占有率  = 100*(total - proc) / total\n\n###### top 和 dumpsys cpuinfo区别\n- 网上有很多的帖子来介绍如何计算cpu使用率，其中介绍了必然会提到两种方式：top命令和dumpsys cpuinfo。我一直比较好奇他们之间有什么区别，并且他们的结果有些不同。\n- 主要是因为他们的计算方法是不同的，top命令方式和dumpsys cpuinfo两者计算分子是相同的，不同的是分母：top命令的分母是上面提到的时间片jiffies，而dumpsys cpuinfo的分母是通过SystemClock.uptimeMillis()计算时间差。\n- 不过通过top命令得到的cpu占有率是整数的。所以之前经常看到0%的，以为真的是0。其实有可能是0.x%。\n- 网上有个哥们讲了这个问题，可以参考[top和dumpsys cpuinfo](http://blog.csdn.net/oujunli/article/details/51463707)，也可以自己查看下源码验证下这哥们讲的是否是正确的。\n\n###### AndroidStudio cpu monitor测App cpu占用率不为0\n- 在之前的公司，要求App静默时的cpu占有率达到0，但是用AndroidStudio 测试总是不为0，会维持在0.22%到0.44%。\n- 做了个实验，用Python脚本采用上面的方法计算app的cpu占有率。得到的结果和AndroidStudio monitor的结果对比比较接近，都是0.22%-0.44%。\n- 第一次尝试：怀疑是不是和采集数据时间短，所以我每隔2s采集一次数据，发现和原来的结果一样，所以这种情况排除。\n- 第二次尝试：我发现用AndroidStudio monitor trace的结果中，只有jdwp一个线程在工作，于是我猜测是不是AndroidStudio在不断通过jdwp在干着什么工作。所以我关掉了AndroidStudio，然后再运行Python脚本，果然cpu占有率变成0。然后我又再次打开AndroidStudio，不选择调试【安全邮件】进程，用Python脚本采集cpu占有率数据，果然cpu占有率还是0。然后选择调试【安全邮件】进程，再用Python脚本采集数据，cpu占有率变成了0.22%-0.44%。\n- 通过上面的实验也就验证了AndroidStudio cpu monitor 测试App cpu占有率不为0的原因：JDWP线程，它是在每个进程启动的时候都会开启的一个用于和DDMS进行通信的线程。\n- ** 结论是建议用脚本[测试cpu占有率](http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/commonoperation/cpu_inspect_thread.py)，或者用AndroidStudio测试时当cpu占有率大于0.44%时可能是有问题的。**\n\n## 分析CPU相关问题\n###### 测试场景\n- 静默状态：静默状态cpu占有率应该为0。\n- 操作之后停止操作：这种情况下，cpu占有率会在一定时间后变为0。\n- 操作过程中：cpu占有率不应该非常高，超过50%（没有数据支撑，只是拍脑袋感觉）。\n- 之前用AndroidStudio monitor测试，cpu静默时不能为0，维持在0.22%-0.44%，通过抓取MethodTracing，发现只有一个JDWP线程。\n\n###### 分析问题\n- 分析问题的手段有很多：TraceView、DDMS的Threads（查看哪些线程还活着）、AndroidStudio monitor抓trace。\n- 我们结合着AndroidStudio monitor的trace来分析下，因为容易操作且采集的数据比较丰富。\n- 因为我手边没有cpu问题的例子，所以我用一个操作过程中cpu变化的场景来分析下：打开【安全邮件】，然后在AndroidStudio cpu monitor点击【start Method Tracing】如下图所示：![method_tracing.PNG](/upload/image/zlw/method_tracing.PNG)\n- 然后多次滑动邮件列表，持续大概10几秒，可以观察到cpu占有率在6%左右。\n- 再次点击【start tracing method】（这个时候是stop tracing method），AndroidStudio会自动打开一份trace文件，我们主要分析这份trace文件，它包括了每个方法的耗时，对我们分析问题非常有帮助。\n- 我们先来看下它长什么样子，如下图所示：![cpu_method_trace.PNG](/upload/image/zlw/cpu_method_trace.PNG)\n- Thread 表示当前进程里面还有什么线程在工作，一般我们关心的是main（主线程）、xx_thread_pool、自己命名的线程等，对于Binder、JDWP这些是系统干活的线程，一般我们不需要关心。\n- x-axis 表示的是下面这个柱状图横坐标以什么为基准排序，有两个选项：thread time是线程执行时间不包括线程 sleep时间；Wall Clock Time 是系统运行时间，包括线程sleep等时间。\n- 搜索按钮  可以用来搜索我们感兴趣的内容，比如我们应用的包名。搜索结果在柱状图中会有体现。\n- Invocation Count 表示方法执行了多少次。\n- Inclusive Time 表示方法执行了多长时间（单位是微秒），包括执行其他方法的时间。\n- Exclusive Time 表示方法本身执行了多长时间，不包括执行其他方法的时间。\n\n- 回到上面的例子，我们在搜索框中搜索：xdja 如下图所示：![tracing_method.PNG](/upload/image/zlw/tracing_method.PNG)\n- 可以看到有相关的方法在工作，如果是静默状态，理论上是不应该有任何方法在执行的（排除心跳包的场景），所以这个可能就是存在问题的。\n- 如果通过上面的方法不能确定问题，我们可以进一步的通过TraceView来分析方法的调用栈，从而排查问题。\n\n## 总结\n- 测App 的CPU占有率，用脚本测要关掉AndroidStudio对App的调试，排除其对采集数据的影响。如果用AndroidStudio cpu monitor测，静默时CPU占有率稳定在0.22%-0.44%，并不为0。\n- 首先用AndroidStudio cpu monitor的【start Method Tracing】来采集方法执行时间分析问题。分析思路是查找和自己应用相关的操作。\n- 更进一步的分析问题可以使用TraceView抓取方法调用栈。\n","source":"_posts/Android对cpu测试.md","raw":"---\ntitle: Android对cpu的测试\ndate: 2016-10-31 14:49:52\ntags: Android,cpu\ncategories: Android性能测试\n---\n## 背景知识\n###### 先了解几个和Linux时间有关的名词：HZ、tick\n- HZ:Linux内核每隔固定周期会发出时间中断（timer interrupt），HZ是用来定义每一秒有几次timer interrupts，比如：HZ为1000，就代表每秒有1000次timer interrupts。\n- Tick：Tick是HZ的倒数，Tick = 1/HZ。即timer interrupt每发生一次中断的时间，比如：HZ为250，tick=4ms\n- Android基于Linux，而Linux是一个典型的分时系统，CPU时间被分成多个时间片，这是多任务实现的基础，Linux内核依赖tick，即时钟中断来进行分时。\n\n\n###### jiffies\n- 有了以上预热知识，我们就能解释jiffies是什么了。jiffies是用来记录从开机开始，已经经过了多少个tick，每一次发生timer interrupt，jiffies就会增加1。\n- 我们可以计算出来，其实内核每秒钟将jiffies变量增加HZ次。\n\n###### /proc/stat\n- 文件中存放的就是所有cpu的jiffies信息，如下图所示：\n![battery_stat.png](/upload/image/zlw/battery_stat.png)\n- 从上图可以看出我的手机是8核的，第一行代表总的cpu jiffies情况，后面cpu0到cpu1代表的是各个cpu的jiffies情况。\n- user：从系统启动开始累计到当前时刻，用户态的jiffies，不包含nice值为负的进程。\n- nice：从系统启动开始累计到当前时刻，nice值为负的进程所占用的jiffies。（nice值是Linux中用来设置线程进程优先级的，取值范围是-20到19，nice值越小，进程优先级越高，获得cpu调用的机会越多，在Android中一般用不到nice值，不过我们可以控制线程的优先级）\n- system：从系统启动开始累计到当前时刻，系统态的jiffies。\n- idle：从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待的jiffies。\n- iowait ： 从系统启动开始累计到当前时刻，硬盘IO等待的jiffies。\n- irq ： 从系统启动开始累计到当前时刻，硬中断的jiffies\n- softirq ：从系统启动开始累计到当前时刻，软中断的jiffies。\n- 上面这几项相加=一段时间内总的cpu时间片。\n###### /proc/uid/stat\n- 这个文件中存放的是uid进程的cpu 运行情况。如下图所示：\n![uidstat.PNG](/upload/image/zlw/uidstat.PNG)\n- 这里值比较多，我就不一一介绍了，都是关于进程的信息，有兴趣的同学可以参考：[/proc/[pid]/stat文件分析](http://blog.sina.com.cn/s/blog_aed19c1f0102wcuo.html)。\n我们重点关注第14、15、16、17列的信息：\n- 第14行是utime= 26，表示该任务在用户态运行的时间，单位为jiffies\n- 第15行是stime = 15，表示该任务在核心态运行的时间，单位为jiffies\n- 第16行是cutime = 0 ，累计的该任务的所有的waited-for进程（已死进程）曾经在用户态运行的时间，单位为jiffies\n- 第17行是cstime = 0，累计的该任务的所有的waited-for进程（已死进程）曾经在核心态运行的时间，单位为jiffies\n- 所以该进程占用cpu的总时间就是上面四个值相加：utime+stime+cutime+cstime。\n\n## 计算CPU占有率\n###### 计算Android整机的CPU占有率\n- 读取/proc/stat文件的数据可以拿到总的cpu时间片。\n- 数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。\n- 假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1\n- 假设前后取了两次空闲时间idle时间片（上面有提到，/proc/stat 第四列），分别为i1, i2。则这个时间段内idle的时间片 idle= i2 - i1。\n- 总的cpu占用率 = 100*(total - idle） / total\n\n###### 计算单个进程的cpu占用率\n- 读取/proc/uid/stat 可以得到某一进程占用的cpu时间片。\n- 数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。\n- 假设前后取了两次进程占用cpu时间片的值，分别为：proc1， proc2 。 则这个时间段内进程占用的时间片为proc = proc2 - proc1\n- 假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1\n- 单个进程的cpu占有率  = 100*(total - proc) / total\n\n###### top 和 dumpsys cpuinfo区别\n- 网上有很多的帖子来介绍如何计算cpu使用率，其中介绍了必然会提到两种方式：top命令和dumpsys cpuinfo。我一直比较好奇他们之间有什么区别，并且他们的结果有些不同。\n- 主要是因为他们的计算方法是不同的，top命令方式和dumpsys cpuinfo两者计算分子是相同的，不同的是分母：top命令的分母是上面提到的时间片jiffies，而dumpsys cpuinfo的分母是通过SystemClock.uptimeMillis()计算时间差。\n- 不过通过top命令得到的cpu占有率是整数的。所以之前经常看到0%的，以为真的是0。其实有可能是0.x%。\n- 网上有个哥们讲了这个问题，可以参考[top和dumpsys cpuinfo](http://blog.csdn.net/oujunli/article/details/51463707)，也可以自己查看下源码验证下这哥们讲的是否是正确的。\n\n###### AndroidStudio cpu monitor测App cpu占用率不为0\n- 在之前的公司，要求App静默时的cpu占有率达到0，但是用AndroidStudio 测试总是不为0，会维持在0.22%到0.44%。\n- 做了个实验，用Python脚本采用上面的方法计算app的cpu占有率。得到的结果和AndroidStudio monitor的结果对比比较接近，都是0.22%-0.44%。\n- 第一次尝试：怀疑是不是和采集数据时间短，所以我每隔2s采集一次数据，发现和原来的结果一样，所以这种情况排除。\n- 第二次尝试：我发现用AndroidStudio monitor trace的结果中，只有jdwp一个线程在工作，于是我猜测是不是AndroidStudio在不断通过jdwp在干着什么工作。所以我关掉了AndroidStudio，然后再运行Python脚本，果然cpu占有率变成0。然后我又再次打开AndroidStudio，不选择调试【安全邮件】进程，用Python脚本采集cpu占有率数据，果然cpu占有率还是0。然后选择调试【安全邮件】进程，再用Python脚本采集数据，cpu占有率变成了0.22%-0.44%。\n- 通过上面的实验也就验证了AndroidStudio cpu monitor 测试App cpu占有率不为0的原因：JDWP线程，它是在每个进程启动的时候都会开启的一个用于和DDMS进行通信的线程。\n- ** 结论是建议用脚本[测试cpu占有率](http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/commonoperation/cpu_inspect_thread.py)，或者用AndroidStudio测试时当cpu占有率大于0.44%时可能是有问题的。**\n\n## 分析CPU相关问题\n###### 测试场景\n- 静默状态：静默状态cpu占有率应该为0。\n- 操作之后停止操作：这种情况下，cpu占有率会在一定时间后变为0。\n- 操作过程中：cpu占有率不应该非常高，超过50%（没有数据支撑，只是拍脑袋感觉）。\n- 之前用AndroidStudio monitor测试，cpu静默时不能为0，维持在0.22%-0.44%，通过抓取MethodTracing，发现只有一个JDWP线程。\n\n###### 分析问题\n- 分析问题的手段有很多：TraceView、DDMS的Threads（查看哪些线程还活着）、AndroidStudio monitor抓trace。\n- 我们结合着AndroidStudio monitor的trace来分析下，因为容易操作且采集的数据比较丰富。\n- 因为我手边没有cpu问题的例子，所以我用一个操作过程中cpu变化的场景来分析下：打开【安全邮件】，然后在AndroidStudio cpu monitor点击【start Method Tracing】如下图所示：![method_tracing.PNG](/upload/image/zlw/method_tracing.PNG)\n- 然后多次滑动邮件列表，持续大概10几秒，可以观察到cpu占有率在6%左右。\n- 再次点击【start tracing method】（这个时候是stop tracing method），AndroidStudio会自动打开一份trace文件，我们主要分析这份trace文件，它包括了每个方法的耗时，对我们分析问题非常有帮助。\n- 我们先来看下它长什么样子，如下图所示：![cpu_method_trace.PNG](/upload/image/zlw/cpu_method_trace.PNG)\n- Thread 表示当前进程里面还有什么线程在工作，一般我们关心的是main（主线程）、xx_thread_pool、自己命名的线程等，对于Binder、JDWP这些是系统干活的线程，一般我们不需要关心。\n- x-axis 表示的是下面这个柱状图横坐标以什么为基准排序，有两个选项：thread time是线程执行时间不包括线程 sleep时间；Wall Clock Time 是系统运行时间，包括线程sleep等时间。\n- 搜索按钮  可以用来搜索我们感兴趣的内容，比如我们应用的包名。搜索结果在柱状图中会有体现。\n- Invocation Count 表示方法执行了多少次。\n- Inclusive Time 表示方法执行了多长时间（单位是微秒），包括执行其他方法的时间。\n- Exclusive Time 表示方法本身执行了多长时间，不包括执行其他方法的时间。\n\n- 回到上面的例子，我们在搜索框中搜索：xdja 如下图所示：![tracing_method.PNG](/upload/image/zlw/tracing_method.PNG)\n- 可以看到有相关的方法在工作，如果是静默状态，理论上是不应该有任何方法在执行的（排除心跳包的场景），所以这个可能就是存在问题的。\n- 如果通过上面的方法不能确定问题，我们可以进一步的通过TraceView来分析方法的调用栈，从而排查问题。\n\n## 总结\n- 测App 的CPU占有率，用脚本测要关掉AndroidStudio对App的调试，排除其对采集数据的影响。如果用AndroidStudio cpu monitor测，静默时CPU占有率稳定在0.22%-0.44%，并不为0。\n- 首先用AndroidStudio cpu monitor的【start Method Tracing】来采集方法执行时间分析问题。分析思路是查找和自己应用相关的操作。\n- 更进一步的分析问题可以使用TraceView抓取方法调用栈。\n","slug":"Android对cpu测试","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsnfx00060cwl7iw2ev3h","content":"<h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><h6 id=\"先了解几个和Linux时间有关的名词：HZ、tick\"><a href=\"#先了解几个和Linux时间有关的名词：HZ、tick\" class=\"headerlink\" title=\"先了解几个和Linux时间有关的名词：HZ、tick\"></a>先了解几个和Linux时间有关的名词：HZ、tick</h6><ul>\n<li>HZ:Linux内核每隔固定周期会发出时间中断（timer interrupt），HZ是用来定义每一秒有几次timer interrupts，比如：HZ为1000，就代表每秒有1000次timer interrupts。</li>\n<li>Tick：Tick是HZ的倒数，Tick = 1/HZ。即timer interrupt每发生一次中断的时间，比如：HZ为250，tick=4ms</li>\n<li>Android基于Linux，而Linux是一个典型的分时系统，CPU时间被分成多个时间片，这是多任务实现的基础，Linux内核依赖tick，即时钟中断来进行分时。</li>\n</ul>\n<h6 id=\"jiffies\"><a href=\"#jiffies\" class=\"headerlink\" title=\"jiffies\"></a>jiffies</h6><ul>\n<li>有了以上预热知识，我们就能解释jiffies是什么了。jiffies是用来记录从开机开始，已经经过了多少个tick，每一次发生timer interrupt，jiffies就会增加1。</li>\n<li>我们可以计算出来，其实内核每秒钟将jiffies变量增加HZ次。</li>\n</ul>\n<h6 id=\"proc-stat\"><a href=\"#proc-stat\" class=\"headerlink\" title=\"/proc/stat\"></a>/proc/stat</h6><ul>\n<li>文件中存放的就是所有cpu的jiffies信息，如下图所示：<br><img src=\"/upload/image/zlw/battery_stat.png\" alt=\"battery_stat.png\"></li>\n<li>从上图可以看出我的手机是8核的，第一行代表总的cpu jiffies情况，后面cpu0到cpu1代表的是各个cpu的jiffies情况。</li>\n<li>user：从系统启动开始累计到当前时刻，用户态的jiffies，不包含nice值为负的进程。</li>\n<li>nice：从系统启动开始累计到当前时刻，nice值为负的进程所占用的jiffies。（nice值是Linux中用来设置线程进程优先级的，取值范围是-20到19，nice值越小，进程优先级越高，获得cpu调用的机会越多，在Android中一般用不到nice值，不过我们可以控制线程的优先级）</li>\n<li>system：从系统启动开始累计到当前时刻，系统态的jiffies。</li>\n<li>idle：从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待的jiffies。</li>\n<li>iowait ： 从系统启动开始累计到当前时刻，硬盘IO等待的jiffies。</li>\n<li>irq ： 从系统启动开始累计到当前时刻，硬中断的jiffies</li>\n<li>softirq ：从系统启动开始累计到当前时刻，软中断的jiffies。</li>\n<li>上面这几项相加=一段时间内总的cpu时间片。<h6 id=\"proc-uid-stat\"><a href=\"#proc-uid-stat\" class=\"headerlink\" title=\"/proc/uid/stat\"></a>/proc/uid/stat</h6></li>\n<li>这个文件中存放的是uid进程的cpu 运行情况。如下图所示：<br><img src=\"/upload/image/zlw/uidstat.PNG\" alt=\"uidstat.PNG\"></li>\n<li>这里值比较多，我就不一一介绍了，都是关于进程的信息，有兴趣的同学可以参考：<a href=\"http://blog.sina.com.cn/s/blog_aed19c1f0102wcuo.html\" target=\"_blank\" rel=\"external\">/proc/[pid]/stat文件分析</a>。<br>我们重点关注第14、15、16、17列的信息：</li>\n<li>第14行是utime= 26，表示该任务在用户态运行的时间，单位为jiffies</li>\n<li>第15行是stime = 15，表示该任务在核心态运行的时间，单位为jiffies</li>\n<li>第16行是cutime = 0 ，累计的该任务的所有的waited-for进程（已死进程）曾经在用户态运行的时间，单位为jiffies</li>\n<li>第17行是cstime = 0，累计的该任务的所有的waited-for进程（已死进程）曾经在核心态运行的时间，单位为jiffies</li>\n<li>所以该进程占用cpu的总时间就是上面四个值相加：utime+stime+cutime+cstime。</li>\n</ul>\n<h2 id=\"计算CPU占有率\"><a href=\"#计算CPU占有率\" class=\"headerlink\" title=\"计算CPU占有率\"></a>计算CPU占有率</h2><h6 id=\"计算Android整机的CPU占有率\"><a href=\"#计算Android整机的CPU占有率\" class=\"headerlink\" title=\"计算Android整机的CPU占有率\"></a>计算Android整机的CPU占有率</h6><ul>\n<li>读取/proc/stat文件的数据可以拿到总的cpu时间片。</li>\n<li>数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。</li>\n<li>假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1</li>\n<li>假设前后取了两次空闲时间idle时间片（上面有提到，/proc/stat 第四列），分别为i1, i2。则这个时间段内idle的时间片 idle= i2 - i1。</li>\n<li>总的cpu占用率 = 100*(total - idle） / total</li>\n</ul>\n<h6 id=\"计算单个进程的cpu占用率\"><a href=\"#计算单个进程的cpu占用率\" class=\"headerlink\" title=\"计算单个进程的cpu占用率\"></a>计算单个进程的cpu占用率</h6><ul>\n<li>读取/proc/uid/stat 可以得到某一进程占用的cpu时间片。</li>\n<li>数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。</li>\n<li>假设前后取了两次进程占用cpu时间片的值，分别为：proc1， proc2 。 则这个时间段内进程占用的时间片为proc = proc2 - proc1</li>\n<li>假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1</li>\n<li>单个进程的cpu占有率  = 100*(total - proc) / total</li>\n</ul>\n<h6 id=\"top-和-dumpsys-cpuinfo区别\"><a href=\"#top-和-dumpsys-cpuinfo区别\" class=\"headerlink\" title=\"top 和 dumpsys cpuinfo区别\"></a>top 和 dumpsys cpuinfo区别</h6><ul>\n<li>网上有很多的帖子来介绍如何计算cpu使用率，其中介绍了必然会提到两种方式：top命令和dumpsys cpuinfo。我一直比较好奇他们之间有什么区别，并且他们的结果有些不同。</li>\n<li>主要是因为他们的计算方法是不同的，top命令方式和dumpsys cpuinfo两者计算分子是相同的，不同的是分母：top命令的分母是上面提到的时间片jiffies，而dumpsys cpuinfo的分母是通过SystemClock.uptimeMillis()计算时间差。</li>\n<li>不过通过top命令得到的cpu占有率是整数的。所以之前经常看到0%的，以为真的是0。其实有可能是0.x%。</li>\n<li>网上有个哥们讲了这个问题，可以参考<a href=\"http://blog.csdn.net/oujunli/article/details/51463707\" target=\"_blank\" rel=\"external\">top和dumpsys cpuinfo</a>，也可以自己查看下源码验证下这哥们讲的是否是正确的。</li>\n</ul>\n<h6 id=\"AndroidStudio-cpu-monitor测App-cpu占用率不为0\"><a href=\"#AndroidStudio-cpu-monitor测App-cpu占用率不为0\" class=\"headerlink\" title=\"AndroidStudio cpu monitor测App cpu占用率不为0\"></a>AndroidStudio cpu monitor测App cpu占用率不为0</h6><ul>\n<li>在之前的公司，要求App静默时的cpu占有率达到0，但是用AndroidStudio 测试总是不为0，会维持在0.22%到0.44%。</li>\n<li>做了个实验，用Python脚本采用上面的方法计算app的cpu占有率。得到的结果和AndroidStudio monitor的结果对比比较接近，都是0.22%-0.44%。</li>\n<li>第一次尝试：怀疑是不是和采集数据时间短，所以我每隔2s采集一次数据，发现和原来的结果一样，所以这种情况排除。</li>\n<li>第二次尝试：我发现用AndroidStudio monitor trace的结果中，只有jdwp一个线程在工作，于是我猜测是不是AndroidStudio在不断通过jdwp在干着什么工作。所以我关掉了AndroidStudio，然后再运行Python脚本，果然cpu占有率变成0。然后我又再次打开AndroidStudio，不选择调试【安全邮件】进程，用Python脚本采集cpu占有率数据，果然cpu占有率还是0。然后选择调试【安全邮件】进程，再用Python脚本采集数据，cpu占有率变成了0.22%-0.44%。</li>\n<li>通过上面的实验也就验证了AndroidStudio cpu monitor 测试App cpu占有率不为0的原因：JDWP线程，它是在每个进程启动的时候都会开启的一个用于和DDMS进行通信的线程。</li>\n<li><strong> 结论是建议用脚本<a href=\"http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/commonoperation/cpu_inspect_thread.py\" target=\"_blank\" rel=\"external\">测试cpu占有率</a>，或者用AndroidStudio测试时当cpu占有率大于0.44%时可能是有问题的。</strong></li>\n</ul>\n<h2 id=\"分析CPU相关问题\"><a href=\"#分析CPU相关问题\" class=\"headerlink\" title=\"分析CPU相关问题\"></a>分析CPU相关问题</h2><h6 id=\"测试场景\"><a href=\"#测试场景\" class=\"headerlink\" title=\"测试场景\"></a>测试场景</h6><ul>\n<li>静默状态：静默状态cpu占有率应该为0。</li>\n<li>操作之后停止操作：这种情况下，cpu占有率会在一定时间后变为0。</li>\n<li>操作过程中：cpu占有率不应该非常高，超过50%（没有数据支撑，只是拍脑袋感觉）。</li>\n<li>之前用AndroidStudio monitor测试，cpu静默时不能为0，维持在0.22%-0.44%，通过抓取MethodTracing，发现只有一个JDWP线程。</li>\n</ul>\n<h6 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h6><ul>\n<li>分析问题的手段有很多：TraceView、DDMS的Threads（查看哪些线程还活着）、AndroidStudio monitor抓trace。</li>\n<li>我们结合着AndroidStudio monitor的trace来分析下，因为容易操作且采集的数据比较丰富。</li>\n<li>因为我手边没有cpu问题的例子，所以我用一个操作过程中cpu变化的场景来分析下：打开【安全邮件】，然后在AndroidStudio cpu monitor点击【start Method Tracing】如下图所示：<img src=\"/upload/image/zlw/method_tracing.PNG\" alt=\"method_tracing.PNG\"></li>\n<li>然后多次滑动邮件列表，持续大概10几秒，可以观察到cpu占有率在6%左右。</li>\n<li>再次点击【start tracing method】（这个时候是stop tracing method），AndroidStudio会自动打开一份trace文件，我们主要分析这份trace文件，它包括了每个方法的耗时，对我们分析问题非常有帮助。</li>\n<li>我们先来看下它长什么样子，如下图所示：<img src=\"/upload/image/zlw/cpu_method_trace.PNG\" alt=\"cpu_method_trace.PNG\"></li>\n<li>Thread 表示当前进程里面还有什么线程在工作，一般我们关心的是main（主线程）、xx_thread_pool、自己命名的线程等，对于Binder、JDWP这些是系统干活的线程，一般我们不需要关心。</li>\n<li>x-axis 表示的是下面这个柱状图横坐标以什么为基准排序，有两个选项：thread time是线程执行时间不包括线程 sleep时间；Wall Clock Time 是系统运行时间，包括线程sleep等时间。</li>\n<li>搜索按钮  可以用来搜索我们感兴趣的内容，比如我们应用的包名。搜索结果在柱状图中会有体现。</li>\n<li>Invocation Count 表示方法执行了多少次。</li>\n<li>Inclusive Time 表示方法执行了多长时间（单位是微秒），包括执行其他方法的时间。</li>\n<li><p>Exclusive Time 表示方法本身执行了多长时间，不包括执行其他方法的时间。</p>\n</li>\n<li><p>回到上面的例子，我们在搜索框中搜索：xdja 如下图所示：<img src=\"/upload/image/zlw/tracing_method.PNG\" alt=\"tracing_method.PNG\"></p>\n</li>\n<li>可以看到有相关的方法在工作，如果是静默状态，理论上是不应该有任何方法在执行的（排除心跳包的场景），所以这个可能就是存在问题的。</li>\n<li>如果通过上面的方法不能确定问题，我们可以进一步的通过TraceView来分析方法的调用栈，从而排查问题。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>测App 的CPU占有率，用脚本测要关掉AndroidStudio对App的调试，排除其对采集数据的影响。如果用AndroidStudio cpu monitor测，静默时CPU占有率稳定在0.22%-0.44%，并不为0。</li>\n<li>首先用AndroidStudio cpu monitor的【start Method Tracing】来采集方法执行时间分析问题。分析思路是查找和自己应用相关的操作。</li>\n<li>更进一步的分析问题可以使用TraceView抓取方法调用栈。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><h6 id=\"先了解几个和Linux时间有关的名词：HZ、tick\"><a href=\"#先了解几个和Linux时间有关的名词：HZ、tick\" class=\"headerlink\" title=\"先了解几个和Linux时间有关的名词：HZ、tick\"></a>先了解几个和Linux时间有关的名词：HZ、tick</h6><ul>\n<li>HZ:Linux内核每隔固定周期会发出时间中断（timer interrupt），HZ是用来定义每一秒有几次timer interrupts，比如：HZ为1000，就代表每秒有1000次timer interrupts。</li>\n<li>Tick：Tick是HZ的倒数，Tick = 1/HZ。即timer interrupt每发生一次中断的时间，比如：HZ为250，tick=4ms</li>\n<li>Android基于Linux，而Linux是一个典型的分时系统，CPU时间被分成多个时间片，这是多任务实现的基础，Linux内核依赖tick，即时钟中断来进行分时。</li>\n</ul>\n<h6 id=\"jiffies\"><a href=\"#jiffies\" class=\"headerlink\" title=\"jiffies\"></a>jiffies</h6><ul>\n<li>有了以上预热知识，我们就能解释jiffies是什么了。jiffies是用来记录从开机开始，已经经过了多少个tick，每一次发生timer interrupt，jiffies就会增加1。</li>\n<li>我们可以计算出来，其实内核每秒钟将jiffies变量增加HZ次。</li>\n</ul>\n<h6 id=\"proc-stat\"><a href=\"#proc-stat\" class=\"headerlink\" title=\"/proc/stat\"></a>/proc/stat</h6><ul>\n<li>文件中存放的就是所有cpu的jiffies信息，如下图所示：<br><img src=\"/upload/image/zlw/battery_stat.png\" alt=\"battery_stat.png\"></li>\n<li>从上图可以看出我的手机是8核的，第一行代表总的cpu jiffies情况，后面cpu0到cpu1代表的是各个cpu的jiffies情况。</li>\n<li>user：从系统启动开始累计到当前时刻，用户态的jiffies，不包含nice值为负的进程。</li>\n<li>nice：从系统启动开始累计到当前时刻，nice值为负的进程所占用的jiffies。（nice值是Linux中用来设置线程进程优先级的，取值范围是-20到19，nice值越小，进程优先级越高，获得cpu调用的机会越多，在Android中一般用不到nice值，不过我们可以控制线程的优先级）</li>\n<li>system：从系统启动开始累计到当前时刻，系统态的jiffies。</li>\n<li>idle：从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待的jiffies。</li>\n<li>iowait ： 从系统启动开始累计到当前时刻，硬盘IO等待的jiffies。</li>\n<li>irq ： 从系统启动开始累计到当前时刻，硬中断的jiffies</li>\n<li>softirq ：从系统启动开始累计到当前时刻，软中断的jiffies。</li>\n<li>上面这几项相加=一段时间内总的cpu时间片。<h6 id=\"proc-uid-stat\"><a href=\"#proc-uid-stat\" class=\"headerlink\" title=\"/proc/uid/stat\"></a>/proc/uid/stat</h6></li>\n<li>这个文件中存放的是uid进程的cpu 运行情况。如下图所示：<br><img src=\"/upload/image/zlw/uidstat.PNG\" alt=\"uidstat.PNG\"></li>\n<li>这里值比较多，我就不一一介绍了，都是关于进程的信息，有兴趣的同学可以参考：<a href=\"http://blog.sina.com.cn/s/blog_aed19c1f0102wcuo.html\">/proc/[pid]/stat文件分析</a>。<br>我们重点关注第14、15、16、17列的信息：</li>\n<li>第14行是utime= 26，表示该任务在用户态运行的时间，单位为jiffies</li>\n<li>第15行是stime = 15，表示该任务在核心态运行的时间，单位为jiffies</li>\n<li>第16行是cutime = 0 ，累计的该任务的所有的waited-for进程（已死进程）曾经在用户态运行的时间，单位为jiffies</li>\n<li>第17行是cstime = 0，累计的该任务的所有的waited-for进程（已死进程）曾经在核心态运行的时间，单位为jiffies</li>\n<li>所以该进程占用cpu的总时间就是上面四个值相加：utime+stime+cutime+cstime。</li>\n</ul>\n<h2 id=\"计算CPU占有率\"><a href=\"#计算CPU占有率\" class=\"headerlink\" title=\"计算CPU占有率\"></a>计算CPU占有率</h2><h6 id=\"计算Android整机的CPU占有率\"><a href=\"#计算Android整机的CPU占有率\" class=\"headerlink\" title=\"计算Android整机的CPU占有率\"></a>计算Android整机的CPU占有率</h6><ul>\n<li>读取/proc/stat文件的数据可以拿到总的cpu时间片。</li>\n<li>数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。</li>\n<li>假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1</li>\n<li>假设前后取了两次空闲时间idle时间片（上面有提到，/proc/stat 第四列），分别为i1, i2。则这个时间段内idle的时间片 idle= i2 - i1。</li>\n<li>总的cpu占用率 = 100*(total - idle） / total</li>\n</ul>\n<h6 id=\"计算单个进程的cpu占用率\"><a href=\"#计算单个进程的cpu占用率\" class=\"headerlink\" title=\"计算单个进程的cpu占用率\"></a>计算单个进程的cpu占用率</h6><ul>\n<li>读取/proc/uid/stat 可以得到某一进程占用的cpu时间片。</li>\n<li>数据采集时间间隔要足够短（考虑到数据精确性），我一般采用1s或者小于1s的时间。</li>\n<li>假设前后取了两次进程占用cpu时间片的值，分别为：proc1， proc2 。 则这个时间段内进程占用的时间片为proc = proc2 - proc1</li>\n<li>假设前后取了两次总的cpu时间片分别为total1，total2。则这个时间段内总的cpu时间片 total= total2 - total1</li>\n<li>单个进程的cpu占有率  = 100*(total - proc) / total</li>\n</ul>\n<h6 id=\"top-和-dumpsys-cpuinfo区别\"><a href=\"#top-和-dumpsys-cpuinfo区别\" class=\"headerlink\" title=\"top 和 dumpsys cpuinfo区别\"></a>top 和 dumpsys cpuinfo区别</h6><ul>\n<li>网上有很多的帖子来介绍如何计算cpu使用率，其中介绍了必然会提到两种方式：top命令和dumpsys cpuinfo。我一直比较好奇他们之间有什么区别，并且他们的结果有些不同。</li>\n<li>主要是因为他们的计算方法是不同的，top命令方式和dumpsys cpuinfo两者计算分子是相同的，不同的是分母：top命令的分母是上面提到的时间片jiffies，而dumpsys cpuinfo的分母是通过SystemClock.uptimeMillis()计算时间差。</li>\n<li>不过通过top命令得到的cpu占有率是整数的。所以之前经常看到0%的，以为真的是0。其实有可能是0.x%。</li>\n<li>网上有个哥们讲了这个问题，可以参考<a href=\"http://blog.csdn.net/oujunli/article/details/51463707\">top和dumpsys cpuinfo</a>，也可以自己查看下源码验证下这哥们讲的是否是正确的。</li>\n</ul>\n<h6 id=\"AndroidStudio-cpu-monitor测App-cpu占用率不为0\"><a href=\"#AndroidStudio-cpu-monitor测App-cpu占用率不为0\" class=\"headerlink\" title=\"AndroidStudio cpu monitor测App cpu占用率不为0\"></a>AndroidStudio cpu monitor测App cpu占用率不为0</h6><ul>\n<li>在之前的公司，要求App静默时的cpu占有率达到0，但是用AndroidStudio 测试总是不为0，会维持在0.22%到0.44%。</li>\n<li>做了个实验，用Python脚本采用上面的方法计算app的cpu占有率。得到的结果和AndroidStudio monitor的结果对比比较接近，都是0.22%-0.44%。</li>\n<li>第一次尝试：怀疑是不是和采集数据时间短，所以我每隔2s采集一次数据，发现和原来的结果一样，所以这种情况排除。</li>\n<li>第二次尝试：我发现用AndroidStudio monitor trace的结果中，只有jdwp一个线程在工作，于是我猜测是不是AndroidStudio在不断通过jdwp在干着什么工作。所以我关掉了AndroidStudio，然后再运行Python脚本，果然cpu占有率变成0。然后我又再次打开AndroidStudio，不选择调试【安全邮件】进程，用Python脚本采集cpu占有率数据，果然cpu占有率还是0。然后选择调试【安全邮件】进程，再用Python脚本采集数据，cpu占有率变成了0.22%-0.44%。</li>\n<li>通过上面的实验也就验证了AndroidStudio cpu monitor 测试App cpu占有率不为0的原因：JDWP线程，它是在每个进程启动的时候都会开启的一个用于和DDMS进行通信的线程。</li>\n<li><strong> 结论是建议用脚本<a href=\"http://gitlab.idc.safecenter.cn/zhouliwei/AutoScriptForAndroid/blob/master/commonoperation/cpu_inspect_thread.py\">测试cpu占有率</a>，或者用AndroidStudio测试时当cpu占有率大于0.44%时可能是有问题的。</strong></li>\n</ul>\n<h2 id=\"分析CPU相关问题\"><a href=\"#分析CPU相关问题\" class=\"headerlink\" title=\"分析CPU相关问题\"></a>分析CPU相关问题</h2><h6 id=\"测试场景\"><a href=\"#测试场景\" class=\"headerlink\" title=\"测试场景\"></a>测试场景</h6><ul>\n<li>静默状态：静默状态cpu占有率应该为0。</li>\n<li>操作之后停止操作：这种情况下，cpu占有率会在一定时间后变为0。</li>\n<li>操作过程中：cpu占有率不应该非常高，超过50%（没有数据支撑，只是拍脑袋感觉）。</li>\n<li>之前用AndroidStudio monitor测试，cpu静默时不能为0，维持在0.22%-0.44%，通过抓取MethodTracing，发现只有一个JDWP线程。</li>\n</ul>\n<h6 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h6><ul>\n<li>分析问题的手段有很多：TraceView、DDMS的Threads（查看哪些线程还活着）、AndroidStudio monitor抓trace。</li>\n<li>我们结合着AndroidStudio monitor的trace来分析下，因为容易操作且采集的数据比较丰富。</li>\n<li>因为我手边没有cpu问题的例子，所以我用一个操作过程中cpu变化的场景来分析下：打开【安全邮件】，然后在AndroidStudio cpu monitor点击【start Method Tracing】如下图所示：<img src=\"/upload/image/zlw/method_tracing.PNG\" alt=\"method_tracing.PNG\"></li>\n<li>然后多次滑动邮件列表，持续大概10几秒，可以观察到cpu占有率在6%左右。</li>\n<li>再次点击【start tracing method】（这个时候是stop tracing method），AndroidStudio会自动打开一份trace文件，我们主要分析这份trace文件，它包括了每个方法的耗时，对我们分析问题非常有帮助。</li>\n<li>我们先来看下它长什么样子，如下图所示：<img src=\"/upload/image/zlw/cpu_method_trace.PNG\" alt=\"cpu_method_trace.PNG\"></li>\n<li>Thread 表示当前进程里面还有什么线程在工作，一般我们关心的是main（主线程）、xx_thread_pool、自己命名的线程等，对于Binder、JDWP这些是系统干活的线程，一般我们不需要关心。</li>\n<li>x-axis 表示的是下面这个柱状图横坐标以什么为基准排序，有两个选项：thread time是线程执行时间不包括线程 sleep时间；Wall Clock Time 是系统运行时间，包括线程sleep等时间。</li>\n<li>搜索按钮  可以用来搜索我们感兴趣的内容，比如我们应用的包名。搜索结果在柱状图中会有体现。</li>\n<li>Invocation Count 表示方法执行了多少次。</li>\n<li>Inclusive Time 表示方法执行了多长时间（单位是微秒），包括执行其他方法的时间。</li>\n<li><p>Exclusive Time 表示方法本身执行了多长时间，不包括执行其他方法的时间。</p>\n</li>\n<li><p>回到上面的例子，我们在搜索框中搜索：xdja 如下图所示：<img src=\"/upload/image/zlw/tracing_method.PNG\" alt=\"tracing_method.PNG\"></p>\n</li>\n<li>可以看到有相关的方法在工作，如果是静默状态，理论上是不应该有任何方法在执行的（排除心跳包的场景），所以这个可能就是存在问题的。</li>\n<li>如果通过上面的方法不能确定问题，我们可以进一步的通过TraceView来分析方法的调用栈，从而排查问题。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>测App 的CPU占有率，用脚本测要关掉AndroidStudio对App的调试，排除其对采集数据的影响。如果用AndroidStudio cpu monitor测，静默时CPU占有率稳定在0.22%-0.44%，并不为0。</li>\n<li>首先用AndroidStudio cpu monitor的【start Method Tracing】来采集方法执行时间分析问题。分析思路是查找和自己应用相关的操作。</li>\n<li>更进一步的分析问题可以使用TraceView抓取方法调用栈。</li>\n</ul>\n"},{"title":"MAT（Memory Analyzer Tool）工具的使用","date":"2016-10-19T09:28:59.000Z","_content":"## 背景介绍\n#### MAT简介\n- MAT(Memory Analyzer Tool)，一个用于内存分析的工具，它能够抓取一段时间内的内存快照，帮助我们分析这一段时间内存的分配情况，通过分析内存情况可以帮助我们发现内存泄漏、内存大量分配等问题的原因所在。Eclipse本身可以装MAT的插件，但是现在我们一般都转向AndroidStudio，所以可以使用MAT独立的版本，可以从这里下载[MAT](https://eclipse.org/mat/downloads.php)\n\n- 下载完成之后，解压就可以直接使用。\n\n#### java垃圾回收机制\n- java比较幸福的一件事情就是有GC（Garbage Collection），但是在项目节奏比较快的情况下，有可能开发同学会随心所欲的使用内存，重而就有可能造成内存泄漏，即有些内存明明不使用了，但是却不能被回收，严重浪费资源。\n- JVM（java虚拟机）是根据**对象树**来判断某个对象是否能被回收的。如下图所示：\n![GC Tree](/upload/image/gc_tree.png)\n- 即从GC Root（直译为GC 根，形象的理解为一颗大树的根吧）开始检查看哪些对象是可以到达的，直到遍历完所有的叶子结点。遍历完成之后，就去回收那些不可达的对象。\n\n###### GC root分类\n- 我们应该掌握几种GC root，便于后面使用MAT对内存进行分析。\n- Class：即由System Class Loader/Boot Class Loader加载的类对象，这些类对象不会被回收。\n- Thread线程：激活状态的线程\n- Stack Local栈中的对象，每个线程都会分配一个栈，栈中的局部变量或者参数都是GC root，因为它们的引用随时可能被用到\n- JNI JNI中的引用的对象；可能在JNI中定义的，也可能在虚拟机中定义\n- Monitor Used 用于保证同步的对象，例如wait()，notify()中使用的对象、锁等。\n- Held by JVM JVM持有的对象。JVM为了特殊用途保留的对象，它与JVM的具体实现有关。比如有System Class Loader, 一些Exceptions对象，和一些其它的Class Loader。对于这些类，JVM也没有过多的信息。\n\n## 使用MAT\n#### 抓取内存快照\n###### DDMS\n- 直接使用DDMS，点击[Dump Hprof file],等待5s钟会弹出保存hprof文件的对话框，如下图所示：\n![DDMS MAT](/upload/image/mat.PNG)\n- 不过在Dump Hprof file之前，需要GC至少两次，让JVM回收那些可以被回收的对象。如下图所示：![ddms gc](/upload/image/ddmsgc.PNG)\n- 生成的hprof不能直接被MAT打开，需要用Android SDK Tools中工具转一下\n```bash\n$ hprof-conv dump.hprof converted-dump.hprof\n  之后就可以打开了。\n```\n###### AndroidStudio Monitor\n- AndroidStudio最新版本我感觉比DDMS要人性化，所有的操作都可以在一个面板中完成，如下图所示：![AndroidStudio monitor](/upload/image/androidstudio_MAT.PNG)\n- 如图中所示，1 对应的就是GC   2 对应的是可以抓取堆内存快照hprof文件（堆中对象的引用情况）  3 对应的是抓取一定时间内对象的分配情况（分配对象的个数及大小）。\n- 抓取hprof时，还是先GC至少两次。\n- 点击【dump java heap】后会在AndroidStudio的左边目录栏的Captures选项中的Heap SnapShot列表中多一个以时间命名的hprof文件，然后在hprof文件上右键选择【Export to standard .hprof】即可以转成MAT能打开的格式。如下图所示：\n![Androidstudio_hprof](/upload/image/Androidstudio_hprof.PNG)\n- 这里要说下AndroidStudio比较好用的功能，最新版（我也不知道从哪个版本开始）提供了可以检测内存泄漏的工具，直接点击上一步中生成的hprof文件，然后在右侧有一个【Analyzer Tasks】的选项，用它就可以直接来分析内存泄漏。如下图所示：\n![AndroidStudio_Analyzermemor](/upload/image/AndroidStudio_Analyzermemory.PNG)\n\n#### MAT分析hprof文件\n- 这里主要介绍下MAT的各个模块都是干啥的以及简单用法，至于更详细的用法会在后面的实例分析中进行说明。\n- 打开hprof文件之后，如下图所示：\n![MAT_hprof](/upload/image/MAT_hprof.PNG)\n- 如上所示，最顶部的是工具栏，大家可以自己点点用用，反正我觉得是不经常用到，这里就不过多介绍了。最常用的是【Histogram】(用于列出每个class的实例个数)和【Dominator Tree】(用于列出还存活的大对象，是从大到小进行排序)，下面就分别介绍下他们简单的用法\n\n###### Histogram\n- 点开Histogram，会列出每个class对应的对象个数，以及他们占有内存的大小，如下图所示：![histogram](/upload/image/histogram.PNG)\n- 如图中所示最左边这一列是class，第二列是Object个数，第三列是Shallow Heap表示**对象在内存中的实际空间**，第四列是**对象回收后能释放出来的空间**\n- 需要说明非常有用的是第一行是可以过滤信息的，可以写正则表达式，一般我们想过滤和我们业务有关系的，比如：xdja，我们就直接输入xdja，然后就可以过滤出来我们需要的东西啦。\n\n###### doinator_tree\n- 点开doinator_tree,会列出每个对象的内存大小情况，样子和HIstogram长的比较像，如下图所示：![Dominator_tree](/upload/image/Dominator_tree.PNG)\n- 如图所示第一列是所有对象的名称 第二列是Shallow Heap表示**对象实际所占用的内存空间大小**，第三列是Retained Heap 表示**对象被释放之后所能释放的空间大小** 第四列表示对象占用内存空间的百分比\n- 我们一般通过比较Retained Heap 的大小来估计内存泄漏的内存大小。Shallow Heap在分析问题时一般作用不大。\n- Shallow Heap 和 Dominator的单位是Byte，所以一般可以直接除以1000，转成KB来预估大小。\n\n###### 查看对象树\n- 通过上面两种方式可以过滤出自己关心的类或者对象，然后在类或者对象的item上单击右键，如下图所示：\n![gc_root_look](/upload/image/gc_root_look.png)\n- 如图所示，我们介绍下弹出菜单中各个选项的作用。\n- 【merge shortest Paths to  GC Roots】合并从GC根节点到一个对象或一组对象的共同路径。\n- 【Path To GC Roots】查看这个对象所有的GC Roots。\n- 上面两个选项，点击之后子菜单中再选择exclude all phantom/weak/soft etc.references(排查虚引用/弱引用/软引用等）因为被虚引用/弱引用/软引用的对象可以直接被GC给回收。\n- List objects -> with incoming references ：查看这个对象持有的外部对象引用\n- List objects -> with outcoming references ：查看这个对象被哪些外部对象引用\n\n- 其实所有MAT的菜单选项都是由SQL语句组成的，你也可以写自己的sql语句，只不过MAT帮我们封装的基本已经够我们用了\n\n## 结尾\n- 上面只是简单介绍了MAT的基本用法，其实它还有很多可供我们使用的工具，比如：将drawable怎么以bitmap的形式查看、查看集合的值、写SQL语句、查看线程信息等。大家可以在使用的时候Google一下就可以了。上面讲的是最常用的用法。\n- 之后会有结合实例分析的文章，进一步熟悉MAT的使用。\n","source":"_posts/MAT工具的使用.md","raw":"---\ntitle: MAT（Memory Analyzer Tool）工具的使用\ndate: 2016-10-19 17:28:59\ntags: MAT,工具\ncategories: 工具使用\n---\n## 背景介绍\n#### MAT简介\n- MAT(Memory Analyzer Tool)，一个用于内存分析的工具，它能够抓取一段时间内的内存快照，帮助我们分析这一段时间内存的分配情况，通过分析内存情况可以帮助我们发现内存泄漏、内存大量分配等问题的原因所在。Eclipse本身可以装MAT的插件，但是现在我们一般都转向AndroidStudio，所以可以使用MAT独立的版本，可以从这里下载[MAT](https://eclipse.org/mat/downloads.php)\n\n- 下载完成之后，解压就可以直接使用。\n\n#### java垃圾回收机制\n- java比较幸福的一件事情就是有GC（Garbage Collection），但是在项目节奏比较快的情况下，有可能开发同学会随心所欲的使用内存，重而就有可能造成内存泄漏，即有些内存明明不使用了，但是却不能被回收，严重浪费资源。\n- JVM（java虚拟机）是根据**对象树**来判断某个对象是否能被回收的。如下图所示：\n![GC Tree](/upload/image/gc_tree.png)\n- 即从GC Root（直译为GC 根，形象的理解为一颗大树的根吧）开始检查看哪些对象是可以到达的，直到遍历完所有的叶子结点。遍历完成之后，就去回收那些不可达的对象。\n\n###### GC root分类\n- 我们应该掌握几种GC root，便于后面使用MAT对内存进行分析。\n- Class：即由System Class Loader/Boot Class Loader加载的类对象，这些类对象不会被回收。\n- Thread线程：激活状态的线程\n- Stack Local栈中的对象，每个线程都会分配一个栈，栈中的局部变量或者参数都是GC root，因为它们的引用随时可能被用到\n- JNI JNI中的引用的对象；可能在JNI中定义的，也可能在虚拟机中定义\n- Monitor Used 用于保证同步的对象，例如wait()，notify()中使用的对象、锁等。\n- Held by JVM JVM持有的对象。JVM为了特殊用途保留的对象，它与JVM的具体实现有关。比如有System Class Loader, 一些Exceptions对象，和一些其它的Class Loader。对于这些类，JVM也没有过多的信息。\n\n## 使用MAT\n#### 抓取内存快照\n###### DDMS\n- 直接使用DDMS，点击[Dump Hprof file],等待5s钟会弹出保存hprof文件的对话框，如下图所示：\n![DDMS MAT](/upload/image/mat.PNG)\n- 不过在Dump Hprof file之前，需要GC至少两次，让JVM回收那些可以被回收的对象。如下图所示：![ddms gc](/upload/image/ddmsgc.PNG)\n- 生成的hprof不能直接被MAT打开，需要用Android SDK Tools中工具转一下\n```bash\n$ hprof-conv dump.hprof converted-dump.hprof\n  之后就可以打开了。\n```\n###### AndroidStudio Monitor\n- AndroidStudio最新版本我感觉比DDMS要人性化，所有的操作都可以在一个面板中完成，如下图所示：![AndroidStudio monitor](/upload/image/androidstudio_MAT.PNG)\n- 如图中所示，1 对应的就是GC   2 对应的是可以抓取堆内存快照hprof文件（堆中对象的引用情况）  3 对应的是抓取一定时间内对象的分配情况（分配对象的个数及大小）。\n- 抓取hprof时，还是先GC至少两次。\n- 点击【dump java heap】后会在AndroidStudio的左边目录栏的Captures选项中的Heap SnapShot列表中多一个以时间命名的hprof文件，然后在hprof文件上右键选择【Export to standard .hprof】即可以转成MAT能打开的格式。如下图所示：\n![Androidstudio_hprof](/upload/image/Androidstudio_hprof.PNG)\n- 这里要说下AndroidStudio比较好用的功能，最新版（我也不知道从哪个版本开始）提供了可以检测内存泄漏的工具，直接点击上一步中生成的hprof文件，然后在右侧有一个【Analyzer Tasks】的选项，用它就可以直接来分析内存泄漏。如下图所示：\n![AndroidStudio_Analyzermemor](/upload/image/AndroidStudio_Analyzermemory.PNG)\n\n#### MAT分析hprof文件\n- 这里主要介绍下MAT的各个模块都是干啥的以及简单用法，至于更详细的用法会在后面的实例分析中进行说明。\n- 打开hprof文件之后，如下图所示：\n![MAT_hprof](/upload/image/MAT_hprof.PNG)\n- 如上所示，最顶部的是工具栏，大家可以自己点点用用，反正我觉得是不经常用到，这里就不过多介绍了。最常用的是【Histogram】(用于列出每个class的实例个数)和【Dominator Tree】(用于列出还存活的大对象，是从大到小进行排序)，下面就分别介绍下他们简单的用法\n\n###### Histogram\n- 点开Histogram，会列出每个class对应的对象个数，以及他们占有内存的大小，如下图所示：![histogram](/upload/image/histogram.PNG)\n- 如图中所示最左边这一列是class，第二列是Object个数，第三列是Shallow Heap表示**对象在内存中的实际空间**，第四列是**对象回收后能释放出来的空间**\n- 需要说明非常有用的是第一行是可以过滤信息的，可以写正则表达式，一般我们想过滤和我们业务有关系的，比如：xdja，我们就直接输入xdja，然后就可以过滤出来我们需要的东西啦。\n\n###### doinator_tree\n- 点开doinator_tree,会列出每个对象的内存大小情况，样子和HIstogram长的比较像，如下图所示：![Dominator_tree](/upload/image/Dominator_tree.PNG)\n- 如图所示第一列是所有对象的名称 第二列是Shallow Heap表示**对象实际所占用的内存空间大小**，第三列是Retained Heap 表示**对象被释放之后所能释放的空间大小** 第四列表示对象占用内存空间的百分比\n- 我们一般通过比较Retained Heap 的大小来估计内存泄漏的内存大小。Shallow Heap在分析问题时一般作用不大。\n- Shallow Heap 和 Dominator的单位是Byte，所以一般可以直接除以1000，转成KB来预估大小。\n\n###### 查看对象树\n- 通过上面两种方式可以过滤出自己关心的类或者对象，然后在类或者对象的item上单击右键，如下图所示：\n![gc_root_look](/upload/image/gc_root_look.png)\n- 如图所示，我们介绍下弹出菜单中各个选项的作用。\n- 【merge shortest Paths to  GC Roots】合并从GC根节点到一个对象或一组对象的共同路径。\n- 【Path To GC Roots】查看这个对象所有的GC Roots。\n- 上面两个选项，点击之后子菜单中再选择exclude all phantom/weak/soft etc.references(排查虚引用/弱引用/软引用等）因为被虚引用/弱引用/软引用的对象可以直接被GC给回收。\n- List objects -> with incoming references ：查看这个对象持有的外部对象引用\n- List objects -> with outcoming references ：查看这个对象被哪些外部对象引用\n\n- 其实所有MAT的菜单选项都是由SQL语句组成的，你也可以写自己的sql语句，只不过MAT帮我们封装的基本已经够我们用了\n\n## 结尾\n- 上面只是简单介绍了MAT的基本用法，其实它还有很多可供我们使用的工具，比如：将drawable怎么以bitmap的形式查看、查看集合的值、写SQL语句、查看线程信息等。大家可以在使用的时候Google一下就可以了。上面讲的是最常用的用法。\n- 之后会有结合实例分析的文章，进一步熟悉MAT的使用。\n","slug":"MAT工具的使用","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngd000a0cwlfcfj4puk","content":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><h4 id=\"MAT简介\"><a href=\"#MAT简介\" class=\"headerlink\" title=\"MAT简介\"></a>MAT简介</h4><ul>\n<li><p>MAT(Memory Analyzer Tool)，一个用于内存分析的工具，它能够抓取一段时间内的内存快照，帮助我们分析这一段时间内存的分配情况，通过分析内存情况可以帮助我们发现内存泄漏、内存大量分配等问题的原因所在。Eclipse本身可以装MAT的插件，但是现在我们一般都转向AndroidStudio，所以可以使用MAT独立的版本，可以从这里下载<a href=\"https://eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"external\">MAT</a></p>\n</li>\n<li><p>下载完成之后，解压就可以直接使用。</p>\n</li>\n</ul>\n<h4 id=\"java垃圾回收机制\"><a href=\"#java垃圾回收机制\" class=\"headerlink\" title=\"java垃圾回收机制\"></a>java垃圾回收机制</h4><ul>\n<li>java比较幸福的一件事情就是有GC（Garbage Collection），但是在项目节奏比较快的情况下，有可能开发同学会随心所欲的使用内存，重而就有可能造成内存泄漏，即有些内存明明不使用了，但是却不能被回收，严重浪费资源。</li>\n<li>JVM（java虚拟机）是根据<strong>对象树</strong>来判断某个对象是否能被回收的。如下图所示：<br><img src=\"/upload/image/gc_tree.png\" alt=\"GC Tree\"></li>\n<li>即从GC Root（直译为GC 根，形象的理解为一颗大树的根吧）开始检查看哪些对象是可以到达的，直到遍历完所有的叶子结点。遍历完成之后，就去回收那些不可达的对象。</li>\n</ul>\n<h6 id=\"GC-root分类\"><a href=\"#GC-root分类\" class=\"headerlink\" title=\"GC root分类\"></a>GC root分类</h6><ul>\n<li>我们应该掌握几种GC root，便于后面使用MAT对内存进行分析。</li>\n<li>Class：即由System Class Loader/Boot Class Loader加载的类对象，这些类对象不会被回收。</li>\n<li>Thread线程：激活状态的线程</li>\n<li>Stack Local栈中的对象，每个线程都会分配一个栈，栈中的局部变量或者参数都是GC root，因为它们的引用随时可能被用到</li>\n<li>JNI JNI中的引用的对象；可能在JNI中定义的，也可能在虚拟机中定义</li>\n<li>Monitor Used 用于保证同步的对象，例如wait()，notify()中使用的对象、锁等。</li>\n<li>Held by JVM JVM持有的对象。JVM为了特殊用途保留的对象，它与JVM的具体实现有关。比如有System Class Loader, 一些Exceptions对象，和一些其它的Class Loader。对于这些类，JVM也没有过多的信息。</li>\n</ul>\n<h2 id=\"使用MAT\"><a href=\"#使用MAT\" class=\"headerlink\" title=\"使用MAT\"></a>使用MAT</h2><h4 id=\"抓取内存快照\"><a href=\"#抓取内存快照\" class=\"headerlink\" title=\"抓取内存快照\"></a>抓取内存快照</h4><h6 id=\"DDMS\"><a href=\"#DDMS\" class=\"headerlink\" title=\"DDMS\"></a>DDMS</h6><ul>\n<li>直接使用DDMS，点击[Dump Hprof file],等待5s钟会弹出保存hprof文件的对话框，如下图所示：<br><img src=\"/upload/image/mat.PNG\" alt=\"DDMS MAT\"></li>\n<li>不过在Dump Hprof file之前，需要GC至少两次，让JVM回收那些可以被回收的对象。如下图所示：<img src=\"/upload/image/ddmsgc.PNG\" alt=\"ddms gc\"></li>\n<li>生成的hprof不能直接被MAT打开，需要用Android SDK Tools中工具转一下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hprof-conv dump.hprof converted-dump.hprof</div><div class=\"line\">  之后就可以打开了。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"AndroidStudio-Monitor\"><a href=\"#AndroidStudio-Monitor\" class=\"headerlink\" title=\"AndroidStudio Monitor\"></a>AndroidStudio Monitor</h6><ul>\n<li>AndroidStudio最新版本我感觉比DDMS要人性化，所有的操作都可以在一个面板中完成，如下图所示：<img src=\"/upload/image/androidstudio_MAT.PNG\" alt=\"AndroidStudio monitor\"></li>\n<li>如图中所示，1 对应的就是GC   2 对应的是可以抓取堆内存快照hprof文件（堆中对象的引用情况）  3 对应的是抓取一定时间内对象的分配情况（分配对象的个数及大小）。</li>\n<li>抓取hprof时，还是先GC至少两次。</li>\n<li>点击【dump java heap】后会在AndroidStudio的左边目录栏的Captures选项中的Heap SnapShot列表中多一个以时间命名的hprof文件，然后在hprof文件上右键选择【Export to standard .hprof】即可以转成MAT能打开的格式。如下图所示：<br><img src=\"/upload/image/Androidstudio_hprof.PNG\" alt=\"Androidstudio_hprof\"></li>\n<li>这里要说下AndroidStudio比较好用的功能，最新版（我也不知道从哪个版本开始）提供了可以检测内存泄漏的工具，直接点击上一步中生成的hprof文件，然后在右侧有一个【Analyzer Tasks】的选项，用它就可以直接来分析内存泄漏。如下图所示：<br><img src=\"/upload/image/AndroidStudio_Analyzermemory.PNG\" alt=\"AndroidStudio_Analyzermemor\"></li>\n</ul>\n<h4 id=\"MAT分析hprof文件\"><a href=\"#MAT分析hprof文件\" class=\"headerlink\" title=\"MAT分析hprof文件\"></a>MAT分析hprof文件</h4><ul>\n<li>这里主要介绍下MAT的各个模块都是干啥的以及简单用法，至于更详细的用法会在后面的实例分析中进行说明。</li>\n<li>打开hprof文件之后，如下图所示：<br><img src=\"/upload/image/MAT_hprof.PNG\" alt=\"MAT_hprof\"></li>\n<li>如上所示，最顶部的是工具栏，大家可以自己点点用用，反正我觉得是不经常用到，这里就不过多介绍了。最常用的是【Histogram】(用于列出每个class的实例个数)和【Dominator Tree】(用于列出还存活的大对象，是从大到小进行排序)，下面就分别介绍下他们简单的用法</li>\n</ul>\n<h6 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h6><ul>\n<li>点开Histogram，会列出每个class对应的对象个数，以及他们占有内存的大小，如下图所示：<img src=\"/upload/image/histogram.PNG\" alt=\"histogram\"></li>\n<li>如图中所示最左边这一列是class，第二列是Object个数，第三列是Shallow Heap表示<strong>对象在内存中的实际空间</strong>，第四列是<strong>对象回收后能释放出来的空间</strong></li>\n<li>需要说明非常有用的是第一行是可以过滤信息的，可以写正则表达式，一般我们想过滤和我们业务有关系的，比如：xdja，我们就直接输入xdja，然后就可以过滤出来我们需要的东西啦。</li>\n</ul>\n<h6 id=\"doinator-tree\"><a href=\"#doinator-tree\" class=\"headerlink\" title=\"doinator_tree\"></a>doinator_tree</h6><ul>\n<li>点开doinator_tree,会列出每个对象的内存大小情况，样子和HIstogram长的比较像，如下图所示：<img src=\"/upload/image/Dominator_tree.PNG\" alt=\"Dominator_tree\"></li>\n<li>如图所示第一列是所有对象的名称 第二列是Shallow Heap表示<strong>对象实际所占用的内存空间大小</strong>，第三列是Retained Heap 表示<strong>对象被释放之后所能释放的空间大小</strong> 第四列表示对象占用内存空间的百分比</li>\n<li>我们一般通过比较Retained Heap 的大小来估计内存泄漏的内存大小。Shallow Heap在分析问题时一般作用不大。</li>\n<li>Shallow Heap 和 Dominator的单位是Byte，所以一般可以直接除以1000，转成KB来预估大小。</li>\n</ul>\n<h6 id=\"查看对象树\"><a href=\"#查看对象树\" class=\"headerlink\" title=\"查看对象树\"></a>查看对象树</h6><ul>\n<li>通过上面两种方式可以过滤出自己关心的类或者对象，然后在类或者对象的item上单击右键，如下图所示：<br><img src=\"/upload/image/gc_root_look.png\" alt=\"gc_root_look\"></li>\n<li>如图所示，我们介绍下弹出菜单中各个选项的作用。</li>\n<li>【merge shortest Paths to  GC Roots】合并从GC根节点到一个对象或一组对象的共同路径。</li>\n<li>【Path To GC Roots】查看这个对象所有的GC Roots。</li>\n<li>上面两个选项，点击之后子菜单中再选择exclude all phantom/weak/soft etc.references(排查虚引用/弱引用/软引用等）因为被虚引用/弱引用/软引用的对象可以直接被GC给回收。</li>\n<li>List objects -&gt; with incoming references ：查看这个对象持有的外部对象引用</li>\n<li><p>List objects -&gt; with outcoming references ：查看这个对象被哪些外部对象引用</p>\n</li>\n<li><p>其实所有MAT的菜单选项都是由SQL语句组成的，你也可以写自己的sql语句，只不过MAT帮我们封装的基本已经够我们用了</p>\n</li>\n</ul>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><ul>\n<li>上面只是简单介绍了MAT的基本用法，其实它还有很多可供我们使用的工具，比如：将drawable怎么以bitmap的形式查看、查看集合的值、写SQL语句、查看线程信息等。大家可以在使用的时候Google一下就可以了。上面讲的是最常用的用法。</li>\n<li>之后会有结合实例分析的文章，进一步熟悉MAT的使用。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><h4 id=\"MAT简介\"><a href=\"#MAT简介\" class=\"headerlink\" title=\"MAT简介\"></a>MAT简介</h4><ul>\n<li><p>MAT(Memory Analyzer Tool)，一个用于内存分析的工具，它能够抓取一段时间内的内存快照，帮助我们分析这一段时间内存的分配情况，通过分析内存情况可以帮助我们发现内存泄漏、内存大量分配等问题的原因所在。Eclipse本身可以装MAT的插件，但是现在我们一般都转向AndroidStudio，所以可以使用MAT独立的版本，可以从这里下载<a href=\"https://eclipse.org/mat/downloads.php\">MAT</a></p>\n</li>\n<li><p>下载完成之后，解压就可以直接使用。</p>\n</li>\n</ul>\n<h4 id=\"java垃圾回收机制\"><a href=\"#java垃圾回收机制\" class=\"headerlink\" title=\"java垃圾回收机制\"></a>java垃圾回收机制</h4><ul>\n<li>java比较幸福的一件事情就是有GC（Garbage Collection），但是在项目节奏比较快的情况下，有可能开发同学会随心所欲的使用内存，重而就有可能造成内存泄漏，即有些内存明明不使用了，但是却不能被回收，严重浪费资源。</li>\n<li>JVM（java虚拟机）是根据<strong>对象树</strong>来判断某个对象是否能被回收的。如下图所示：<br><img src=\"/upload/image/gc_tree.png\" alt=\"GC Tree\"></li>\n<li>即从GC Root（直译为GC 根，形象的理解为一颗大树的根吧）开始检查看哪些对象是可以到达的，直到遍历完所有的叶子结点。遍历完成之后，就去回收那些不可达的对象。</li>\n</ul>\n<h6 id=\"GC-root分类\"><a href=\"#GC-root分类\" class=\"headerlink\" title=\"GC root分类\"></a>GC root分类</h6><ul>\n<li>我们应该掌握几种GC root，便于后面使用MAT对内存进行分析。</li>\n<li>Class：即由System Class Loader/Boot Class Loader加载的类对象，这些类对象不会被回收。</li>\n<li>Thread线程：激活状态的线程</li>\n<li>Stack Local栈中的对象，每个线程都会分配一个栈，栈中的局部变量或者参数都是GC root，因为它们的引用随时可能被用到</li>\n<li>JNI JNI中的引用的对象；可能在JNI中定义的，也可能在虚拟机中定义</li>\n<li>Monitor Used 用于保证同步的对象，例如wait()，notify()中使用的对象、锁等。</li>\n<li>Held by JVM JVM持有的对象。JVM为了特殊用途保留的对象，它与JVM的具体实现有关。比如有System Class Loader, 一些Exceptions对象，和一些其它的Class Loader。对于这些类，JVM也没有过多的信息。</li>\n</ul>\n<h2 id=\"使用MAT\"><a href=\"#使用MAT\" class=\"headerlink\" title=\"使用MAT\"></a>使用MAT</h2><h4 id=\"抓取内存快照\"><a href=\"#抓取内存快照\" class=\"headerlink\" title=\"抓取内存快照\"></a>抓取内存快照</h4><h6 id=\"DDMS\"><a href=\"#DDMS\" class=\"headerlink\" title=\"DDMS\"></a>DDMS</h6><ul>\n<li>直接使用DDMS，点击[Dump Hprof file],等待5s钟会弹出保存hprof文件的对话框，如下图所示：<br><img src=\"/upload/image/mat.PNG\" alt=\"DDMS MAT\"></li>\n<li>不过在Dump Hprof file之前，需要GC至少两次，让JVM回收那些可以被回收的对象。如下图所示：<img src=\"/upload/image/ddmsgc.PNG\" alt=\"ddms gc\"></li>\n<li>生成的hprof不能直接被MAT打开，需要用Android SDK Tools中工具转一下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hprof-conv dump.hprof converted-dump.hprof</div><div class=\"line\">  之后就可以打开了。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"AndroidStudio-Monitor\"><a href=\"#AndroidStudio-Monitor\" class=\"headerlink\" title=\"AndroidStudio Monitor\"></a>AndroidStudio Monitor</h6><ul>\n<li>AndroidStudio最新版本我感觉比DDMS要人性化，所有的操作都可以在一个面板中完成，如下图所示：<img src=\"/upload/image/androidstudio_MAT.PNG\" alt=\"AndroidStudio monitor\"></li>\n<li>如图中所示，1 对应的就是GC   2 对应的是可以抓取堆内存快照hprof文件（堆中对象的引用情况）  3 对应的是抓取一定时间内对象的分配情况（分配对象的个数及大小）。</li>\n<li>抓取hprof时，还是先GC至少两次。</li>\n<li>点击【dump java heap】后会在AndroidStudio的左边目录栏的Captures选项中的Heap SnapShot列表中多一个以时间命名的hprof文件，然后在hprof文件上右键选择【Export to standard .hprof】即可以转成MAT能打开的格式。如下图所示：<br><img src=\"/upload/image/Androidstudio_hprof.PNG\" alt=\"Androidstudio_hprof\"></li>\n<li>这里要说下AndroidStudio比较好用的功能，最新版（我也不知道从哪个版本开始）提供了可以检测内存泄漏的工具，直接点击上一步中生成的hprof文件，然后在右侧有一个【Analyzer Tasks】的选项，用它就可以直接来分析内存泄漏。如下图所示：<br><img src=\"/upload/image/AndroidStudio_Analyzermemory.PNG\" alt=\"AndroidStudio_Analyzermemor\"></li>\n</ul>\n<h4 id=\"MAT分析hprof文件\"><a href=\"#MAT分析hprof文件\" class=\"headerlink\" title=\"MAT分析hprof文件\"></a>MAT分析hprof文件</h4><ul>\n<li>这里主要介绍下MAT的各个模块都是干啥的以及简单用法，至于更详细的用法会在后面的实例分析中进行说明。</li>\n<li>打开hprof文件之后，如下图所示：<br><img src=\"/upload/image/MAT_hprof.PNG\" alt=\"MAT_hprof\"></li>\n<li>如上所示，最顶部的是工具栏，大家可以自己点点用用，反正我觉得是不经常用到，这里就不过多介绍了。最常用的是【Histogram】(用于列出每个class的实例个数)和【Dominator Tree】(用于列出还存活的大对象，是从大到小进行排序)，下面就分别介绍下他们简单的用法</li>\n</ul>\n<h6 id=\"Histogram\"><a href=\"#Histogram\" class=\"headerlink\" title=\"Histogram\"></a>Histogram</h6><ul>\n<li>点开Histogram，会列出每个class对应的对象个数，以及他们占有内存的大小，如下图所示：<img src=\"/upload/image/histogram.PNG\" alt=\"histogram\"></li>\n<li>如图中所示最左边这一列是class，第二列是Object个数，第三列是Shallow Heap表示<strong>对象在内存中的实际空间</strong>，第四列是<strong>对象回收后能释放出来的空间</strong></li>\n<li>需要说明非常有用的是第一行是可以过滤信息的，可以写正则表达式，一般我们想过滤和我们业务有关系的，比如：xdja，我们就直接输入xdja，然后就可以过滤出来我们需要的东西啦。</li>\n</ul>\n<h6 id=\"doinator-tree\"><a href=\"#doinator-tree\" class=\"headerlink\" title=\"doinator_tree\"></a>doinator_tree</h6><ul>\n<li>点开doinator_tree,会列出每个对象的内存大小情况，样子和HIstogram长的比较像，如下图所示：<img src=\"/upload/image/Dominator_tree.PNG\" alt=\"Dominator_tree\"></li>\n<li>如图所示第一列是所有对象的名称 第二列是Shallow Heap表示<strong>对象实际所占用的内存空间大小</strong>，第三列是Retained Heap 表示<strong>对象被释放之后所能释放的空间大小</strong> 第四列表示对象占用内存空间的百分比</li>\n<li>我们一般通过比较Retained Heap 的大小来估计内存泄漏的内存大小。Shallow Heap在分析问题时一般作用不大。</li>\n<li>Shallow Heap 和 Dominator的单位是Byte，所以一般可以直接除以1000，转成KB来预估大小。</li>\n</ul>\n<h6 id=\"查看对象树\"><a href=\"#查看对象树\" class=\"headerlink\" title=\"查看对象树\"></a>查看对象树</h6><ul>\n<li>通过上面两种方式可以过滤出自己关心的类或者对象，然后在类或者对象的item上单击右键，如下图所示：<br><img src=\"/upload/image/gc_root_look.png\" alt=\"gc_root_look\"></li>\n<li>如图所示，我们介绍下弹出菜单中各个选项的作用。</li>\n<li>【merge shortest Paths to  GC Roots】合并从GC根节点到一个对象或一组对象的共同路径。</li>\n<li>【Path To GC Roots】查看这个对象所有的GC Roots。</li>\n<li>上面两个选项，点击之后子菜单中再选择exclude all phantom/weak/soft etc.references(排查虚引用/弱引用/软引用等）因为被虚引用/弱引用/软引用的对象可以直接被GC给回收。</li>\n<li>List objects -&gt; with incoming references ：查看这个对象持有的外部对象引用</li>\n<li><p>List objects -&gt; with outcoming references ：查看这个对象被哪些外部对象引用</p>\n</li>\n<li><p>其实所有MAT的菜单选项都是由SQL语句组成的，你也可以写自己的sql语句，只不过MAT帮我们封装的基本已经够我们用了</p>\n</li>\n</ul>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><ul>\n<li>上面只是简单介绍了MAT的基本用法，其实它还有很多可供我们使用的工具，比如：将drawable怎么以bitmap的形式查看、查看集合的值、写SQL语句、查看线程信息等。大家可以在使用的时候Google一下就可以了。上面讲的是最常用的用法。</li>\n<li>之后会有结合实例分析的文章，进一步熟悉MAT的使用。</li>\n</ul>\n"},{"title":"TraceView工具的使用","date":"2016-10-19T07:50:49.000Z","_content":"## TraceView简介\n- 在性能分析和定位过程中，TraceView是使用比较多的一个工具，在遇到APP启动时间过长、界面切换时间比较长以及卡顿的时候，都可以先用TraceView来查看方法调用栈，查看比较耗时的方法以及各个线程的执行情况。\n- Traceview是Android平台特有的数据采集和分析工具,它主要用于分析Android中应用程序的性能问题。Traceview本身只是一个数据分析工具,而数据的采集则需要使用Android SDK中的Debug类或者利用DDMS工具。\n\n## TraceView的使用\n#### 数据采集\n- 上面提到，数据采集有两种方式，使用Android SDK中的Debug类或者利用DDMS工具，下面就分别介绍下：\n\n##### Android SDK中Debug类\n- 开发者在一些关键代码段开始前调用Android SDK中Debug类的startMethodTracing函数,并在关键代码段结束前调用stopMethodTracing函数。这两个函数运行过程中将采集运行时间内该应用所有线程（注意,只能是Java线程）的函数执行情况,并将采集数据保存到/mnt/sdcard/下的一个文件中。\n\n##### DDMS工具\n- 借助Android SDK中的DDMS工具。DDMS可采集系统中某个正在运行的进程的函数调用信息。对开发者而言,此方法适用于没有目标应用源代码的情况。DDMS工具中Traceview的使用如图所示。\n![DDMS_traceView的使用](/upload/image/Traceview_ddms.jpg)\n- 在对Android4.4以上手机点击TraceView按钮的时候，会出现2中方式的选择对话框，如下图所示：\n![TraceView DDMS](/upload/image/traceview_choose.png)\n- Sample based profiling：以固定的频率像VM发送中断,并搜集调用栈信息。低版本手机也是采用该方式来采集样本的,默认是1毫秒采集一次。精确度和采集的频率有关,间隔频率越小会越精确,但运行也会相应的更慢。一般我们默认用1000微秒就足够了。\n- Trace based profiling：不论多小的函数,都会跟踪整个函数的执行过程,所以开销也会很大。运行起来会非常的慢,不适合检测滑动性能。\n\n##### 上面两种方式比较\n- 使用Android Debug类一般还需要去熟悉代码，且采集到的数据还要pull到本地，然后转换成MAT（参考MAT的使用），使用起来相对麻烦，所以对于测试同学来说DDMS是比较好的方式，但是对于某些场景是需要用Debug类方式来测试的，比如APP首次启动，因为进程还没创建，所以DDMS没法用。\n- 在做性能分析的过程中,基本都是采用DDMS工具中来启动TraceView,这样简单易用,随便哪个地方的代码都可以跟踪。所以一般测试过程中，我们用DDMS工具的方式比较多。\n\n#### 数据分析\n##### 初识Traceview界面\n- 使用DDMS工具采集数据的方式，暂停之后会自动打开一个分析数据的界面，如下图所示：![TraceView面板](/upload/image/trace_view_panel.png)\n- 不过需要注意的是，在DDMS工具中打开的Traceview界面中的搜索框是没作用的，你不管输入任何东西也过滤不出来。如果想使用搜索功能（搜索功能其实还挺有用），可以通过 Android SDK tools 下的TraceView命令打开数据采集生成的trace文件（一般存放在C:\\Users\\xxx\\AppData\\Local\\Temp\\xxxx.trace）\n- 如上图所示，Traceview其UI划分为上下两个面板,即Timeline Panel和Profile Panel。\n- Timeline Panel左边是测试数据中所采集的线程信息,右边Pane所示为时间线,时间线上是每个线程测试时间段内所涉及的函数调用信息。内容的丰富代表该时间段执行的函数多,从而可以反应线程的繁忙状态。也可以看出线程的启动时间和结束时间等。开发者可以在时间线Pane中移动时间线纵轴。纵轴上边将显示当前时间点中某线程正在执行的函数信息。\n- Profile Panel是Traceview的核心界面,其内涵非常丰富。它主要展示了某个线程（先在Timeline Panel中选择线程）中各个函数调用的情况,包括CPU使用时间、调用次数等信息。而这些信息正是查找性能瓶颈的关键依据。\n- 两个面板之间是相互联动的，点击下面的函数，可以在时间轴上显示对应的位置（如上图所示，点击draw方法，在时间线main线程上有很多下拉框）。另外在时间线上拉伸可以放大时间线，双击顶部的时间条区域可以缩小原始状态。\n\n##### Profile Panel中各列的含义\n- 网上关于这个的介绍非常多，我这里就再搬过来写一遍，省去大家去查找的时间了。\n\n\n  列名 | 描述\n---- | ---- :|\nName | 该线程运行过程中所调用的函数名\nIncl Cpu Time | 某函数占用的CPU时间,包含内部调用其它函数的CPU时间\nExcl Cpu Time | 某函数占用的CPU时间,但不含内部调用其它函数所占用的CPU时间\nIncl Real Time | 某函数运行的真实时间（以毫秒为单位）,内含调用其它函数所占用的真实时间\nExcl Real Time | 数运行的真实时间（以毫秒为单位）,不含调用其它函数所占用的真实时间\nCall+Recur Calls/Total | 某函数被调用次数以及递归调用次数/总调用次数\nCpu Time/Call | 某函数调用CPU时间与调用次数的比。相当于该函数平均执行时间\nReal Time/Call | 同CPU Time/Call类似,只不过统计单位换成了真实时间\n\n###### 上面这些指标中我们经常用到的有\n- Incl Cpu Time 可以用来排序查找比较耗时的逻辑。\n- Call+Recur Calls/Total 可以用来查看是否有重复调用的情况，比如：ListView在滑动过程中，是否多次调用getview()。\n- Cpu Time/Call 可以用来查看一个方法的平均执行时间，比如：App首次启动过程中某个初始化方法init()执行时间比较长。\n- 这几个指标可以排序，结合起来排查问题。\n","source":"_posts/TraceView工具的使用.md","raw":"---\ntitle: TraceView工具的使用\ndate: 2016-10-19 15:50:49\ntags: TraceView,工具\ncategories: 工具使用\n---\n## TraceView简介\n- 在性能分析和定位过程中，TraceView是使用比较多的一个工具，在遇到APP启动时间过长、界面切换时间比较长以及卡顿的时候，都可以先用TraceView来查看方法调用栈，查看比较耗时的方法以及各个线程的执行情况。\n- Traceview是Android平台特有的数据采集和分析工具,它主要用于分析Android中应用程序的性能问题。Traceview本身只是一个数据分析工具,而数据的采集则需要使用Android SDK中的Debug类或者利用DDMS工具。\n\n## TraceView的使用\n#### 数据采集\n- 上面提到，数据采集有两种方式，使用Android SDK中的Debug类或者利用DDMS工具，下面就分别介绍下：\n\n##### Android SDK中Debug类\n- 开发者在一些关键代码段开始前调用Android SDK中Debug类的startMethodTracing函数,并在关键代码段结束前调用stopMethodTracing函数。这两个函数运行过程中将采集运行时间内该应用所有线程（注意,只能是Java线程）的函数执行情况,并将采集数据保存到/mnt/sdcard/下的一个文件中。\n\n##### DDMS工具\n- 借助Android SDK中的DDMS工具。DDMS可采集系统中某个正在运行的进程的函数调用信息。对开发者而言,此方法适用于没有目标应用源代码的情况。DDMS工具中Traceview的使用如图所示。\n![DDMS_traceView的使用](/upload/image/Traceview_ddms.jpg)\n- 在对Android4.4以上手机点击TraceView按钮的时候，会出现2中方式的选择对话框，如下图所示：\n![TraceView DDMS](/upload/image/traceview_choose.png)\n- Sample based profiling：以固定的频率像VM发送中断,并搜集调用栈信息。低版本手机也是采用该方式来采集样本的,默认是1毫秒采集一次。精确度和采集的频率有关,间隔频率越小会越精确,但运行也会相应的更慢。一般我们默认用1000微秒就足够了。\n- Trace based profiling：不论多小的函数,都会跟踪整个函数的执行过程,所以开销也会很大。运行起来会非常的慢,不适合检测滑动性能。\n\n##### 上面两种方式比较\n- 使用Android Debug类一般还需要去熟悉代码，且采集到的数据还要pull到本地，然后转换成MAT（参考MAT的使用），使用起来相对麻烦，所以对于测试同学来说DDMS是比较好的方式，但是对于某些场景是需要用Debug类方式来测试的，比如APP首次启动，因为进程还没创建，所以DDMS没法用。\n- 在做性能分析的过程中,基本都是采用DDMS工具中来启动TraceView,这样简单易用,随便哪个地方的代码都可以跟踪。所以一般测试过程中，我们用DDMS工具的方式比较多。\n\n#### 数据分析\n##### 初识Traceview界面\n- 使用DDMS工具采集数据的方式，暂停之后会自动打开一个分析数据的界面，如下图所示：![TraceView面板](/upload/image/trace_view_panel.png)\n- 不过需要注意的是，在DDMS工具中打开的Traceview界面中的搜索框是没作用的，你不管输入任何东西也过滤不出来。如果想使用搜索功能（搜索功能其实还挺有用），可以通过 Android SDK tools 下的TraceView命令打开数据采集生成的trace文件（一般存放在C:\\Users\\xxx\\AppData\\Local\\Temp\\xxxx.trace）\n- 如上图所示，Traceview其UI划分为上下两个面板,即Timeline Panel和Profile Panel。\n- Timeline Panel左边是测试数据中所采集的线程信息,右边Pane所示为时间线,时间线上是每个线程测试时间段内所涉及的函数调用信息。内容的丰富代表该时间段执行的函数多,从而可以反应线程的繁忙状态。也可以看出线程的启动时间和结束时间等。开发者可以在时间线Pane中移动时间线纵轴。纵轴上边将显示当前时间点中某线程正在执行的函数信息。\n- Profile Panel是Traceview的核心界面,其内涵非常丰富。它主要展示了某个线程（先在Timeline Panel中选择线程）中各个函数调用的情况,包括CPU使用时间、调用次数等信息。而这些信息正是查找性能瓶颈的关键依据。\n- 两个面板之间是相互联动的，点击下面的函数，可以在时间轴上显示对应的位置（如上图所示，点击draw方法，在时间线main线程上有很多下拉框）。另外在时间线上拉伸可以放大时间线，双击顶部的时间条区域可以缩小原始状态。\n\n##### Profile Panel中各列的含义\n- 网上关于这个的介绍非常多，我这里就再搬过来写一遍，省去大家去查找的时间了。\n\n\n  列名 | 描述\n---- | ---- :|\nName | 该线程运行过程中所调用的函数名\nIncl Cpu Time | 某函数占用的CPU时间,包含内部调用其它函数的CPU时间\nExcl Cpu Time | 某函数占用的CPU时间,但不含内部调用其它函数所占用的CPU时间\nIncl Real Time | 某函数运行的真实时间（以毫秒为单位）,内含调用其它函数所占用的真实时间\nExcl Real Time | 数运行的真实时间（以毫秒为单位）,不含调用其它函数所占用的真实时间\nCall+Recur Calls/Total | 某函数被调用次数以及递归调用次数/总调用次数\nCpu Time/Call | 某函数调用CPU时间与调用次数的比。相当于该函数平均执行时间\nReal Time/Call | 同CPU Time/Call类似,只不过统计单位换成了真实时间\n\n###### 上面这些指标中我们经常用到的有\n- Incl Cpu Time 可以用来排序查找比较耗时的逻辑。\n- Call+Recur Calls/Total 可以用来查看是否有重复调用的情况，比如：ListView在滑动过程中，是否多次调用getview()。\n- Cpu Time/Call 可以用来查看一个方法的平均执行时间，比如：App首次启动过程中某个初始化方法init()执行时间比较长。\n- 这几个指标可以排序，结合起来排查问题。\n","slug":"TraceView工具的使用","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngd000f0cwly3726fuj","content":"<h2 id=\"TraceView简介\"><a href=\"#TraceView简介\" class=\"headerlink\" title=\"TraceView简介\"></a>TraceView简介</h2><ul>\n<li>在性能分析和定位过程中，TraceView是使用比较多的一个工具，在遇到APP启动时间过长、界面切换时间比较长以及卡顿的时候，都可以先用TraceView来查看方法调用栈，查看比较耗时的方法以及各个线程的执行情况。</li>\n<li>Traceview是Android平台特有的数据采集和分析工具,它主要用于分析Android中应用程序的性能问题。Traceview本身只是一个数据分析工具,而数据的采集则需要使用Android SDK中的Debug类或者利用DDMS工具。</li>\n</ul>\n<h2 id=\"TraceView的使用\"><a href=\"#TraceView的使用\" class=\"headerlink\" title=\"TraceView的使用\"></a>TraceView的使用</h2><h4 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h4><ul>\n<li>上面提到，数据采集有两种方式，使用Android SDK中的Debug类或者利用DDMS工具，下面就分别介绍下：</li>\n</ul>\n<h5 id=\"Android-SDK中Debug类\"><a href=\"#Android-SDK中Debug类\" class=\"headerlink\" title=\"Android SDK中Debug类\"></a>Android SDK中Debug类</h5><ul>\n<li>开发者在一些关键代码段开始前调用Android SDK中Debug类的startMethodTracing函数,并在关键代码段结束前调用stopMethodTracing函数。这两个函数运行过程中将采集运行时间内该应用所有线程（注意,只能是Java线程）的函数执行情况,并将采集数据保存到/mnt/sdcard/下的一个文件中。</li>\n</ul>\n<h5 id=\"DDMS工具\"><a href=\"#DDMS工具\" class=\"headerlink\" title=\"DDMS工具\"></a>DDMS工具</h5><ul>\n<li>借助Android SDK中的DDMS工具。DDMS可采集系统中某个正在运行的进程的函数调用信息。对开发者而言,此方法适用于没有目标应用源代码的情况。DDMS工具中Traceview的使用如图所示。<br><img src=\"/upload/image/Traceview_ddms.jpg\" alt=\"DDMS_traceView的使用\"></li>\n<li>在对Android4.4以上手机点击TraceView按钮的时候，会出现2中方式的选择对话框，如下图所示：<br><img src=\"/upload/image/traceview_choose.png\" alt=\"TraceView DDMS\"></li>\n<li>Sample based profiling：以固定的频率像VM发送中断,并搜集调用栈信息。低版本手机也是采用该方式来采集样本的,默认是1毫秒采集一次。精确度和采集的频率有关,间隔频率越小会越精确,但运行也会相应的更慢。一般我们默认用1000微秒就足够了。</li>\n<li>Trace based profiling：不论多小的函数,都会跟踪整个函数的执行过程,所以开销也会很大。运行起来会非常的慢,不适合检测滑动性能。</li>\n</ul>\n<h5 id=\"上面两种方式比较\"><a href=\"#上面两种方式比较\" class=\"headerlink\" title=\"上面两种方式比较\"></a>上面两种方式比较</h5><ul>\n<li>使用Android Debug类一般还需要去熟悉代码，且采集到的数据还要pull到本地，然后转换成MAT（参考MAT的使用），使用起来相对麻烦，所以对于测试同学来说DDMS是比较好的方式，但是对于某些场景是需要用Debug类方式来测试的，比如APP首次启动，因为进程还没创建，所以DDMS没法用。</li>\n<li>在做性能分析的过程中,基本都是采用DDMS工具中来启动TraceView,这样简单易用,随便哪个地方的代码都可以跟踪。所以一般测试过程中，我们用DDMS工具的方式比较多。</li>\n</ul>\n<h4 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h4><h5 id=\"初识Traceview界面\"><a href=\"#初识Traceview界面\" class=\"headerlink\" title=\"初识Traceview界面\"></a>初识Traceview界面</h5><ul>\n<li>使用DDMS工具采集数据的方式，暂停之后会自动打开一个分析数据的界面，如下图所示：<img src=\"/upload/image/trace_view_panel.png\" alt=\"TraceView面板\"></li>\n<li>不过需要注意的是，在DDMS工具中打开的Traceview界面中的搜索框是没作用的，你不管输入任何东西也过滤不出来。如果想使用搜索功能（搜索功能其实还挺有用），可以通过 Android SDK tools 下的TraceView命令打开数据采集生成的trace文件（一般存放在C:\\Users\\xxx\\AppData\\Local\\Temp\\xxxx.trace）</li>\n<li>如上图所示，Traceview其UI划分为上下两个面板,即Timeline Panel和Profile Panel。</li>\n<li>Timeline Panel左边是测试数据中所采集的线程信息,右边Pane所示为时间线,时间线上是每个线程测试时间段内所涉及的函数调用信息。内容的丰富代表该时间段执行的函数多,从而可以反应线程的繁忙状态。也可以看出线程的启动时间和结束时间等。开发者可以在时间线Pane中移动时间线纵轴。纵轴上边将显示当前时间点中某线程正在执行的函数信息。</li>\n<li>Profile Panel是Traceview的核心界面,其内涵非常丰富。它主要展示了某个线程（先在Timeline Panel中选择线程）中各个函数调用的情况,包括CPU使用时间、调用次数等信息。而这些信息正是查找性能瓶颈的关键依据。</li>\n<li>两个面板之间是相互联动的，点击下面的函数，可以在时间轴上显示对应的位置（如上图所示，点击draw方法，在时间线main线程上有很多下拉框）。另外在时间线上拉伸可以放大时间线，双击顶部的时间条区域可以缩小原始状态。</li>\n</ul>\n<h5 id=\"Profile-Panel中各列的含义\"><a href=\"#Profile-Panel中各列的含义\" class=\"headerlink\" title=\"Profile Panel中各列的含义\"></a>Profile Panel中各列的含义</h5><ul>\n<li>网上关于这个的介绍非常多，我这里就再搬过来写一遍，省去大家去查找的时间了。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>该线程运行过程中所调用的函数名</td>\n</tr>\n<tr>\n<td>Incl Cpu Time</td>\n<td>某函数占用的CPU时间,包含内部调用其它函数的CPU时间</td>\n</tr>\n<tr>\n<td>Excl Cpu Time</td>\n<td>某函数占用的CPU时间,但不含内部调用其它函数所占用的CPU时间</td>\n</tr>\n<tr>\n<td>Incl Real Time</td>\n<td>某函数运行的真实时间（以毫秒为单位）,内含调用其它函数所占用的真实时间</td>\n</tr>\n<tr>\n<td>Excl Real Time</td>\n<td>数运行的真实时间（以毫秒为单位）,不含调用其它函数所占用的真实时间</td>\n</tr>\n<tr>\n<td>Call+Recur Calls/Total</td>\n<td>某函数被调用次数以及递归调用次数/总调用次数</td>\n</tr>\n<tr>\n<td>Cpu Time/Call</td>\n<td>某函数调用CPU时间与调用次数的比。相当于该函数平均执行时间</td>\n</tr>\n<tr>\n<td>Real Time/Call</td>\n<td>同CPU Time/Call类似,只不过统计单位换成了真实时间</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"上面这些指标中我们经常用到的有\"><a href=\"#上面这些指标中我们经常用到的有\" class=\"headerlink\" title=\"上面这些指标中我们经常用到的有\"></a>上面这些指标中我们经常用到的有</h6><ul>\n<li>Incl Cpu Time 可以用来排序查找比较耗时的逻辑。</li>\n<li>Call+Recur Calls/Total 可以用来查看是否有重复调用的情况，比如：ListView在滑动过程中，是否多次调用getview()。</li>\n<li>Cpu Time/Call 可以用来查看一个方法的平均执行时间，比如：App首次启动过程中某个初始化方法init()执行时间比较长。</li>\n<li>这几个指标可以排序，结合起来排查问题。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"TraceView简介\"><a href=\"#TraceView简介\" class=\"headerlink\" title=\"TraceView简介\"></a>TraceView简介</h2><ul>\n<li>在性能分析和定位过程中，TraceView是使用比较多的一个工具，在遇到APP启动时间过长、界面切换时间比较长以及卡顿的时候，都可以先用TraceView来查看方法调用栈，查看比较耗时的方法以及各个线程的执行情况。</li>\n<li>Traceview是Android平台特有的数据采集和分析工具,它主要用于分析Android中应用程序的性能问题。Traceview本身只是一个数据分析工具,而数据的采集则需要使用Android SDK中的Debug类或者利用DDMS工具。</li>\n</ul>\n<h2 id=\"TraceView的使用\"><a href=\"#TraceView的使用\" class=\"headerlink\" title=\"TraceView的使用\"></a>TraceView的使用</h2><h4 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h4><ul>\n<li>上面提到，数据采集有两种方式，使用Android SDK中的Debug类或者利用DDMS工具，下面就分别介绍下：</li>\n</ul>\n<h5 id=\"Android-SDK中Debug类\"><a href=\"#Android-SDK中Debug类\" class=\"headerlink\" title=\"Android SDK中Debug类\"></a>Android SDK中Debug类</h5><ul>\n<li>开发者在一些关键代码段开始前调用Android SDK中Debug类的startMethodTracing函数,并在关键代码段结束前调用stopMethodTracing函数。这两个函数运行过程中将采集运行时间内该应用所有线程（注意,只能是Java线程）的函数执行情况,并将采集数据保存到/mnt/sdcard/下的一个文件中。</li>\n</ul>\n<h5 id=\"DDMS工具\"><a href=\"#DDMS工具\" class=\"headerlink\" title=\"DDMS工具\"></a>DDMS工具</h5><ul>\n<li>借助Android SDK中的DDMS工具。DDMS可采集系统中某个正在运行的进程的函数调用信息。对开发者而言,此方法适用于没有目标应用源代码的情况。DDMS工具中Traceview的使用如图所示。<br><img src=\"/upload/image/Traceview_ddms.jpg\" alt=\"DDMS_traceView的使用\"></li>\n<li>在对Android4.4以上手机点击TraceView按钮的时候，会出现2中方式的选择对话框，如下图所示：<br><img src=\"/upload/image/traceview_choose.png\" alt=\"TraceView DDMS\"></li>\n<li>Sample based profiling：以固定的频率像VM发送中断,并搜集调用栈信息。低版本手机也是采用该方式来采集样本的,默认是1毫秒采集一次。精确度和采集的频率有关,间隔频率越小会越精确,但运行也会相应的更慢。一般我们默认用1000微秒就足够了。</li>\n<li>Trace based profiling：不论多小的函数,都会跟踪整个函数的执行过程,所以开销也会很大。运行起来会非常的慢,不适合检测滑动性能。</li>\n</ul>\n<h5 id=\"上面两种方式比较\"><a href=\"#上面两种方式比较\" class=\"headerlink\" title=\"上面两种方式比较\"></a>上面两种方式比较</h5><ul>\n<li>使用Android Debug类一般还需要去熟悉代码，且采集到的数据还要pull到本地，然后转换成MAT（参考MAT的使用），使用起来相对麻烦，所以对于测试同学来说DDMS是比较好的方式，但是对于某些场景是需要用Debug类方式来测试的，比如APP首次启动，因为进程还没创建，所以DDMS没法用。</li>\n<li>在做性能分析的过程中,基本都是采用DDMS工具中来启动TraceView,这样简单易用,随便哪个地方的代码都可以跟踪。所以一般测试过程中，我们用DDMS工具的方式比较多。</li>\n</ul>\n<h4 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h4><h5 id=\"初识Traceview界面\"><a href=\"#初识Traceview界面\" class=\"headerlink\" title=\"初识Traceview界面\"></a>初识Traceview界面</h5><ul>\n<li>使用DDMS工具采集数据的方式，暂停之后会自动打开一个分析数据的界面，如下图所示：<img src=\"/upload/image/trace_view_panel.png\" alt=\"TraceView面板\"></li>\n<li>不过需要注意的是，在DDMS工具中打开的Traceview界面中的搜索框是没作用的，你不管输入任何东西也过滤不出来。如果想使用搜索功能（搜索功能其实还挺有用），可以通过 Android SDK tools 下的TraceView命令打开数据采集生成的trace文件（一般存放在C:\\Users\\xxx\\AppData\\Local\\Temp\\xxxx.trace）</li>\n<li>如上图所示，Traceview其UI划分为上下两个面板,即Timeline Panel和Profile Panel。</li>\n<li>Timeline Panel左边是测试数据中所采集的线程信息,右边Pane所示为时间线,时间线上是每个线程测试时间段内所涉及的函数调用信息。内容的丰富代表该时间段执行的函数多,从而可以反应线程的繁忙状态。也可以看出线程的启动时间和结束时间等。开发者可以在时间线Pane中移动时间线纵轴。纵轴上边将显示当前时间点中某线程正在执行的函数信息。</li>\n<li>Profile Panel是Traceview的核心界面,其内涵非常丰富。它主要展示了某个线程（先在Timeline Panel中选择线程）中各个函数调用的情况,包括CPU使用时间、调用次数等信息。而这些信息正是查找性能瓶颈的关键依据。</li>\n<li>两个面板之间是相互联动的，点击下面的函数，可以在时间轴上显示对应的位置（如上图所示，点击draw方法，在时间线main线程上有很多下拉框）。另外在时间线上拉伸可以放大时间线，双击顶部的时间条区域可以缩小原始状态。</li>\n</ul>\n<h5 id=\"Profile-Panel中各列的含义\"><a href=\"#Profile-Panel中各列的含义\" class=\"headerlink\" title=\"Profile Panel中各列的含义\"></a>Profile Panel中各列的含义</h5><ul>\n<li>网上关于这个的介绍非常多，我这里就再搬过来写一遍，省去大家去查找的时间了。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>该线程运行过程中所调用的函数名</td>\n</tr>\n<tr>\n<td>Incl Cpu Time</td>\n<td>某函数占用的CPU时间,包含内部调用其它函数的CPU时间</td>\n</tr>\n<tr>\n<td>Excl Cpu Time</td>\n<td>某函数占用的CPU时间,但不含内部调用其它函数所占用的CPU时间</td>\n</tr>\n<tr>\n<td>Incl Real Time</td>\n<td>某函数运行的真实时间（以毫秒为单位）,内含调用其它函数所占用的真实时间</td>\n</tr>\n<tr>\n<td>Excl Real Time</td>\n<td>数运行的真实时间（以毫秒为单位）,不含调用其它函数所占用的真实时间</td>\n</tr>\n<tr>\n<td>Call+Recur Calls/Total</td>\n<td>某函数被调用次数以及递归调用次数/总调用次数</td>\n</tr>\n<tr>\n<td>Cpu Time/Call</td>\n<td>某函数调用CPU时间与调用次数的比。相当于该函数平均执行时间</td>\n</tr>\n<tr>\n<td>Real Time/Call</td>\n<td>同CPU Time/Call类似,只不过统计单位换成了真实时间</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"上面这些指标中我们经常用到的有\"><a href=\"#上面这些指标中我们经常用到的有\" class=\"headerlink\" title=\"上面这些指标中我们经常用到的有\"></a>上面这些指标中我们经常用到的有</h6><ul>\n<li>Incl Cpu Time 可以用来排序查找比较耗时的逻辑。</li>\n<li>Call+Recur Calls/Total 可以用来查看是否有重复调用的情况，比如：ListView在滑动过程中，是否多次调用getview()。</li>\n<li>Cpu Time/Call 可以用来查看一个方法的平均执行时间，比如：App首次启动过程中某个初始化方法init()执行时间比较长。</li>\n<li>这几个指标可以排序，结合起来排查问题。</li>\n</ul>\n"},{"title":"如何写文章","date":"2016-10-19T04:03:15.000Z","categoriess":"common","_content":"## 搭建环境\n- 因为博客平台是用Hexo + github的方式搭建的，并且以后写文章会频繁的使用到hexo，所以首先需要安装Hexo的环境。\n- Hexo的环境需要以下工具：git、nodejs（hexo是基于nodejs的）、hexo，我们逐一来解释下各个工具安装的要点。\n\n#### git的安装\n- 首先去下载[git](https://git-scm.com/downloads)\n- 然后一步步的安装即可，碰见问题可以Google。\n- 安装完成后记得配置git到PATH（1.%GIT_HOME%\\cmd\\  2. %GIT_HOME%\\usr\\bin 这两个路径都配置下，有用到的命令）\n- git -v 能打印出版本号表示安装成功\n\n#### nodejs的安装\n- 首先下载[nodejs](https://nodejs.org/en/)\n- 然后一步步的安装即可。\n- 将nodejs的根目录配置到PATH\n- node -v 能打印出版本号表示安装成功\n\n#### 认识npm\n- npm是Nodejs的包管理工具（package manager）。需要它是因为我们在使用Hexo时会需要用到其他人写的包JavaScript代码，这个时候可以通过npm install XX来进行安装。\n- nodejs安装好后默认npm也安装好了。\n\n#### 配置和使用GitHub\n- 首先去[GitHub](http://www.github.com/)注册账号。\n- 配置SSH keys\n\n``` bash\n$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n  然后一直回车就行\n$ clip < C:\\Users\\xxxx\\.ssh\\id_rsa.pub\n  将id_rsa.pub文件copy到剪贴板\n$ 登录github，点击右上角 Account Setting -----> SSH Public Keys ---> add another public keys   \n  将剪贴板上的key添加进去  add  key   就ok。\n$ ssh -T git@github.com\n  通过这个命令去测试SSH keys 是否配置成功\n$ git config --global user.name \"cnfeat\"//用户名\n$ git config --global user.email  \"cnfeat@gmail.com\"//填写自己的邮箱\n  设置用户名和邮箱为了不用每次提交代码都得输入\n```\n#### 安装Hexo\n- 通过npm工具安装即可\n\n``` bash\n$ npm install -g hexo\n```\n####　使用Hexo\n```bash\n$ hexo g\n  用于生成对应的静态html文本\n$ hexo s\n  可以用来在本地测试生成的静态html文本是否是正确的\n$ hexo d\n  用来将本地html部署到远程服务端\n```\n## 开始写博客\n#### git clone博客源文件\n```bash\n$ git clone git@github.com:XdjaTesterHome/xdjablogSource.git dir目录\n  dir目录是自己定义存放博客源码的目录（下面称为工作目录）\n```\n\n#### 用hexo本地验证环境是否正确\n```bash\n\n  $ cd 工作目录\n  $ hexo g\n    用于生成静态html文件，然后在本地会创建一个public目录\n  $ hexo s --Debug\n    可以在本地开一个server，便于本地调试。 --debug是为了打印日志，监控错误信息\n    如果没有错误，可以访问http://localhost:4000 本地查看博客内容\n```\n#### 创建新的文章（重点）\n  ```bash\n    前面的工作都是为了写文章服务的，在工作目录执行\n  $ hexo n file_name\n    在source/_posts/下面生成 file_name.md\n  ```\n- 如果文章中用到图片，可以将图片放到 工作目录/source/upload/image/下面，最好新建一个以自己名字命名的目录存放自己的图片，比如我的图片放在工作目录/source/upload/image/zlw/下面。  \n- 在文章中引用图片用想对路径：/upload/image/xxx/xxx.png\n\n#### 编辑md文件\n- 可以写自己想写的任何东西了。\n- markdown语法可以自行Google\n- markdown工具 windows可以体验下Actom，Mac可以用Macdown\n\n#### 发布文章\n- 在发布文章之前，需要有权限，可以联系我 @周利伟 帮你添加下组织权限。github上非得邀请才能加入组织，没办法自己主动申请。\n- 在发布文章之前要更新下源码，避免覆盖别人的文章\n\n  ```bash\n     在工作目录中执行\n     $ git pull\n  ```\n- 我写了个bat批处理文件，可以直接在目录下执行publish.bat 。如果正常执行完成，没有打印错误信息，那么就不用看下面的步骤了。如果出现了错误，还可以按照下面的步骤进行操作，保证能正确发布文章。\n- 如果上面这一步没有成功，那么就继续下面的操作，在dir目录（上面定义的博客源码目录）执行命令\n```bash\n$ hexo g\n$ hexo d\n  注意：hexo d会用到git，所以这里可能会提示你：找不到 git组件之类的（这里的git不等同于我们前面安装的git，是hexo的git组件）\n  解决方法是：执行npm install hexo-deployer-git --save，   之后再执行hexo d即可。\n```\n- 没有提示错误的话，应该就成功了。过10s访问博客地址，就能看到你写的文章了。\n- 最后最重要的一点，一定要提交你写文章的md文件\n```bash\n$ git add .\n$ git commit -m \"新增了一篇文章\"\n$ git push -u origin master\n  这样就将md提交到源码中了。\n  切记一定要提交哦！否则自己的文章可能会被其他同学冲掉\n```\n","source":"_posts/如何写文章.md","raw":"---\ntitle: 如何写文章\ndate: 2016-10-19 12:03:15\ntags: 写博客\ncategoriess: common\n---\n## 搭建环境\n- 因为博客平台是用Hexo + github的方式搭建的，并且以后写文章会频繁的使用到hexo，所以首先需要安装Hexo的环境。\n- Hexo的环境需要以下工具：git、nodejs（hexo是基于nodejs的）、hexo，我们逐一来解释下各个工具安装的要点。\n\n#### git的安装\n- 首先去下载[git](https://git-scm.com/downloads)\n- 然后一步步的安装即可，碰见问题可以Google。\n- 安装完成后记得配置git到PATH（1.%GIT_HOME%\\cmd\\  2. %GIT_HOME%\\usr\\bin 这两个路径都配置下，有用到的命令）\n- git -v 能打印出版本号表示安装成功\n\n#### nodejs的安装\n- 首先下载[nodejs](https://nodejs.org/en/)\n- 然后一步步的安装即可。\n- 将nodejs的根目录配置到PATH\n- node -v 能打印出版本号表示安装成功\n\n#### 认识npm\n- npm是Nodejs的包管理工具（package manager）。需要它是因为我们在使用Hexo时会需要用到其他人写的包JavaScript代码，这个时候可以通过npm install XX来进行安装。\n- nodejs安装好后默认npm也安装好了。\n\n#### 配置和使用GitHub\n- 首先去[GitHub](http://www.github.com/)注册账号。\n- 配置SSH keys\n\n``` bash\n$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n  然后一直回车就行\n$ clip < C:\\Users\\xxxx\\.ssh\\id_rsa.pub\n  将id_rsa.pub文件copy到剪贴板\n$ 登录github，点击右上角 Account Setting -----> SSH Public Keys ---> add another public keys   \n  将剪贴板上的key添加进去  add  key   就ok。\n$ ssh -T git@github.com\n  通过这个命令去测试SSH keys 是否配置成功\n$ git config --global user.name \"cnfeat\"//用户名\n$ git config --global user.email  \"cnfeat@gmail.com\"//填写自己的邮箱\n  设置用户名和邮箱为了不用每次提交代码都得输入\n```\n#### 安装Hexo\n- 通过npm工具安装即可\n\n``` bash\n$ npm install -g hexo\n```\n####　使用Hexo\n```bash\n$ hexo g\n  用于生成对应的静态html文本\n$ hexo s\n  可以用来在本地测试生成的静态html文本是否是正确的\n$ hexo d\n  用来将本地html部署到远程服务端\n```\n## 开始写博客\n#### git clone博客源文件\n```bash\n$ git clone git@github.com:XdjaTesterHome/xdjablogSource.git dir目录\n  dir目录是自己定义存放博客源码的目录（下面称为工作目录）\n```\n\n#### 用hexo本地验证环境是否正确\n```bash\n\n  $ cd 工作目录\n  $ hexo g\n    用于生成静态html文件，然后在本地会创建一个public目录\n  $ hexo s --Debug\n    可以在本地开一个server，便于本地调试。 --debug是为了打印日志，监控错误信息\n    如果没有错误，可以访问http://localhost:4000 本地查看博客内容\n```\n#### 创建新的文章（重点）\n  ```bash\n    前面的工作都是为了写文章服务的，在工作目录执行\n  $ hexo n file_name\n    在source/_posts/下面生成 file_name.md\n  ```\n- 如果文章中用到图片，可以将图片放到 工作目录/source/upload/image/下面，最好新建一个以自己名字命名的目录存放自己的图片，比如我的图片放在工作目录/source/upload/image/zlw/下面。  \n- 在文章中引用图片用想对路径：/upload/image/xxx/xxx.png\n\n#### 编辑md文件\n- 可以写自己想写的任何东西了。\n- markdown语法可以自行Google\n- markdown工具 windows可以体验下Actom，Mac可以用Macdown\n\n#### 发布文章\n- 在发布文章之前，需要有权限，可以联系我 @周利伟 帮你添加下组织权限。github上非得邀请才能加入组织，没办法自己主动申请。\n- 在发布文章之前要更新下源码，避免覆盖别人的文章\n\n  ```bash\n     在工作目录中执行\n     $ git pull\n  ```\n- 我写了个bat批处理文件，可以直接在目录下执行publish.bat 。如果正常执行完成，没有打印错误信息，那么就不用看下面的步骤了。如果出现了错误，还可以按照下面的步骤进行操作，保证能正确发布文章。\n- 如果上面这一步没有成功，那么就继续下面的操作，在dir目录（上面定义的博客源码目录）执行命令\n```bash\n$ hexo g\n$ hexo d\n  注意：hexo d会用到git，所以这里可能会提示你：找不到 git组件之类的（这里的git不等同于我们前面安装的git，是hexo的git组件）\n  解决方法是：执行npm install hexo-deployer-git --save，   之后再执行hexo d即可。\n```\n- 没有提示错误的话，应该就成功了。过10s访问博客地址，就能看到你写的文章了。\n- 最后最重要的一点，一定要提交你写文章的md文件\n```bash\n$ git add .\n$ git commit -m \"新增了一篇文章\"\n$ git push -u origin master\n  这样就将md提交到源码中了。\n  切记一定要提交哦！否则自己的文章可能会被其他同学冲掉\n```\n","slug":"如何写文章","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngd000j0cwl7aadvlpz","content":"<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><ul>\n<li>因为博客平台是用Hexo + github的方式搭建的，并且以后写文章会频繁的使用到hexo，所以首先需要安装Hexo的环境。</li>\n<li>Hexo的环境需要以下工具：git、nodejs（hexo是基于nodejs的）、hexo，我们逐一来解释下各个工具安装的要点。</li>\n</ul>\n<h4 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h4><ul>\n<li>首先去下载<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">git</a></li>\n<li>然后一步步的安装即可，碰见问题可以Google。</li>\n<li>安装完成后记得配置git到PATH（1.%GIT_HOME%\\cmd\\  2. %GIT_HOME%\\usr\\bin 这两个路径都配置下，有用到的命令）</li>\n<li>git -v 能打印出版本号表示安装成功</li>\n</ul>\n<h4 id=\"nodejs的安装\"><a href=\"#nodejs的安装\" class=\"headerlink\" title=\"nodejs的安装\"></a>nodejs的安装</h4><ul>\n<li>首先下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodejs</a></li>\n<li>然后一步步的安装即可。</li>\n<li>将nodejs的根目录配置到PATH</li>\n<li>node -v 能打印出版本号表示安装成功</li>\n</ul>\n<h4 id=\"认识npm\"><a href=\"#认识npm\" class=\"headerlink\" title=\"认识npm\"></a>认识npm</h4><ul>\n<li>npm是Nodejs的包管理工具（package manager）。需要它是因为我们在使用Hexo时会需要用到其他人写的包JavaScript代码，这个时候可以通过npm install XX来进行安装。</li>\n<li>nodejs安装好后默认npm也安装好了。</li>\n</ul>\n<h4 id=\"配置和使用GitHub\"><a href=\"#配置和使用GitHub\" class=\"headerlink\" title=\"配置和使用GitHub\"></a>配置和使用GitHub</h4><ul>\n<li>首先去<a href=\"http://www.github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>注册账号。</li>\n<li>配置SSH keys</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></div><div class=\"line\">  然后一直回车就行</div><div class=\"line\">$ clip &lt; C:\\Users\\xxxx\\.ssh\\id_rsa.pub</div><div class=\"line\">  将id_rsa.pub文件copy到剪贴板</div><div class=\"line\">$ 登录github，点击右上角 Account Setting -----&gt; SSH Public Keys ---&gt; add another public keys   </div><div class=\"line\">  将剪贴板上的key添加进去  add  key   就ok。</div><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">  通过这个命令去测试SSH keys 是否配置成功</div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"cnfeat\"</span>//用户名</div><div class=\"line\">$ git config --global user.email  <span class=\"string\">\"cnfeat@gmail.com\"</span>//填写自己的邮箱</div><div class=\"line\">  设置用户名和邮箱为了不用每次提交代码都得输入</div></pre></td></tr></table></figure>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><ul>\n<li>通过npm工具安装即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure>\n<p>####　使用Hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">  用于生成对应的静态html文本</div><div class=\"line\">$ hexo s</div><div class=\"line\">  可以用来在本地测试生成的静态html文本是否是正确的</div><div class=\"line\">$ hexo d</div><div class=\"line\">  用来将本地html部署到远程服务端</div></pre></td></tr></table></figure></p>\n<h2 id=\"开始写博客\"><a href=\"#开始写博客\" class=\"headerlink\" title=\"开始写博客\"></a>开始写博客</h2><h4 id=\"git-clone博客源文件\"><a href=\"#git-clone博客源文件\" class=\"headerlink\" title=\"git clone博客源文件\"></a>git clone博客源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:XdjaTesterHome/xdjablogSource.git dir目录</div><div class=\"line\">  dir目录是自己定义存放博客源码的目录（下面称为工作目录）</div></pre></td></tr></table></figure>\n<h4 id=\"用hexo本地验证环境是否正确\"><a href=\"#用hexo本地验证环境是否正确\" class=\"headerlink\" title=\"用hexo本地验证环境是否正确\"></a>用hexo本地验证环境是否正确</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> 工作目录</div><div class=\"line\">$ hexo g</div><div class=\"line\">  用于生成静态html文件，然后在本地会创建一个public目录</div><div class=\"line\">$ hexo s --Debug</div><div class=\"line\">  可以在本地开一个server，便于本地调试。 --debug是为了打印日志，监控错误信息</div><div class=\"line\">  如果没有错误，可以访问http://localhost:4000 本地查看博客内容</div></pre></td></tr></table></figure>\n<h4 id=\"创建新的文章（重点）\"><a href=\"#创建新的文章（重点）\" class=\"headerlink\" title=\"创建新的文章（重点）\"></a>创建新的文章（重点）</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  前面的工作都是为了写文章服务的，在工作目录执行</div><div class=\"line\">$ hexo n file_name</div><div class=\"line\">  在<span class=\"built_in\">source</span>/_posts/下面生成 file_name.md</div></pre></td></tr></table></figure>\n<ul>\n<li>如果文章中用到图片，可以将图片放到 工作目录/source/upload/image/下面，最好新建一个以自己名字命名的目录存放自己的图片，比如我的图片放在工作目录/source/upload/image/zlw/下面。  </li>\n<li>在文章中引用图片用想对路径：/upload/image/xxx/xxx.png</li>\n</ul>\n<h4 id=\"编辑md文件\"><a href=\"#编辑md文件\" class=\"headerlink\" title=\"编辑md文件\"></a>编辑md文件</h4><ul>\n<li>可以写自己想写的任何东西了。</li>\n<li>markdown语法可以自行Google</li>\n<li>markdown工具 windows可以体验下Actom，Mac可以用Macdown</li>\n</ul>\n<h4 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h4><ul>\n<li>在发布文章之前，需要有权限，可以联系我 @周利伟 帮你添加下组织权限。github上非得邀请才能加入组织，没办法自己主动申请。</li>\n<li><p>在发布文章之前要更新下源码，避免覆盖别人的文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在工作目录中执行</div><div class=\"line\">$ git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>我写了个bat批处理文件，可以直接在目录下执行publish.bat 。如果正常执行完成，没有打印错误信息，那么就不用看下面的步骤了。如果出现了错误，还可以按照下面的步骤进行操作，保证能正确发布文章。</p>\n</li>\n<li><p>如果上面这一步没有成功，那么就继续下面的操作，在dir目录（上面定义的博客源码目录）执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div><div class=\"line\">  注意：hexo d会用到git，所以这里可能会提示你：找不到 git组件之类的（这里的git不等同于我们前面安装的git，是hexo的git组件）</div><div class=\"line\">  解决方法是：执行npm install hexo-deployer-git --save，   之后再执行hexo d即可。</div></pre></td></tr></table></figure>\n</li>\n<li><p>没有提示错误的话，应该就成功了。过10s访问博客地址，就能看到你写的文章了。</p>\n</li>\n<li>最后最重要的一点，一定要提交你写文章的md文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">\"新增了一篇文章\"</span></div><div class=\"line\">$ git push -u origin master</div><div class=\"line\">  这样就将md提交到源码中了。</div><div class=\"line\">  切记一定要提交哦！否则自己的文章可能会被其他同学冲掉</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><ul>\n<li>因为博客平台是用Hexo + github的方式搭建的，并且以后写文章会频繁的使用到hexo，所以首先需要安装Hexo的环境。</li>\n<li>Hexo的环境需要以下工具：git、nodejs（hexo是基于nodejs的）、hexo，我们逐一来解释下各个工具安装的要点。</li>\n</ul>\n<h4 id=\"git的安装\"><a href=\"#git的安装\" class=\"headerlink\" title=\"git的安装\"></a>git的安装</h4><ul>\n<li>首先去下载<a href=\"https://git-scm.com/downloads\">git</a></li>\n<li>然后一步步的安装即可，碰见问题可以Google。</li>\n<li>安装完成后记得配置git到PATH（1.%GIT_HOME%\\cmd\\  2. %GIT_HOME%\\usr\\bin 这两个路径都配置下，有用到的命令）</li>\n<li>git -v 能打印出版本号表示安装成功</li>\n</ul>\n<h4 id=\"nodejs的安装\"><a href=\"#nodejs的安装\" class=\"headerlink\" title=\"nodejs的安装\"></a>nodejs的安装</h4><ul>\n<li>首先下载<a href=\"https://nodejs.org/en/\">nodejs</a></li>\n<li>然后一步步的安装即可。</li>\n<li>将nodejs的根目录配置到PATH</li>\n<li>node -v 能打印出版本号表示安装成功</li>\n</ul>\n<h4 id=\"认识npm\"><a href=\"#认识npm\" class=\"headerlink\" title=\"认识npm\"></a>认识npm</h4><ul>\n<li>npm是Nodejs的包管理工具（package manager）。需要它是因为我们在使用Hexo时会需要用到其他人写的包JavaScript代码，这个时候可以通过npm install XX来进行安装。</li>\n<li>nodejs安装好后默认npm也安装好了。</li>\n</ul>\n<h4 id=\"配置和使用GitHub\"><a href=\"#配置和使用GitHub\" class=\"headerlink\" title=\"配置和使用GitHub\"></a>配置和使用GitHub</h4><ul>\n<li>首先去<a href=\"http://www.github.com/\">GitHub</a>注册账号。</li>\n<li>配置SSH keys</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></div><div class=\"line\">  然后一直回车就行</div><div class=\"line\">$ clip &lt; C:\\Users\\xxxx\\.ssh\\id_rsa.pub</div><div class=\"line\">  将id_rsa.pub文件copy到剪贴板</div><div class=\"line\">$ 登录github，点击右上角 Account Setting -----&gt; SSH Public Keys ---&gt; add another public keys   </div><div class=\"line\">  将剪贴板上的key添加进去  add  key   就ok。</div><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">  通过这个命令去测试SSH keys 是否配置成功</div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"cnfeat\"</span>//用户名</div><div class=\"line\">$ git config --global user.email  <span class=\"string\">\"cnfeat@gmail.com\"</span>//填写自己的邮箱</div><div class=\"line\">  设置用户名和邮箱为了不用每次提交代码都得输入</div></pre></td></tr></table></figure>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><ul>\n<li>通过npm工具安装即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure>\n<p>####　使用Hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">  用于生成对应的静态html文本</div><div class=\"line\">$ hexo s</div><div class=\"line\">  可以用来在本地测试生成的静态html文本是否是正确的</div><div class=\"line\">$ hexo d</div><div class=\"line\">  用来将本地html部署到远程服务端</div></pre></td></tr></table></figure></p>\n<h2 id=\"开始写博客\"><a href=\"#开始写博客\" class=\"headerlink\" title=\"开始写博客\"></a>开始写博客</h2><h4 id=\"git-clone博客源文件\"><a href=\"#git-clone博客源文件\" class=\"headerlink\" title=\"git clone博客源文件\"></a>git clone博客源文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:XdjaTesterHome/xdjablogSource.git dir目录</div><div class=\"line\">  dir目录是自己定义存放博客源码的目录（下面称为工作目录）</div></pre></td></tr></table></figure>\n<h4 id=\"用hexo本地验证环境是否正确\"><a href=\"#用hexo本地验证环境是否正确\" class=\"headerlink\" title=\"用hexo本地验证环境是否正确\"></a>用hexo本地验证环境是否正确</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> 工作目录</div><div class=\"line\">$ hexo g</div><div class=\"line\">  用于生成静态html文件，然后在本地会创建一个public目录</div><div class=\"line\">$ hexo s --Debug</div><div class=\"line\">  可以在本地开一个server，便于本地调试。 --debug是为了打印日志，监控错误信息</div><div class=\"line\">  如果没有错误，可以访问http://localhost:4000 本地查看博客内容</div></pre></td></tr></table></figure>\n<h4 id=\"创建新的文章（重点）\"><a href=\"#创建新的文章（重点）\" class=\"headerlink\" title=\"创建新的文章（重点）\"></a>创建新的文章（重点）</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  前面的工作都是为了写文章服务的，在工作目录执行</div><div class=\"line\">$ hexo n file_name</div><div class=\"line\">  在<span class=\"built_in\">source</span>/_posts/下面生成 file_name.md</div></pre></td></tr></table></figure>\n<ul>\n<li>如果文章中用到图片，可以将图片放到 工作目录/source/upload/image/下面，最好新建一个以自己名字命名的目录存放自己的图片，比如我的图片放在工作目录/source/upload/image/zlw/下面。  </li>\n<li>在文章中引用图片用想对路径：/upload/image/xxx/xxx.png</li>\n</ul>\n<h4 id=\"编辑md文件\"><a href=\"#编辑md文件\" class=\"headerlink\" title=\"编辑md文件\"></a>编辑md文件</h4><ul>\n<li>可以写自己想写的任何东西了。</li>\n<li>markdown语法可以自行Google</li>\n<li>markdown工具 windows可以体验下Actom，Mac可以用Macdown</li>\n</ul>\n<h4 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h4><ul>\n<li>在发布文章之前，需要有权限，可以联系我 @周利伟 帮你添加下组织权限。github上非得邀请才能加入组织，没办法自己主动申请。</li>\n<li><p>在发布文章之前要更新下源码，避免覆盖别人的文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在工作目录中执行</div><div class=\"line\">$ git pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>我写了个bat批处理文件，可以直接在目录下执行publish.bat 。如果正常执行完成，没有打印错误信息，那么就不用看下面的步骤了。如果出现了错误，还可以按照下面的步骤进行操作，保证能正确发布文章。</p>\n</li>\n<li><p>如果上面这一步没有成功，那么就继续下面的操作，在dir目录（上面定义的博客源码目录）执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div><div class=\"line\">  注意：hexo d会用到git，所以这里可能会提示你：找不到 git组件之类的（这里的git不等同于我们前面安装的git，是hexo的git组件）</div><div class=\"line\">  解决方法是：执行npm install hexo-deployer-git --save，   之后再执行hexo d即可。</div></pre></td></tr></table></figure>\n</li>\n<li><p>没有提示错误的话，应该就成功了。过10s访问博客地址，就能看到你写的文章了。</p>\n</li>\n<li>最后最重要的一点，一定要提交你写文章的md文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">\"新增了一篇文章\"</span></div><div class=\"line\">$ git push -u origin master</div><div class=\"line\">  这样就将md提交到源码中了。</div><div class=\"line\">  切记一定要提交哦！否则自己的文章可能会被其他同学冲掉</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"移动APP耗电量&功耗测试，应该如何开展？","date":"2016-11-03T05:48:58.000Z","_content":"---\n\n     移动APP功耗测试如何开展？我们通过什么工具进行移动APP的功耗测试？\n一、耗电测试工具和方法：1、使用功耗仪器进行安卓系统和安卓系统APP的功耗测试，测试结果是APP+系统的总耗电量；但是我们可以通过系统总耗电量的大小来判断APP耗电量是否达标，这是我们的目的。\n     首先我们了解下系统耗电与那些模块相关：硬件方面，1、lcd、蓝牙、WIFI、网络模块（2G/3G/4G）,BP等；软件方面：1、系统服务、常住服务、对网络数据操作是否频繁；以上因素是影响耗电的根本因素。\n     \n二、耗电量测试对APP的执行标准\n     如何来判断一个应用是过于耗电的，首先我们在使用功耗仪器测试的过程中，影响平均电流的因素有：1、基准底电。2、心跳频繁程度。3、毛刺的大小和数量。4、应用是否有额外的常驻服务。其中2和3主要是对网络的操作，对功耗影响也最为常见。\n     对于测试的APP耗电是否pass，通常情况下按照如下标准定义：\n     1、安装被测试应用后，系统耗电平均电流无明显增加；（如灭屏待机耗电在5——10mA;亮屏待机平均电流在：180——230mA;注意每款机器的情况略有不同，需要针对所测机型根据测试结果定义）\n     2、操作被测APP主要业务后，灭屏待机和亮屏待机不能有明显过高的电量消耗。（如操作业务后，系统不能正常进行待机）\n     3、被测APP不能有不合理的常驻服务，造成耗电持续偏高。\n     实际遇到的常见问题\n     如我在接触并使用功耗仪器：3年左右时间，遇到的在测试软件方面的问题：\n     1、操作主要业务后，灭屏无法进入待机，灭屏电流在150mA左右，网络模块无法进入休眠。\n     2、灭屏情况下，接受被动业务，如消息或者推送，连续接收后，网络模块一直处于较高耗电中，无法休眠。（联通4G的网络模块电流一般在150mA左右，移动4G或者联通3G/2G情况下的网络模块电流是不一样的，需要你自己实践测试得出参考数值。）\n     3、亮屏4g情况下，网络模块一直处于工作状态，耗电持续高达350mA左右，对于这种问题是一定需要优化的。\n     下面看图：这是一个后台有常驻服务的情况，直接灭屏底电高达14.4mA；正常情况下是4mA左右。\n     正常情况下灭屏耗电：\n     ![down_start](/upload/image/lzz/down.JPG)\n     异常情况下灭屏耗电：\n     ![error_start](/upload/image/lzz/down-error.JPG)\n     通过对比发现，2次的结果虽然都是在灭屏情况下测试的，但实际差异比较大，通过亮屏查看手机系统的情况，发现下拉通知栏，XXX应用有一条消息通知服务：XXX应用应用有新的版本，请及时更新。。。\n     这就说明应用有一条服务处于常驻进程中，及时在灭屏情况下也在工作中，这是不允许的，因为造成了多于10mA左右的额外耗电。\n三、移动APP功耗测试问题常见分析，功耗仪器测试波形图分析：\n     1、首先测试功耗的时候，我们会关注网络心跳和毛刺，因为太多的网络心跳和网络操作必然造成较高的耗电，而这种高耗电又是APP引起的，那么我们不得不进行优化。\n     （1）、使用adb命令获取应用的网络心跳情况：\n     adb shell dumpsys alarm \n     具体使用方法是，dumpsys出来测试开始和结束时的alarm数据，并查找到用户进程的wakeups数据，前后相减获得这段时间应用的唤醒次数和时间。\n     下面是20分钟测试的alarm数据：\n     开始的数据：\n     ![alarm_start](/upload/image/lzz/wakeup1.JPG)\n     20min后的测试数据：\n     ![alarm_over](/upload/image/lzz/wakeup2.JPG)\n     通过2次测试结果我们发现：\n     1、com.xdja.actoma的wakeups次数为：6次（13-7=6）\n     2、com.xdja.HDsafeemailclient次数为：5次\n     3、com.xdja.xpush次数为：3次\n     再仔细查看图片上alarm数据：如第一个安通+，共有2个可以引起心跳的行为：如1、com.xdja.csipsimple.pj_timer ;2、com.xdja.alarm.action；通过alarm数据可以清楚的看到这段时间引发心跳的正是com.xdja.alarm.action，推送方面的业务，较log排查问题更加直观易懂。\n     请看下面图片测试的数据，我以安通+应用作为实例进行分析：\n     ![down_start_20](/upload/image/lzz/down-20min.JPG)\n     另外我们通过对功耗仪器测试的这段时间：20min数据抓取aplog进行分析后；发现与上面dumpsys alarm抓取的这段时间wakeups数据是一致的。\n     如：上图的标注：安通+引起了6次网络心跳；xpush引起了3次，上图中标注了2出，因为功耗数据图提前截取了，所以有一次没有截取到；而com.xdja.HDsafeemailclient引起了5次毛刺，为什么不是网络心跳，因为我把手机中这个安全邮件应用给停用了，所以服务无法起来，只能是引起毛刺这样的电流变化；\n     部分log参考如下，通过log我们可以看到用户应用这段时间做了哪些操作，为什么会导致电流变化。\n     如安通+引发的网络心跳，实际上是推送业务：\n     ![actoma](/upload/image/lzz/actoma.JPG)\n     如xpush引发的网络操作：\n     ![xpush](/upload/image/lzz/xpush-wakeups.JPG)\n     综上所述：对于测试同一个应用功耗的时候，我们在测试的过程中，应该同时抓取log信心，这样在拿到电流变化的数据的时候，对比log查看分析一下心跳和毛刺，哪些是属于我们要测试的应用的数据，而这个数据是否处于正常水平；因为功耗仪器测试的是整体的数据，我们首先要排除其他应用心跳和毛刺带来的高耗电；拿到单个应用20min中的心跳数据，才方便我们与后面版本做相同场景下对比测试，使得测试数据更加精准。\n     四、耗电测试测试场景\n     通过三我们小结一下耗电测试的分析方法：1、功耗仪器测试一段时间的数据变化图样和耗电量平均值数据；2、通过查看log，获取心跳和毛刺的变化情况，哪些属于被测应用的，哪些属于其他应用的，哪些属于系统自身的；3、通过alarm 属于获取这段时间wakeups属于，辅助我们功耗仪器测试的耗电结果，准确定位问题所在。\n     移动APP耗电测试场景和范围：\n     1、通过adb shell dumpsys alarm 测试应用后台从有网络进入无网络情况下的wakeups唤醒数据，并对比同款机型如QQ、微信做对比测试。（为什么做对比？因为有的手机功能差异比较大，比如有的支持VoIP功能，有的手机就不支持；而这个VoIP功能对耗电影响很大，涉及到通讯模块。）\n     2、通过功耗仪器测试：后台应用待机情况下无业务和有业务下的耗电。\n     3、操作主要功能和业务，查看手机是否能正常进入待机，待机后电流是否处于正常水平。\n     4、操作应用升级的业务和通知栏推送，查看是否有常驻进程，造成应用额外耗电或者底电较高的情况。\n     \n\n\n----------\n如果你觉得这篇文章对你很有标注的话，请打赏我们，谢谢支持。。。\n\n![gaveme](/upload/image/lzz/giveme.jpg)\n     \n     \n     \n     \n\n\n\n\n","source":"_posts/移动APP耗电量&功耗测试，应该如何开展？.md","raw":"---\ntitle: 移动APP耗电量&功耗测试，应该如何开展？\ndate: 2016-11-3 13:48:58\ntags: APP性能测试 耗电量 功耗 功耗仪器 内存 CPU 流量 应用启动 专项测试 功耗仪耗电分析 客户端性能测试\ncategories: 实例分析\n---\n---\n\n     移动APP功耗测试如何开展？我们通过什么工具进行移动APP的功耗测试？\n一、耗电测试工具和方法：1、使用功耗仪器进行安卓系统和安卓系统APP的功耗测试，测试结果是APP+系统的总耗电量；但是我们可以通过系统总耗电量的大小来判断APP耗电量是否达标，这是我们的目的。\n     首先我们了解下系统耗电与那些模块相关：硬件方面，1、lcd、蓝牙、WIFI、网络模块（2G/3G/4G）,BP等；软件方面：1、系统服务、常住服务、对网络数据操作是否频繁；以上因素是影响耗电的根本因素。\n     \n二、耗电量测试对APP的执行标准\n     如何来判断一个应用是过于耗电的，首先我们在使用功耗仪器测试的过程中，影响平均电流的因素有：1、基准底电。2、心跳频繁程度。3、毛刺的大小和数量。4、应用是否有额外的常驻服务。其中2和3主要是对网络的操作，对功耗影响也最为常见。\n     对于测试的APP耗电是否pass，通常情况下按照如下标准定义：\n     1、安装被测试应用后，系统耗电平均电流无明显增加；（如灭屏待机耗电在5——10mA;亮屏待机平均电流在：180——230mA;注意每款机器的情况略有不同，需要针对所测机型根据测试结果定义）\n     2、操作被测APP主要业务后，灭屏待机和亮屏待机不能有明显过高的电量消耗。（如操作业务后，系统不能正常进行待机）\n     3、被测APP不能有不合理的常驻服务，造成耗电持续偏高。\n     实际遇到的常见问题\n     如我在接触并使用功耗仪器：3年左右时间，遇到的在测试软件方面的问题：\n     1、操作主要业务后，灭屏无法进入待机，灭屏电流在150mA左右，网络模块无法进入休眠。\n     2、灭屏情况下，接受被动业务，如消息或者推送，连续接收后，网络模块一直处于较高耗电中，无法休眠。（联通4G的网络模块电流一般在150mA左右，移动4G或者联通3G/2G情况下的网络模块电流是不一样的，需要你自己实践测试得出参考数值。）\n     3、亮屏4g情况下，网络模块一直处于工作状态，耗电持续高达350mA左右，对于这种问题是一定需要优化的。\n     下面看图：这是一个后台有常驻服务的情况，直接灭屏底电高达14.4mA；正常情况下是4mA左右。\n     正常情况下灭屏耗电：\n     ![down_start](/upload/image/lzz/down.JPG)\n     异常情况下灭屏耗电：\n     ![error_start](/upload/image/lzz/down-error.JPG)\n     通过对比发现，2次的结果虽然都是在灭屏情况下测试的，但实际差异比较大，通过亮屏查看手机系统的情况，发现下拉通知栏，XXX应用有一条消息通知服务：XXX应用应用有新的版本，请及时更新。。。\n     这就说明应用有一条服务处于常驻进程中，及时在灭屏情况下也在工作中，这是不允许的，因为造成了多于10mA左右的额外耗电。\n三、移动APP功耗测试问题常见分析，功耗仪器测试波形图分析：\n     1、首先测试功耗的时候，我们会关注网络心跳和毛刺，因为太多的网络心跳和网络操作必然造成较高的耗电，而这种高耗电又是APP引起的，那么我们不得不进行优化。\n     （1）、使用adb命令获取应用的网络心跳情况：\n     adb shell dumpsys alarm \n     具体使用方法是，dumpsys出来测试开始和结束时的alarm数据，并查找到用户进程的wakeups数据，前后相减获得这段时间应用的唤醒次数和时间。\n     下面是20分钟测试的alarm数据：\n     开始的数据：\n     ![alarm_start](/upload/image/lzz/wakeup1.JPG)\n     20min后的测试数据：\n     ![alarm_over](/upload/image/lzz/wakeup2.JPG)\n     通过2次测试结果我们发现：\n     1、com.xdja.actoma的wakeups次数为：6次（13-7=6）\n     2、com.xdja.HDsafeemailclient次数为：5次\n     3、com.xdja.xpush次数为：3次\n     再仔细查看图片上alarm数据：如第一个安通+，共有2个可以引起心跳的行为：如1、com.xdja.csipsimple.pj_timer ;2、com.xdja.alarm.action；通过alarm数据可以清楚的看到这段时间引发心跳的正是com.xdja.alarm.action，推送方面的业务，较log排查问题更加直观易懂。\n     请看下面图片测试的数据，我以安通+应用作为实例进行分析：\n     ![down_start_20](/upload/image/lzz/down-20min.JPG)\n     另外我们通过对功耗仪器测试的这段时间：20min数据抓取aplog进行分析后；发现与上面dumpsys alarm抓取的这段时间wakeups数据是一致的。\n     如：上图的标注：安通+引起了6次网络心跳；xpush引起了3次，上图中标注了2出，因为功耗数据图提前截取了，所以有一次没有截取到；而com.xdja.HDsafeemailclient引起了5次毛刺，为什么不是网络心跳，因为我把手机中这个安全邮件应用给停用了，所以服务无法起来，只能是引起毛刺这样的电流变化；\n     部分log参考如下，通过log我们可以看到用户应用这段时间做了哪些操作，为什么会导致电流变化。\n     如安通+引发的网络心跳，实际上是推送业务：\n     ![actoma](/upload/image/lzz/actoma.JPG)\n     如xpush引发的网络操作：\n     ![xpush](/upload/image/lzz/xpush-wakeups.JPG)\n     综上所述：对于测试同一个应用功耗的时候，我们在测试的过程中，应该同时抓取log信心，这样在拿到电流变化的数据的时候，对比log查看分析一下心跳和毛刺，哪些是属于我们要测试的应用的数据，而这个数据是否处于正常水平；因为功耗仪器测试的是整体的数据，我们首先要排除其他应用心跳和毛刺带来的高耗电；拿到单个应用20min中的心跳数据，才方便我们与后面版本做相同场景下对比测试，使得测试数据更加精准。\n     四、耗电测试测试场景\n     通过三我们小结一下耗电测试的分析方法：1、功耗仪器测试一段时间的数据变化图样和耗电量平均值数据；2、通过查看log，获取心跳和毛刺的变化情况，哪些属于被测应用的，哪些属于其他应用的，哪些属于系统自身的；3、通过alarm 属于获取这段时间wakeups属于，辅助我们功耗仪器测试的耗电结果，准确定位问题所在。\n     移动APP耗电测试场景和范围：\n     1、通过adb shell dumpsys alarm 测试应用后台从有网络进入无网络情况下的wakeups唤醒数据，并对比同款机型如QQ、微信做对比测试。（为什么做对比？因为有的手机功能差异比较大，比如有的支持VoIP功能，有的手机就不支持；而这个VoIP功能对耗电影响很大，涉及到通讯模块。）\n     2、通过功耗仪器测试：后台应用待机情况下无业务和有业务下的耗电。\n     3、操作主要功能和业务，查看手机是否能正常进入待机，待机后电流是否处于正常水平。\n     4、操作应用升级的业务和通知栏推送，查看是否有常驻进程，造成应用额外耗电或者底电较高的情况。\n     \n\n\n----------\n如果你觉得这篇文章对你很有标注的话，请打赏我们，谢谢支持。。。\n\n![gaveme](/upload/image/lzz/giveme.jpg)\n     \n     \n     \n     \n\n\n\n\n","slug":"移动APP耗电量&功耗测试，应该如何开展？","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngd000m0cwlwbgbyrse","content":"<hr>\n<pre><code>移动APP功耗测试如何开展？我们通过什么工具进行移动APP的功耗测试？\n</code></pre><p>一、耗电测试工具和方法：1、使用功耗仪器进行安卓系统和安卓系统APP的功耗测试，测试结果是APP+系统的总耗电量；但是我们可以通过系统总耗电量的大小来判断APP耗电量是否达标，这是我们的目的。<br>     首先我们了解下系统耗电与那些模块相关：硬件方面，1、lcd、蓝牙、WIFI、网络模块（2G/3G/4G）,BP等；软件方面：1、系统服务、常住服务、对网络数据操作是否频繁；以上因素是影响耗电的根本因素。</p>\n<p>二、耗电量测试对APP的执行标准<br>     如何来判断一个应用是过于耗电的，首先我们在使用功耗仪器测试的过程中，影响平均电流的因素有：1、基准底电。2、心跳频繁程度。3、毛刺的大小和数量。4、应用是否有额外的常驻服务。其中2和3主要是对网络的操作，对功耗影响也最为常见。<br>     对于测试的APP耗电是否pass，通常情况下按照如下标准定义：<br>     1、安装被测试应用后，系统耗电平均电流无明显增加；（如灭屏待机耗电在5——10mA;亮屏待机平均电流在：180——230mA;注意每款机器的情况略有不同，需要针对所测机型根据测试结果定义）<br>     2、操作被测APP主要业务后，灭屏待机和亮屏待机不能有明显过高的电量消耗。（如操作业务后，系统不能正常进行待机）<br>     3、被测APP不能有不合理的常驻服务，造成耗电持续偏高。<br>     实际遇到的常见问题<br>     如我在接触并使用功耗仪器：3年左右时间，遇到的在测试软件方面的问题：<br>     1、操作主要业务后，灭屏无法进入待机，灭屏电流在150mA左右，网络模块无法进入休眠。<br>     2、灭屏情况下，接受被动业务，如消息或者推送，连续接收后，网络模块一直处于较高耗电中，无法休眠。（联通4G的网络模块电流一般在150mA左右，移动4G或者联通3G/2G情况下的网络模块电流是不一样的，需要你自己实践测试得出参考数值。）<br>     3、亮屏4g情况下，网络模块一直处于工作状态，耗电持续高达350mA左右，对于这种问题是一定需要优化的。<br>     下面看图：这是一个后台有常驻服务的情况，直接灭屏底电高达14.4mA；正常情况下是4mA左右。<br>     正常情况下灭屏耗电：<br>     <img src=\"/upload/image/lzz/down.JPG\" alt=\"down_start\"><br>     异常情况下灭屏耗电：<br>     <img src=\"/upload/image/lzz/down-error.JPG\" alt=\"error_start\"><br>     通过对比发现，2次的结果虽然都是在灭屏情况下测试的，但实际差异比较大，通过亮屏查看手机系统的情况，发现下拉通知栏，XXX应用有一条消息通知服务：XXX应用应用有新的版本，请及时更新。。。<br>     这就说明应用有一条服务处于常驻进程中，及时在灭屏情况下也在工作中，这是不允许的，因为造成了多于10mA左右的额外耗电。<br>三、移动APP功耗测试问题常见分析，功耗仪器测试波形图分析：<br>     1、首先测试功耗的时候，我们会关注网络心跳和毛刺，因为太多的网络心跳和网络操作必然造成较高的耗电，而这种高耗电又是APP引起的，那么我们不得不进行优化。<br>     （1）、使用adb命令获取应用的网络心跳情况：<br>     adb shell dumpsys alarm<br>     具体使用方法是，dumpsys出来测试开始和结束时的alarm数据，并查找到用户进程的wakeups数据，前后相减获得这段时间应用的唤醒次数和时间。<br>     下面是20分钟测试的alarm数据：<br>     开始的数据：<br>     <img src=\"/upload/image/lzz/wakeup1.JPG\" alt=\"alarm_start\"><br>     20min后的测试数据：<br>     <img src=\"/upload/image/lzz/wakeup2.JPG\" alt=\"alarm_over\"><br>     通过2次测试结果我们发现：<br>     1、com.xdja.actoma的wakeups次数为：6次（13-7=6）<br>     2、com.xdja.HDsafeemailclient次数为：5次<br>     3、com.xdja.xpush次数为：3次<br>     再仔细查看图片上alarm数据：如第一个安通+，共有2个可以引起心跳的行为：如1、com.xdja.csipsimple.pj_timer ;2、com.xdja.alarm.action；通过alarm数据可以清楚的看到这段时间引发心跳的正是com.xdja.alarm.action，推送方面的业务，较log排查问题更加直观易懂。<br>     请看下面图片测试的数据，我以安通+应用作为实例进行分析：<br>     <img src=\"/upload/image/lzz/down-20min.JPG\" alt=\"down_start_20\"><br>     另外我们通过对功耗仪器测试的这段时间：20min数据抓取aplog进行分析后；发现与上面dumpsys alarm抓取的这段时间wakeups数据是一致的。<br>     如：上图的标注：安通+引起了6次网络心跳；xpush引起了3次，上图中标注了2出，因为功耗数据图提前截取了，所以有一次没有截取到；而com.xdja.HDsafeemailclient引起了5次毛刺，为什么不是网络心跳，因为我把手机中这个安全邮件应用给停用了，所以服务无法起来，只能是引起毛刺这样的电流变化；<br>     部分log参考如下，通过log我们可以看到用户应用这段时间做了哪些操作，为什么会导致电流变化。<br>     如安通+引发的网络心跳，实际上是推送业务：<br>     <img src=\"/upload/image/lzz/actoma.JPG\" alt=\"actoma\"><br>     如xpush引发的网络操作：<br>     <img src=\"/upload/image/lzz/xpush-wakeups.JPG\" alt=\"xpush\"><br>     综上所述：对于测试同一个应用功耗的时候，我们在测试的过程中，应该同时抓取log信心，这样在拿到电流变化的数据的时候，对比log查看分析一下心跳和毛刺，哪些是属于我们要测试的应用的数据，而这个数据是否处于正常水平；因为功耗仪器测试的是整体的数据，我们首先要排除其他应用心跳和毛刺带来的高耗电；拿到单个应用20min中的心跳数据，才方便我们与后面版本做相同场景下对比测试，使得测试数据更加精准。<br>     四、耗电测试测试场景<br>     通过三我们小结一下耗电测试的分析方法：1、功耗仪器测试一段时间的数据变化图样和耗电量平均值数据；2、通过查看log，获取心跳和毛刺的变化情况，哪些属于被测应用的，哪些属于其他应用的，哪些属于系统自身的；3、通过alarm 属于获取这段时间wakeups属于，辅助我们功耗仪器测试的耗电结果，准确定位问题所在。<br>     移动APP耗电测试场景和范围：<br>     1、通过adb shell dumpsys alarm 测试应用后台从有网络进入无网络情况下的wakeups唤醒数据，并对比同款机型如QQ、微信做对比测试。（为什么做对比？因为有的手机功能差异比较大，比如有的支持VoIP功能，有的手机就不支持；而这个VoIP功能对耗电影响很大，涉及到通讯模块。）<br>     2、通过功耗仪器测试：后台应用待机情况下无业务和有业务下的耗电。<br>     3、操作主要功能和业务，查看手机是否能正常进入待机，待机后电流是否处于正常水平。<br>     4、操作应用升级的业务和通知栏推送，查看是否有常驻进程，造成应用额外耗电或者底电较高的情况。</p>\n<hr>\n<p>如果你觉得这篇文章对你很有标注的话，请打赏我们，谢谢支持。。。</p>\n<p><img src=\"/upload/image/lzz/giveme.jpg\" alt=\"gaveme\"></p>\n","excerpt":"","more":"<hr>\n<pre><code>移动APP功耗测试如何开展？我们通过什么工具进行移动APP的功耗测试？\n</code></pre><p>一、耗电测试工具和方法：1、使用功耗仪器进行安卓系统和安卓系统APP的功耗测试，测试结果是APP+系统的总耗电量；但是我们可以通过系统总耗电量的大小来判断APP耗电量是否达标，这是我们的目的。<br>     首先我们了解下系统耗电与那些模块相关：硬件方面，1、lcd、蓝牙、WIFI、网络模块（2G/3G/4G）,BP等；软件方面：1、系统服务、常住服务、对网络数据操作是否频繁；以上因素是影响耗电的根本因素。</p>\n<p>二、耗电量测试对APP的执行标准<br>     如何来判断一个应用是过于耗电的，首先我们在使用功耗仪器测试的过程中，影响平均电流的因素有：1、基准底电。2、心跳频繁程度。3、毛刺的大小和数量。4、应用是否有额外的常驻服务。其中2和3主要是对网络的操作，对功耗影响也最为常见。<br>     对于测试的APP耗电是否pass，通常情况下按照如下标准定义：<br>     1、安装被测试应用后，系统耗电平均电流无明显增加；（如灭屏待机耗电在5——10mA;亮屏待机平均电流在：180——230mA;注意每款机器的情况略有不同，需要针对所测机型根据测试结果定义）<br>     2、操作被测APP主要业务后，灭屏待机和亮屏待机不能有明显过高的电量消耗。（如操作业务后，系统不能正常进行待机）<br>     3、被测APP不能有不合理的常驻服务，造成耗电持续偏高。<br>     实际遇到的常见问题<br>     如我在接触并使用功耗仪器：3年左右时间，遇到的在测试软件方面的问题：<br>     1、操作主要业务后，灭屏无法进入待机，灭屏电流在150mA左右，网络模块无法进入休眠。<br>     2、灭屏情况下，接受被动业务，如消息或者推送，连续接收后，网络模块一直处于较高耗电中，无法休眠。（联通4G的网络模块电流一般在150mA左右，移动4G或者联通3G/2G情况下的网络模块电流是不一样的，需要你自己实践测试得出参考数值。）<br>     3、亮屏4g情况下，网络模块一直处于工作状态，耗电持续高达350mA左右，对于这种问题是一定需要优化的。<br>     下面看图：这是一个后台有常驻服务的情况，直接灭屏底电高达14.4mA；正常情况下是4mA左右。<br>     正常情况下灭屏耗电：<br>     <img src=\"/upload/image/lzz/down.JPG\" alt=\"down_start\"><br>     异常情况下灭屏耗电：<br>     <img src=\"/upload/image/lzz/down-error.JPG\" alt=\"error_start\"><br>     通过对比发现，2次的结果虽然都是在灭屏情况下测试的，但实际差异比较大，通过亮屏查看手机系统的情况，发现下拉通知栏，XXX应用有一条消息通知服务：XXX应用应用有新的版本，请及时更新。。。<br>     这就说明应用有一条服务处于常驻进程中，及时在灭屏情况下也在工作中，这是不允许的，因为造成了多于10mA左右的额外耗电。<br>三、移动APP功耗测试问题常见分析，功耗仪器测试波形图分析：<br>     1、首先测试功耗的时候，我们会关注网络心跳和毛刺，因为太多的网络心跳和网络操作必然造成较高的耗电，而这种高耗电又是APP引起的，那么我们不得不进行优化。<br>     （1）、使用adb命令获取应用的网络心跳情况：<br>     adb shell dumpsys alarm<br>     具体使用方法是，dumpsys出来测试开始和结束时的alarm数据，并查找到用户进程的wakeups数据，前后相减获得这段时间应用的唤醒次数和时间。<br>     下面是20分钟测试的alarm数据：<br>     开始的数据：<br>     <img src=\"/upload/image/lzz/wakeup1.JPG\" alt=\"alarm_start\"><br>     20min后的测试数据：<br>     <img src=\"/upload/image/lzz/wakeup2.JPG\" alt=\"alarm_over\"><br>     通过2次测试结果我们发现：<br>     1、com.xdja.actoma的wakeups次数为：6次（13-7=6）<br>     2、com.xdja.HDsafeemailclient次数为：5次<br>     3、com.xdja.xpush次数为：3次<br>     再仔细查看图片上alarm数据：如第一个安通+，共有2个可以引起心跳的行为：如1、com.xdja.csipsimple.pj_timer ;2、com.xdja.alarm.action；通过alarm数据可以清楚的看到这段时间引发心跳的正是com.xdja.alarm.action，推送方面的业务，较log排查问题更加直观易懂。<br>     请看下面图片测试的数据，我以安通+应用作为实例进行分析：<br>     <img src=\"/upload/image/lzz/down-20min.JPG\" alt=\"down_start_20\"><br>     另外我们通过对功耗仪器测试的这段时间：20min数据抓取aplog进行分析后；发现与上面dumpsys alarm抓取的这段时间wakeups数据是一致的。<br>     如：上图的标注：安通+引起了6次网络心跳；xpush引起了3次，上图中标注了2出，因为功耗数据图提前截取了，所以有一次没有截取到；而com.xdja.HDsafeemailclient引起了5次毛刺，为什么不是网络心跳，因为我把手机中这个安全邮件应用给停用了，所以服务无法起来，只能是引起毛刺这样的电流变化；<br>     部分log参考如下，通过log我们可以看到用户应用这段时间做了哪些操作，为什么会导致电流变化。<br>     如安通+引发的网络心跳，实际上是推送业务：<br>     <img src=\"/upload/image/lzz/actoma.JPG\" alt=\"actoma\"><br>     如xpush引发的网络操作：<br>     <img src=\"/upload/image/lzz/xpush-wakeups.JPG\" alt=\"xpush\"><br>     综上所述：对于测试同一个应用功耗的时候，我们在测试的过程中，应该同时抓取log信心，这样在拿到电流变化的数据的时候，对比log查看分析一下心跳和毛刺，哪些是属于我们要测试的应用的数据，而这个数据是否处于正常水平；因为功耗仪器测试的是整体的数据，我们首先要排除其他应用心跳和毛刺带来的高耗电；拿到单个应用20min中的心跳数据，才方便我们与后面版本做相同场景下对比测试，使得测试数据更加精准。<br>     四、耗电测试测试场景<br>     通过三我们小结一下耗电测试的分析方法：1、功耗仪器测试一段时间的数据变化图样和耗电量平均值数据；2、通过查看log，获取心跳和毛刺的变化情况，哪些属于被测应用的，哪些属于其他应用的，哪些属于系统自身的；3、通过alarm 属于获取这段时间wakeups属于，辅助我们功耗仪器测试的耗电结果，准确定位问题所在。<br>     移动APP耗电测试场景和范围：<br>     1、通过adb shell dumpsys alarm 测试应用后台从有网络进入无网络情况下的wakeups唤醒数据，并对比同款机型如QQ、微信做对比测试。（为什么做对比？因为有的手机功能差异比较大，比如有的支持VoIP功能，有的手机就不支持；而这个VoIP功能对耗电影响很大，涉及到通讯模块。）<br>     2、通过功耗仪器测试：后台应用待机情况下无业务和有业务下的耗电。<br>     3、操作主要功能和业务，查看手机是否能正常进入待机，待机后电流是否处于正常水平。<br>     4、操作应用升级的业务和通知栏推送，查看是否有常驻进程，造成应用额外耗电或者底电较高的情况。</p>\n<hr>\n<p>如果你觉得这篇文章对你很有标注的话，请打赏我们，谢谢支持。。。</p>\n<p><img src=\"/upload/image/lzz/giveme.jpg\" alt=\"gaveme\"></p>\n"},{"title":"分析安全邮件首次启动内存问题","date":"2016-10-21T04:14:35.000Z","_content":"## 发现问题\n- 前两天在看【安全邮件】的内存泄漏问题，本来在排查另外一个问题，但是首次启动之后，发现内存维持在40M，GC也不起作用，退出APP之后，内存还是降不下去（后来咨询开发说是虽然退出APP，但是并没有将进程杀死），这绝对是有问题的哇。之前做过测【安通+】的时候做过竞品分析，当时不管微信、QQ、还是钉钉，GC之后内存必然是有回落的。\n- 所以猜测【安全邮件】的首次启动，很大可能是存在内存泄漏的。\n\n## 抓取内存数据\n- 碰到内存问题，最先想到的就是MAT，这里我们用AndroidStudio的Monitor来dump hprof文件。{% post_link MAT工具的使用 使用方法可以点击查看 %}\n\n## 分析内存数据\n- 用MAT打开hprof文件，先打开【Dominator_tree】视图，如下图所示：\n![email_start](/upload/image/email_start.PNG)\n- 看到上图，是不是有点头大，不要紧，我们先大致的扫一眼，看占用内存空间的对象都有哪些，最占空间的竟然是BitmapDrawable，直觉告诉我们，这肯定是有问题的，Android开发中，图片是最占用内存空间的，在磁盘上几十K的图片，加载到内存中可能会变成十几M，所以一般开发的原则是，在图片不使用时要及时回收。\n- 我们来看看这个Bitmap 到GC Root的最短路径，选中bitmapDrawable这一行，右键【merge shortest Paths to  GC Roots】，再选择【exclude all phantom/weak/soft etc.references】，如下图所示：\n![email_mat1](/upload/image/email_mat1.PNG)\n- 我们注意到两个关键点：第一个是以com.xdja.HDSafeEMail开头的类，证明这个图片是我们的代码还在持有，第二个是最上面的Thread+AnimationHandler是GC Root，这说明有可能是因为Handler还在工作造成对象不能不被释放，这种情况比较常见。\n- 因为没有【安全邮件】代码，所以只能先将问题反馈给开发，让他们自己去排查下GuideFragmentThreeView是不是有用到AnimationHandler的地方没有及时停止，猜测可能是用法有不对的地方。\n","source":"_posts/分析安全邮件首次启动内存问题.md","raw":"---\ntitle: 分析安全邮件首次启动内存问题\ndate: 2016-10-21 12:14:35\ntags: 内存\ncategories: 实例分析\n---\n## 发现问题\n- 前两天在看【安全邮件】的内存泄漏问题，本来在排查另外一个问题，但是首次启动之后，发现内存维持在40M，GC也不起作用，退出APP之后，内存还是降不下去（后来咨询开发说是虽然退出APP，但是并没有将进程杀死），这绝对是有问题的哇。之前做过测【安通+】的时候做过竞品分析，当时不管微信、QQ、还是钉钉，GC之后内存必然是有回落的。\n- 所以猜测【安全邮件】的首次启动，很大可能是存在内存泄漏的。\n\n## 抓取内存数据\n- 碰到内存问题，最先想到的就是MAT，这里我们用AndroidStudio的Monitor来dump hprof文件。{% post_link MAT工具的使用 使用方法可以点击查看 %}\n\n## 分析内存数据\n- 用MAT打开hprof文件，先打开【Dominator_tree】视图，如下图所示：\n![email_start](/upload/image/email_start.PNG)\n- 看到上图，是不是有点头大，不要紧，我们先大致的扫一眼，看占用内存空间的对象都有哪些，最占空间的竟然是BitmapDrawable，直觉告诉我们，这肯定是有问题的，Android开发中，图片是最占用内存空间的，在磁盘上几十K的图片，加载到内存中可能会变成十几M，所以一般开发的原则是，在图片不使用时要及时回收。\n- 我们来看看这个Bitmap 到GC Root的最短路径，选中bitmapDrawable这一行，右键【merge shortest Paths to  GC Roots】，再选择【exclude all phantom/weak/soft etc.references】，如下图所示：\n![email_mat1](/upload/image/email_mat1.PNG)\n- 我们注意到两个关键点：第一个是以com.xdja.HDSafeEMail开头的类，证明这个图片是我们的代码还在持有，第二个是最上面的Thread+AnimationHandler是GC Root，这说明有可能是因为Handler还在工作造成对象不能不被释放，这种情况比较常见。\n- 因为没有【安全邮件】代码，所以只能先将问题反馈给开发，让他们自己去排查下GuideFragmentThreeView是不是有用到AnimationHandler的地方没有及时停止，猜测可能是用法有不对的地方。\n","slug":"分析安全邮件首次启动内存问题","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngd000r0cwl17xr1cmt","content":"<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><ul>\n<li>前两天在看【安全邮件】的内存泄漏问题，本来在排查另外一个问题，但是首次启动之后，发现内存维持在40M，GC也不起作用，退出APP之后，内存还是降不下去（后来咨询开发说是虽然退出APP，但是并没有将进程杀死），这绝对是有问题的哇。之前做过测【安通+】的时候做过竞品分析，当时不管微信、QQ、还是钉钉，GC之后内存必然是有回落的。</li>\n<li>所以猜测【安全邮件】的首次启动，很大可能是存在内存泄漏的。</li>\n</ul>\n<h2 id=\"抓取内存数据\"><a href=\"#抓取内存数据\" class=\"headerlink\" title=\"抓取内存数据\"></a>抓取内存数据</h2><ul>\n<li>碰到内存问题，最先想到的就是MAT，这里我们用AndroidStudio的Monitor来dump hprof文件。<a href=\"/2016/10/19/MAT工具的使用/\" title=\"使用方法可以点击查看\">使用方法可以点击查看</a></li>\n</ul>\n<h2 id=\"分析内存数据\"><a href=\"#分析内存数据\" class=\"headerlink\" title=\"分析内存数据\"></a>分析内存数据</h2><ul>\n<li>用MAT打开hprof文件，先打开【Dominator_tree】视图，如下图所示：<br><img src=\"/upload/image/email_start.PNG\" alt=\"email_start\"></li>\n<li>看到上图，是不是有点头大，不要紧，我们先大致的扫一眼，看占用内存空间的对象都有哪些，最占空间的竟然是BitmapDrawable，直觉告诉我们，这肯定是有问题的，Android开发中，图片是最占用内存空间的，在磁盘上几十K的图片，加载到内存中可能会变成十几M，所以一般开发的原则是，在图片不使用时要及时回收。</li>\n<li>我们来看看这个Bitmap 到GC Root的最短路径，选中bitmapDrawable这一行，右键【merge shortest Paths to  GC Roots】，再选择【exclude all phantom/weak/soft etc.references】，如下图所示：<br><img src=\"/upload/image/email_mat1.PNG\" alt=\"email_mat1\"></li>\n<li>我们注意到两个关键点：第一个是以com.xdja.HDSafeEMail开头的类，证明这个图片是我们的代码还在持有，第二个是最上面的Thread+AnimationHandler是GC Root，这说明有可能是因为Handler还在工作造成对象不能不被释放，这种情况比较常见。</li>\n<li>因为没有【安全邮件】代码，所以只能先将问题反馈给开发，让他们自己去排查下GuideFragmentThreeView是不是有用到AnimationHandler的地方没有及时停止，猜测可能是用法有不对的地方。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><ul>\n<li>前两天在看【安全邮件】的内存泄漏问题，本来在排查另外一个问题，但是首次启动之后，发现内存维持在40M，GC也不起作用，退出APP之后，内存还是降不下去（后来咨询开发说是虽然退出APP，但是并没有将进程杀死），这绝对是有问题的哇。之前做过测【安通+】的时候做过竞品分析，当时不管微信、QQ、还是钉钉，GC之后内存必然是有回落的。</li>\n<li>所以猜测【安全邮件】的首次启动，很大可能是存在内存泄漏的。</li>\n</ul>\n<h2 id=\"抓取内存数据\"><a href=\"#抓取内存数据\" class=\"headerlink\" title=\"抓取内存数据\"></a>抓取内存数据</h2><ul>\n<li>碰到内存问题，最先想到的就是MAT，这里我们用AndroidStudio的Monitor来dump hprof文件。<a href=\"/2016/10/19/MAT工具的使用/\" title=\"使用方法可以点击查看\">使用方法可以点击查看</a></li>\n</ul>\n<h2 id=\"分析内存数据\"><a href=\"#分析内存数据\" class=\"headerlink\" title=\"分析内存数据\"></a>分析内存数据</h2><ul>\n<li>用MAT打开hprof文件，先打开【Dominator_tree】视图，如下图所示：<br><img src=\"/upload/image/email_start.PNG\" alt=\"email_start\"></li>\n<li>看到上图，是不是有点头大，不要紧，我们先大致的扫一眼，看占用内存空间的对象都有哪些，最占空间的竟然是BitmapDrawable，直觉告诉我们，这肯定是有问题的，Android开发中，图片是最占用内存空间的，在磁盘上几十K的图片，加载到内存中可能会变成十几M，所以一般开发的原则是，在图片不使用时要及时回收。</li>\n<li>我们来看看这个Bitmap 到GC Root的最短路径，选中bitmapDrawable这一行，右键【merge shortest Paths to  GC Roots】，再选择【exclude all phantom/weak/soft etc.references】，如下图所示：<br><img src=\"/upload/image/email_mat1.PNG\" alt=\"email_mat1\"></li>\n<li>我们注意到两个关键点：第一个是以com.xdja.HDSafeEMail开头的类，证明这个图片是我们的代码还在持有，第二个是最上面的Thread+AnimationHandler是GC Root，这说明有可能是因为Handler还在工作造成对象不能不被释放，这种情况比较常见。</li>\n<li>因为没有【安全邮件】代码，所以只能先将问题反馈给开发，让他们自己去排查下GuideFragmentThreeView是不是有用到AnimationHandler的地方没有及时停止，猜测可能是用法有不对的地方。</li>\n</ul>\n"},{"title":"网络请求测试","date":"2016-10-31T01:48:58.000Z","_content":"\n        目前的网络类型包含2G\\3G\\4G\\wifi，其中还有不同运营商的区分，我们在APP的使用中经常遇到大资源，重复请求，调用响应慢，调用失败等各种情况。在不同的网络类型之下，我们不仅要控制流量使用，还需要加快请求的响应。\n\n1.1 流量\n\n       通常来说APP流量使用最大的两部分是: 服务端api交互，图片/css/js等cdn静态资源。减少这两个部分的资源个数和资源大小，能有效的限制流量的使用。另外还需要严格控制后台静默时流量的使用。\n\n1.2 流量统计工具\n\n    DDMS Network Statistics、Android studio monitor\n\n    3款代理工具: fiddler, charles, wmock\n\n    抓包工具 : tcpdump\n\n1.3 弱网络模拟&网络切换测试\n\n        使用 charles throttle settings模拟，能够对上下行带宽，丢包率，延迟等网络参数进行设置\n\n\n----------\n关于弱网以及网络切换测试作为app功能/场测测试的一部分，所以在客户端网络请求性能测试上不在涉及，上面之所以把它拿出来，是想告诉大家我们测试APP软件的过程中思路不要太过局限。\n        1、APP网络专项测试过程中：我们测试的范围只是包括应用后台情况下的静置耗流量测试，需对比同类应用相同环境下做对比测试；网络数据包请求测试。\n        （1）、静置耗流量测试，用于测试静默状态下的流量消耗，已经在后台使用过程中的业务操作，重点着眼于无业务情况下的流量消耗，确定是否有无效业务偷流量，耗费系统资源。因此，如果静置耗流量比较高，一定是业务请求出了问题，所以静置耗流量属于网络数据包请求测试的一种场景，只不过它测试的是一段时间内的业务量。\n        （2）网络请求测试的重点：\n                 1.无重复请求，无重复下载(图片) \n                 2.常用切换界面需要做缓存 \n                 3.支持分页加载 \n例如流量测试可能出现以下类型的BUG:\n![batterystats](/upload/image/data-model.jpg)\n\n----------\n举例分析其中一种情况：如测试客户端过程中，重复发出多次请求：\n1、我们可以通过抓包软件fidder进行测试，当我们每操作一步APP的某个功能的时候，可以发现fiddler发出相同请求的个数，并通过收到服务端数据包的个数，以及数据包的类型是否相同来进行判断业务是否有重复的请求，如果有，就是存在问题，应该尽量避免有多余无效的应用请求。\n2、我们也可以通过Android studio monitor来进行测试，当然测试过程中需要配合实时的logcat获取应用执行过程中的log，因为通过log也能看到应用发送和接受的数据，当然这没有fiddler的数据包更直观。\n在执行测试app的每个业务场景的时候，实时抓取操作该动作前后，应用消耗的流量（上传和下载的流量综合），从而宏观的了解到应用操作该业务所消耗的流量，在测试每个场景网络请求的过程中，配合采集的流量数据，可以进行下一版本的横向比较，通过横向比较在无重复网络请求的情况下，我们可以知道版本质量的性能变化趋势。\n\n小结：app网络流量性能测试点和测试范围：\n\n 1.后台无操作情况下静置流量消耗（用于测试静默业务下的流量消耗），输出结果为静默状态下的一个流量消耗的值，用于版本横向比较，与其他应用进行比较，出现过高流量消耗时，需要抓取log进行分析。\n 2、测试应用在前台各个操作场景下的网络请求次数、无效请求、重复请求次数。\n 3、测试应用在前台各个操作场景下的每一类操作下的流量消耗的值，（可多次测试记录消耗平均值、波动范围等参数，用于优化和分析调优，也用于版本横向比较），关于本部分每部操作下流量消耗总量的统计、绘图及分析方法可以通过Python脚本实现。因为现有测试工具Android studio monitor 实现的数据流量实时监控，但不会采集数据并保存我们需要的数据。","source":"_posts/网络请求测试.md","raw":"---\ntitle: 网络请求测试\ndate: 2016-10-31 09:48:58\ntags: 流量请求 耗流量 网络请求 客户端性能\ncategories: 实例分析\n---\n\n        目前的网络类型包含2G\\3G\\4G\\wifi，其中还有不同运营商的区分，我们在APP的使用中经常遇到大资源，重复请求，调用响应慢，调用失败等各种情况。在不同的网络类型之下，我们不仅要控制流量使用，还需要加快请求的响应。\n\n1.1 流量\n\n       通常来说APP流量使用最大的两部分是: 服务端api交互，图片/css/js等cdn静态资源。减少这两个部分的资源个数和资源大小，能有效的限制流量的使用。另外还需要严格控制后台静默时流量的使用。\n\n1.2 流量统计工具\n\n    DDMS Network Statistics、Android studio monitor\n\n    3款代理工具: fiddler, charles, wmock\n\n    抓包工具 : tcpdump\n\n1.3 弱网络模拟&网络切换测试\n\n        使用 charles throttle settings模拟，能够对上下行带宽，丢包率，延迟等网络参数进行设置\n\n\n----------\n关于弱网以及网络切换测试作为app功能/场测测试的一部分，所以在客户端网络请求性能测试上不在涉及，上面之所以把它拿出来，是想告诉大家我们测试APP软件的过程中思路不要太过局限。\n        1、APP网络专项测试过程中：我们测试的范围只是包括应用后台情况下的静置耗流量测试，需对比同类应用相同环境下做对比测试；网络数据包请求测试。\n        （1）、静置耗流量测试，用于测试静默状态下的流量消耗，已经在后台使用过程中的业务操作，重点着眼于无业务情况下的流量消耗，确定是否有无效业务偷流量，耗费系统资源。因此，如果静置耗流量比较高，一定是业务请求出了问题，所以静置耗流量属于网络数据包请求测试的一种场景，只不过它测试的是一段时间内的业务量。\n        （2）网络请求测试的重点：\n                 1.无重复请求，无重复下载(图片) \n                 2.常用切换界面需要做缓存 \n                 3.支持分页加载 \n例如流量测试可能出现以下类型的BUG:\n![batterystats](/upload/image/data-model.jpg)\n\n----------\n举例分析其中一种情况：如测试客户端过程中，重复发出多次请求：\n1、我们可以通过抓包软件fidder进行测试，当我们每操作一步APP的某个功能的时候，可以发现fiddler发出相同请求的个数，并通过收到服务端数据包的个数，以及数据包的类型是否相同来进行判断业务是否有重复的请求，如果有，就是存在问题，应该尽量避免有多余无效的应用请求。\n2、我们也可以通过Android studio monitor来进行测试，当然测试过程中需要配合实时的logcat获取应用执行过程中的log，因为通过log也能看到应用发送和接受的数据，当然这没有fiddler的数据包更直观。\n在执行测试app的每个业务场景的时候，实时抓取操作该动作前后，应用消耗的流量（上传和下载的流量综合），从而宏观的了解到应用操作该业务所消耗的流量，在测试每个场景网络请求的过程中，配合采集的流量数据，可以进行下一版本的横向比较，通过横向比较在无重复网络请求的情况下，我们可以知道版本质量的性能变化趋势。\n\n小结：app网络流量性能测试点和测试范围：\n\n 1.后台无操作情况下静置流量消耗（用于测试静默业务下的流量消耗），输出结果为静默状态下的一个流量消耗的值，用于版本横向比较，与其他应用进行比较，出现过高流量消耗时，需要抓取log进行分析。\n 2、测试应用在前台各个操作场景下的网络请求次数、无效请求、重复请求次数。\n 3、测试应用在前台各个操作场景下的每一类操作下的流量消耗的值，（可多次测试记录消耗平均值、波动范围等参数，用于优化和分析调优，也用于版本横向比较），关于本部分每部操作下流量消耗总量的统计、绘图及分析方法可以通过Python脚本实现。因为现有测试工具Android studio monitor 实现的数据流量实时监控，但不会采集数据并保存我们需要的数据。","slug":"网络请求测试","published":1,"updated":"2016-11-03T11:17:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2dsngt000w0cwlpj77nls5","content":"<pre><code>目前的网络类型包含2G\\3G\\4G\\wifi，其中还有不同运营商的区分，我们在APP的使用中经常遇到大资源，重复请求，调用响应慢，调用失败等各种情况。在不同的网络类型之下，我们不仅要控制流量使用，还需要加快请求的响应。\n</code></pre><p>1.1 流量</p>\n<pre><code>通常来说APP流量使用最大的两部分是: 服务端api交互，图片/css/js等cdn静态资源。减少这两个部分的资源个数和资源大小，能有效的限制流量的使用。另外还需要严格控制后台静默时流量的使用。\n</code></pre><p>1.2 流量统计工具</p>\n<pre><code>DDMS Network Statistics、Android studio monitor\n\n3款代理工具: fiddler, charles, wmock\n\n抓包工具 : tcpdump\n</code></pre><p>1.3 弱网络模拟&amp;网络切换测试</p>\n<pre><code>使用 charles throttle settings模拟，能够对上下行带宽，丢包率，延迟等网络参数进行设置\n</code></pre><hr>\n<p>关于弱网以及网络切换测试作为app功能/场测测试的一部分，所以在客户端网络请求性能测试上不在涉及，上面之所以把它拿出来，是想告诉大家我们测试APP软件的过程中思路不要太过局限。<br>        1、APP网络专项测试过程中：我们测试的范围只是包括应用后台情况下的静置耗流量测试，需对比同类应用相同环境下做对比测试；网络数据包请求测试。<br>        （1）、静置耗流量测试，用于测试静默状态下的流量消耗，已经在后台使用过程中的业务操作，重点着眼于无业务情况下的流量消耗，确定是否有无效业务偷流量，耗费系统资源。因此，如果静置耗流量比较高，一定是业务请求出了问题，所以静置耗流量属于网络数据包请求测试的一种场景，只不过它测试的是一段时间内的业务量。<br>        （2）网络请求测试的重点：<br>                 1.无重复请求，无重复下载(图片)<br>                 2.常用切换界面需要做缓存<br>                 3.支持分页加载<br>例如流量测试可能出现以下类型的BUG:<br><img src=\"/upload/image/data-model.jpg\" alt=\"batterystats\"></p>\n<hr>\n<p>举例分析其中一种情况：如测试客户端过程中，重复发出多次请求：<br>1、我们可以通过抓包软件fidder进行测试，当我们每操作一步APP的某个功能的时候，可以发现fiddler发出相同请求的个数，并通过收到服务端数据包的个数，以及数据包的类型是否相同来进行判断业务是否有重复的请求，如果有，就是存在问题，应该尽量避免有多余无效的应用请求。<br>2、我们也可以通过Android studio monitor来进行测试，当然测试过程中需要配合实时的logcat获取应用执行过程中的log，因为通过log也能看到应用发送和接受的数据，当然这没有fiddler的数据包更直观。<br>在执行测试app的每个业务场景的时候，实时抓取操作该动作前后，应用消耗的流量（上传和下载的流量综合），从而宏观的了解到应用操作该业务所消耗的流量，在测试每个场景网络请求的过程中，配合采集的流量数据，可以进行下一版本的横向比较，通过横向比较在无重复网络请求的情况下，我们可以知道版本质量的性能变化趋势。</p>\n<p>小结：app网络流量性能测试点和测试范围：</p>\n<p> 1.后台无操作情况下静置流量消耗（用于测试静默业务下的流量消耗），输出结果为静默状态下的一个流量消耗的值，用于版本横向比较，与其他应用进行比较，出现过高流量消耗时，需要抓取log进行分析。<br> 2、测试应用在前台各个操作场景下的网络请求次数、无效请求、重复请求次数。<br> 3、测试应用在前台各个操作场景下的每一类操作下的流量消耗的值，（可多次测试记录消耗平均值、波动范围等参数，用于优化和分析调优，也用于版本横向比较），关于本部分每部操作下流量消耗总量的统计、绘图及分析方法可以通过Python脚本实现。因为现有测试工具Android studio monitor 实现的数据流量实时监控，但不会采集数据并保存我们需要的数据。</p>\n","excerpt":"","more":"<pre><code>目前的网络类型包含2G\\3G\\4G\\wifi，其中还有不同运营商的区分，我们在APP的使用中经常遇到大资源，重复请求，调用响应慢，调用失败等各种情况。在不同的网络类型之下，我们不仅要控制流量使用，还需要加快请求的响应。\n</code></pre><p>1.1 流量</p>\n<pre><code>通常来说APP流量使用最大的两部分是: 服务端api交互，图片/css/js等cdn静态资源。减少这两个部分的资源个数和资源大小，能有效的限制流量的使用。另外还需要严格控制后台静默时流量的使用。\n</code></pre><p>1.2 流量统计工具</p>\n<pre><code>DDMS Network Statistics、Android studio monitor\n\n3款代理工具: fiddler, charles, wmock\n\n抓包工具 : tcpdump\n</code></pre><p>1.3 弱网络模拟&amp;网络切换测试</p>\n<pre><code>使用 charles throttle settings模拟，能够对上下行带宽，丢包率，延迟等网络参数进行设置\n</code></pre><hr>\n<p>关于弱网以及网络切换测试作为app功能/场测测试的一部分，所以在客户端网络请求性能测试上不在涉及，上面之所以把它拿出来，是想告诉大家我们测试APP软件的过程中思路不要太过局限。<br>        1、APP网络专项测试过程中：我们测试的范围只是包括应用后台情况下的静置耗流量测试，需对比同类应用相同环境下做对比测试；网络数据包请求测试。<br>        （1）、静置耗流量测试，用于测试静默状态下的流量消耗，已经在后台使用过程中的业务操作，重点着眼于无业务情况下的流量消耗，确定是否有无效业务偷流量，耗费系统资源。因此，如果静置耗流量比较高，一定是业务请求出了问题，所以静置耗流量属于网络数据包请求测试的一种场景，只不过它测试的是一段时间内的业务量。<br>        （2）网络请求测试的重点：<br>                 1.无重复请求，无重复下载(图片)<br>                 2.常用切换界面需要做缓存<br>                 3.支持分页加载<br>例如流量测试可能出现以下类型的BUG:<br><img src=\"/upload/image/data-model.jpg\" alt=\"batterystats\"></p>\n<hr>\n<p>举例分析其中一种情况：如测试客户端过程中，重复发出多次请求：<br>1、我们可以通过抓包软件fidder进行测试，当我们每操作一步APP的某个功能的时候，可以发现fiddler发出相同请求的个数，并通过收到服务端数据包的个数，以及数据包的类型是否相同来进行判断业务是否有重复的请求，如果有，就是存在问题，应该尽量避免有多余无效的应用请求。<br>2、我们也可以通过Android studio monitor来进行测试，当然测试过程中需要配合实时的logcat获取应用执行过程中的log，因为通过log也能看到应用发送和接受的数据，当然这没有fiddler的数据包更直观。<br>在执行测试app的每个业务场景的时候，实时抓取操作该动作前后，应用消耗的流量（上传和下载的流量综合），从而宏观的了解到应用操作该业务所消耗的流量，在测试每个场景网络请求的过程中，配合采集的流量数据，可以进行下一版本的横向比较，通过横向比较在无重复网络请求的情况下，我们可以知道版本质量的性能变化趋势。</p>\n<p>小结：app网络流量性能测试点和测试范围：</p>\n<p> 1.后台无操作情况下静置流量消耗（用于测试静默业务下的流量消耗），输出结果为静默状态下的一个流量消耗的值，用于版本横向比较，与其他应用进行比较，出现过高流量消耗时，需要抓取log进行分析。<br> 2、测试应用在前台各个操作场景下的网络请求次数、无效请求、重复请求次数。<br> 3、测试应用在前台各个操作场景下的每一类操作下的流量消耗的值，（可多次测试记录消耗平均值、波动范围等参数，用于优化和分析调优，也用于版本横向比较），关于本部分每部操作下流量消耗总量的统计、绘图及分析方法可以通过Python脚本实现。因为现有测试工具Android studio monitor 实现的数据流量实时监控，但不会采集数据并保存我们需要的数据。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civ2dsnfx00010cwl370hme1q","category_id":"civ2dsnfx00020cwlr9wq8ixh","_id":"civ2dsnfx00050cwl5fmbat5w"},{"post_id":"civ2dsnfx00060cwl7iw2ev3h","category_id":"civ2dsnfx00020cwlr9wq8ixh","_id":"civ2dsngd00080cwlpprjcsjn"},{"post_id":"civ2dsngd000a0cwlfcfj4puk","category_id":"civ2dsngd000b0cwlb578aaq4","_id":"civ2dsngd000e0cwluxowicec"},{"post_id":"civ2dsngd000f0cwly3726fuj","category_id":"civ2dsngd000b0cwlb578aaq4","_id":"civ2dsngd000h0cwl0iqylm8a"},{"post_id":"civ2dsngd000m0cwlwbgbyrse","category_id":"civ2dsngd000n0cwl56my40uo","_id":"civ2dsngd000q0cwlx6ff69ka"},{"post_id":"civ2dsngd000r0cwl17xr1cmt","category_id":"civ2dsngd000n0cwl56my40uo","_id":"civ2dsngd000t0cwlu1c0hfc1"},{"post_id":"civ2dsngt000w0cwlpj77nls5","category_id":"civ2dsngd000n0cwl56my40uo","_id":"civ2dsngt000y0cwl8iccwalm"}],"PostTag":[{"post_id":"civ2dsnfx00010cwl370hme1q","tag_id":"civ2dsnfx00030cwl2i3btvjo","_id":"civ2dsnfx00040cwl3rkgafxb"},{"post_id":"civ2dsnfx00060cwl7iw2ev3h","tag_id":"civ2dsngd00070cwlqi19zf8n","_id":"civ2dsngd00090cwl4np2h9t5"},{"post_id":"civ2dsngd000a0cwlfcfj4puk","tag_id":"civ2dsngd000c0cwle0rmrgvj","_id":"civ2dsngd000d0cwliz6c1zrs"},{"post_id":"civ2dsngd000f0cwly3726fuj","tag_id":"civ2dsngd000g0cwlpg85wg4k","_id":"civ2dsngd000i0cwlaiw7eyph"},{"post_id":"civ2dsngd000j0cwl7aadvlpz","tag_id":"civ2dsngd000k0cwlu0b1lgs8","_id":"civ2dsngd000l0cwlhue0bo0x"},{"post_id":"civ2dsngd000m0cwlwbgbyrse","tag_id":"civ2dsngd000o0cwl7roce36w","_id":"civ2dsngd000p0cwlbfldj5j1"},{"post_id":"civ2dsngd000r0cwl17xr1cmt","tag_id":"civ2dsngd000s0cwlstwmrtgq","_id":"civ2dsngd000u0cwluuovbfk5"},{"post_id":"civ2dsngt000w0cwlpj77nls5","tag_id":"civ2dsngt000x0cwlwc0mg3jd","_id":"civ2dsngt000z0cwlo8fln9eg"}],"Tag":[{"name":"Android耗电量","_id":"civ2dsnfx00030cwl2i3btvjo"},{"name":"Android,cpu","_id":"civ2dsngd00070cwlqi19zf8n"},{"name":"MAT,工具","_id":"civ2dsngd000c0cwle0rmrgvj"},{"name":"TraceView,工具","_id":"civ2dsngd000g0cwlpg85wg4k"},{"name":"写博客","_id":"civ2dsngd000k0cwlu0b1lgs8"},{"name":"APP性能测试 耗电量 功耗 功耗仪器 内存 CPU 流量 应用启动 专项测试 功耗仪耗电分析 客户端性能测试","_id":"civ2dsngd000o0cwl7roce36w"},{"name":"内存","_id":"civ2dsngd000s0cwlstwmrtgq"},{"name":"流量请求 耗流量 网络请求 客户端性能","_id":"civ2dsngt000x0cwlwc0mg3jd"}]}}